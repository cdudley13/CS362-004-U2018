Result for running Dominion test suit:
unittest1.c:
----------------- Testing: updateCoins()---------------------

Treasure cards: 0
Bonus: 1

Coin Count - copper
Actual: 1
Expected: 1
Test: PASSED

Coin Count - silver
Actual: 1
Expected: 1
Test: PASSED

Coin Count - gold
Actual: 1
Expected: 1
Test: PASSED


Treasure cards: 5
Bonus: 3

Coin Count - copper
Actual: 8
Expected: 8
Test: PASSED

Coin Count - silver
Actual: 13
Expected: 13
Test: PASSED

Coin Count - gold
Actual: 18
Expected: 18
Test: PASSED

TEST SUCCESSFULLY COMPLETED

File 'unittest1.c'
Lines executed:91.49% of 47
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:15.96% of 570
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** PREPROCESSOR DIRECTIVES
        -:    3:*******************************************************************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:/*******************************************************************************
        -:   13:** FUNCTION DECLARATIONS
        -:   14:*******************************************************************************/
        -:   15:
        -:   16:void adventurer_refactor(struct gameState*, int, int*);                         // Declare function for adventurer card functionality
        -:   17:void smithy_refactor(struct gameState*, int, int);                              // Declare function for smithy card functionality
        -:   18:void baron_refactor(struct gameState*, int, int);                               // Declare function for baron card functionality
        -:   19:void minion_refactor(struct gameState*, int, int, int, int);                    // Declare function for minion card functionality
        -:   20:void cutpurse_refactor(struct gameState*, int, int);                            // Declare function for cutpurse card functionality
        -:   21:
       60:   22:int compare(const void* a, const void* b) {
       60:   23:  if (*(int*)a > *(int*)b)
    #####:   24:    return 1;
       60:   25:  if (*(int*)a < *(int*)b)
       16:   26:    return -1;
       44:   27:  return 0;
        -:   28:}
        -:   29:
    #####:   30:struct gameState* newGame() {
    #####:   31:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   32:  return g;
        -:   33:}
        -:   34:
    #####:   35:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   36:		  int k8, int k9, int k10) {
    #####:   37:  int* k = malloc(10 * sizeof(int));
    #####:   38:  k[0] = k1;
    #####:   39:  k[1] = k2;
    #####:   40:  k[2] = k3;
    #####:   41:  k[3] = k4;
    #####:   42:  k[4] = k5;
    #####:   43:  k[5] = k6;
    #####:   44:  k[6] = k7;
    #####:   45:  k[7] = k8;
    #####:   46:  k[8] = k9;
    #####:   47:  k[9] = k10;
    #####:   48:  return k;
        -:   49:}
        -:   50:
        2:   51:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        2:   58:  SelectStream(1);
        2:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        2:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        2:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:  //check selected kingdom cards are different
       22:   71:  for (i = 0; i < 10; i++)
        -:   72:    {
      220:   73:      for (j = 0; j < 10; j++)
        -:   74:        {
      200:   75:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:	    {
    #####:   77:	      return -1;
        -:   78:	    }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:
        -:   83:  //initialize supply
        -:   84:  ///////////////////////////////
        -:   85:
        -:   86:  //set number of Curse cards
        2:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[curse] = 10;
        -:   90:    }
    #####:   91:  else if (numPlayers == 3)
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 20;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 30;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Victory cards
        2:  101:  if (numPlayers == 2)
        -:  102:    {
        2:  103:      state->supplyCount[estate] = 8;
        2:  104:      state->supplyCount[duchy] = 8;
        2:  105:      state->supplyCount[province] = 8;
        -:  106:    }
        -:  107:  else
        -:  108:    {
    #####:  109:      state->supplyCount[estate] = 12;
    #####:  110:      state->supplyCount[duchy] = 12;
    #####:  111:      state->supplyCount[province] = 12;
        -:  112:    }
        -:  113:
        -:  114:  //set number of Treasure cards
        2:  115:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  116:  state->supplyCount[silver] = 40;
        2:  117:  state->supplyCount[gold] = 30;
        -:  118:
        -:  119:  //set number of Kingdom cards
       42:  120:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  121:    {
      330:  122:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  123:	{
      310:  124:	  if (kingdomCards[j] == i)
        -:  125:	    {
        -:  126:	      //check if card is a 'Victory' Kingdom card
       20:  127:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:		{
        8:  129:		  if (numPlayers == 2){
        4:  130:		    state->supplyCount[i] = 8;
        -:  131:		  }
    #####:  132:		  else{ state->supplyCount[i] = 12; }
        -:  133:		}
        -:  134:	      else
        -:  135:		{
       16:  136:		  state->supplyCount[i] = 10;
        -:  137:		}
       20:  138:	      break;
        -:  139:	    }
        -:  140:	  else    //card is not in the set choosen for the game
        -:  141:	    {
      290:  142:	      state->supplyCount[i] = -1;
        -:  143:	    }
        -:  144:	}
        -:  145:
        -:  146:    }
        -:  147:
        -:  148:  ////////////////////////
        -:  149:  //supply intilization complete
        -:  150:
        -:  151:  //set player decks
        6:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
        4:  154:      state->deckCount[i] = 0;
       16:  155:      for (j = 0; j < 3; j++)
        -:  156:	{
       12:  157:	  state->deck[i][j] = estate;
       12:  158:	  state->deckCount[i]++;
        -:  159:	}
       32:  160:      for (j = 3; j < 10; j++)
        -:  161:	{
       28:  162:	  state->deck[i][j] = copper;
       28:  163:	  state->deckCount[i]++;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //shuffle player decks
        6:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        4:  170:      if ( shuffle(i, state) < 0 )
        -:  171:	{
    #####:  172:	  return -1;
        -:  173:	}
        -:  174:    }
        -:  175:
        -:  176:  //draw player hands
        6:  177:  for (i = 0; i < numPlayers; i++)
        -:  178:    {
        -:  179:      //initialize hand size to zero
        4:  180:      state->handCount[i] = 0;
        4:  181:      state->discardCount[i] = 0;
        -:  182:      //draw 5 cards
        -:  183:      // for (j = 0; j < 5; j++)
        -:  184:      //	{
        -:  185:      //	  drawCard(i, state);
        -:  186:      //	}
        -:  187:    }
        -:  188:
        -:  189:  //set embargo tokens to 0 for all supply piles
       56:  190:  for (i = 0; i <= treasure_map; i++)
        -:  191:    {
       54:  192:      state->embargoTokens[i] = 0;
        -:  193:    }
        -:  194:
        -:  195:  //initialize first player's turn
        2:  196:  state->outpostPlayed = 0;
        2:  197:  state->phase = 0;
        2:  198:  state->numActions = 1;
        2:  199:  state->numBuys = 1;
        2:  200:  state->playedCardCount = 0;
        2:  201:  state->whoseTurn = 0;
        2:  202:  state->handCount[state->whoseTurn] = 0;
        -:  203:  //int it; move to top
        -:  204:
        -:  205:  //Moved draw cards to here, only drawing at the start of a turn
       12:  206:  for (it = 0; it < 5; it++){
       10:  207:    drawCard(state->whoseTurn, state);
        -:  208:  }
        -:  209:
        2:  210:  updateCoins(state->whoseTurn, state, 0);
        -:  211:
        2:  212:  return 0;
        -:  213:}
        -:  214:
        4:  215:int shuffle(int player, struct gameState *state) {
        -:  216:
        -:  217:
        -:  218:  int newDeck[MAX_DECK];
        4:  219:  int newDeckPos = 0;
        -:  220:  int card;
        -:  221:  int i;
        -:  222:
        4:  223:  if (state->deckCount[player] < 1)
    #####:  224:    return -1;
        4:  225:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  226:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  227:
       48:  228:  while (state->deckCount[player] > 0) {
       40:  229:    card = floor(Random() * state->deckCount[player]);
       40:  230:    newDeck[newDeckPos] = state->deck[player][card];
       40:  231:    newDeckPos++;
      152:  232:    for (i = card; i < state->deckCount[player]-1; i++) {
      112:  233:      state->deck[player][i] = state->deck[player][i+1];
        -:  234:    }
       40:  235:    state->deckCount[player]--;
        -:  236:  }
       44:  237:  for (i = 0; i < newDeckPos; i++) {
       40:  238:    state->deck[player][i] = newDeck[i];
       40:  239:    state->deckCount[player]++;
        -:  240:  }
        -:  241:
        4:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:  int card;
    #####:  248:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  249:
        -:  250:  //check if it is the right phase
    #####:  251:  if (state->phase != 0)
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //check if player has enough actions
    #####:  257:  if ( state->numActions < 1 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //get card played
    #####:  263:  card = handCard(handPos, state);
        -:  264:
        -:  265:  //check if selected card is an action
    #####:  266:  if ( card < adventurer || card > treasure_map )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //play card
    #####:  272:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  273:    {
    #####:  274:      return -1;
        -:  275:    }
        -:  276:
        -:  277:  //reduce number of actions
    #####:  278:  state->numActions--;
        -:  279:
        -:  280:  //update coins (Treasure cards may be added with card draws)
    #####:  281:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:  return 0;
        -:  284:}
        -:  285:
    #####:  286:int buyCard(int supplyPos, struct gameState *state) {
        -:  287:  int who;
        -:  288:  if (DEBUG){
        -:  289:    printf("Entering buyCard...\n");
        -:  290:  }
        -:  291:
        -:  292:  // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:  who = state->whoseTurn;
        -:  295:
    #####:  296:  if (state->numBuys < 1){
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have any buys left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (supplyCount(supplyPos, state) <1){
        -:  301:    if (DEBUG)
        -:  302:      printf("There are not any of that type of card left\n");
    #####:  303:    return -1;
    #####:  304:  } else if (state->coins < getCost(supplyPos)){
        -:  305:    if (DEBUG)
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  } else {
    #####:  309:    state->phase=1;
        -:  310:    //state->supplyCount[supplyPos]--;
    #####:  311:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  312:
    #####:  313:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  314:    state->numBuys--;
        -:  315:    if (DEBUG)
        -:  316:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  317:  }
        -:  318:
        -:  319:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  320:  //state->discardCount[who]++;
        -:  321:
    #####:  322:  return 0;
        -:  323:}
        -:  324:
    #####:  325:int numHandCards(struct gameState *state) {
    #####:  326:  return state->handCount[ whoseTurn(state) ];
        -:  327:}
        -:  328:
    #####:  329:int handCard(int handPos, struct gameState *state) {
    #####:  330:  int currentPlayer = whoseTurn(state);
    #####:  331:  return state->hand[currentPlayer][handPos];
        -:  332:}
        -:  333:
    #####:  334:int supplyCount(int card, struct gameState *state) {
    #####:  335:  return state->supplyCount[card];
        -:  336:}
        -:  337:
    #####:  338:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  339:  int i;
    #####:  340:  int count = 0;
        -:  341:
    #####:  342:  for (i = 0; i < state->deckCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->deck[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->handCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->hand[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  for (i = 0; i < state->discardCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->discard[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  return count;
        -:  358:}
        -:  359:
    #####:  360:int whoseTurn(struct gameState *state) {
    #####:  361:  return state->whoseTurn;
        -:  362:}
        -:  363:
    #####:  364:int endTurn(struct gameState *state) {
        -:  365:  int k;
        -:  366:  int i;
    #####:  367:  int currentPlayer = whoseTurn(state);
        -:  368:
        -:  369:  //Discard hand
    #####:  370:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  371:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  372:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  373:  }
    #####:  374:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  375:
        -:  376:  //Code for determining the player
    #####:  377:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  378:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  379:  }
        -:  380:  else{
    #####:  381:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:  }
        -:  383:
    #####:  384:  state->outpostPlayed = 0;
    #####:  385:  state->phase = 0;
    #####:  386:  state->numActions = 1;
    #####:  387:  state->coins = 0;
    #####:  388:  state->numBuys = 1;
    #####:  389:  state->playedCardCount = 0;
    #####:  390:  state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:  //int k; move to top
        -:  393:  //Next player draws hand
    #####:  394:  for (k = 0; k < 5; k++){
    #####:  395:    drawCard(state->whoseTurn, state);//Draw a card
        -:  396:  }
        -:  397:
        -:  398:  //Update money
    #####:  399:  updateCoins(state->whoseTurn, state , 0);
        -:  400:
    #####:  401:  return 0;
        -:  402:}
        -:  403:
    #####:  404:int isGameOver(struct gameState *state) {
        -:  405:  int i;
        -:  406:  int j;
        -:  407:
        -:  408:  //if stack of Province cards is empty, the game ends
    #####:  409:  if (state->supplyCount[province] == 0)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  //if three supply pile are at 0, the game ends
    #####:  415:  j = 0;
    #####:  416:  for (i = 0; i < 25; i++)
        -:  417:    {
    #####:  418:      if (state->supplyCount[i] == 0)
        -:  419:	{
    #####:  420:	  j++;
        -:  421:	}
        -:  422:    }
    #####:  423:  if ( j >= 3)
        -:  424:    {
    #####:  425:      return 1;
        -:  426:    }
        -:  427:
    #####:  428:  return 0;
        -:  429:}
        -:  430:
    #####:  431:int scoreFor (int player, struct gameState *state) {
        -:  432:
        -:  433:  int i;
    #####:  434:  int score = 0;
        -:  435:  //score from hand
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from discard
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        -:  457:  //score from deck
    #####:  458:  for (i = 0; i < state->discardCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  461:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  463:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  464:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  465:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  466:    }
        -:  467:
    #####:  468:  return score;
        -:  469:}
        -:  470:
    #####:  471:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  472:  int i;
        -:  473:  int j;
        -:  474:  int highScore;
        -:  475:  int currentPlayer;
        -:  476:
        -:  477:  //get score for each player
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      //set unused player scores to -9999
    #####:  481:      if (i >= state->numPlayers)
        -:  482:	{
    #####:  483:	  players[i] = -9999;
        -:  484:	}
        -:  485:      else
        -:  486:	{
    #####:  487:	  players[i] = scoreFor (i, state);
        -:  488:	}
        -:  489:    }
        -:  490:
        -:  491:  //find highest score
    #####:  492:  j = 0;
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if (players[i] > players[j])
        -:  496:	{
    #####:  497:	  j = i;
        -:  498:	}
        -:  499:    }
    #####:  500:  highScore = players[j];
        -:  501:
        -:  502:  //add 1 to players who had less turns
    #####:  503:  currentPlayer = whoseTurn(state);
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] == highScore && i > currentPlayer )
        -:  507:	{
    #####:  508:	  players[i]++;
        -:  509:	}
        -:  510:    }
        -:  511:
        -:  512:  //find new highest score
    #####:  513:  j = 0;
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] > players[j] )
        -:  517:	{
    #####:  518:	  j = i;
        -:  519:	}
        -:  520:    }
    #####:  521:  highScore = players[j];
        -:  522:
        -:  523:  //set winners in array to 1 and rest to 0
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] == highScore )
        -:  527:	{
    #####:  528:	  players[i] = 1;
        -:  529:	}
        -:  530:      else
        -:  531:	{
    #####:  532:	  players[i] = 0;
        -:  533:	}
        -:  534:    }
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
       10:  539:int drawCard(int player, struct gameState *state)
        -:  540:{	int count;
        -:  541:  int deckCounter;
       10:  542:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
    #####:  547:    for (i = 0; i < state->discardCount[player];i++){
    #####:  548:      state->deck[player][i] = state->discard[player][i];
    #####:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
    #####:  552:    state->deckCount[player] = state->discardCount[player];
    #####:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
    #####:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
    #####:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
    #####:  565:    count = state->handCount[player];//Get current player's hand count
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
    #####:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
    #####:  573:    if (deckCounter == 0)
    #####:  574:      return -1;
        -:  575:
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
        -:  581:  else{
       10:  582:    int count = state->handCount[player];//Get current hand count for player
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
       10:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  590:    state->deckCount[player]--;
       10:  591:    state->handCount[player]++;//Increment hand count
        -:  592:  }
        -:  593:
       10:  594:  return 0;
        -:  595:}
        -:  596:
    #####:  597:int getCost(int cardNumber)
        -:  598:{
    #####:  599:  switch( cardNumber )
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
        -:  603:    case estate:
    #####:  604:      return 2;
        -:  605:    case duchy:
    #####:  606:      return 5;
        -:  607:    case province:
    #####:  608:      return 8;
        -:  609:    case copper:
    #####:  610:      return 0;
        -:  611:    case silver:
    #####:  612:      return 3;
        -:  613:    case gold:
    #####:  614:      return 6;
        -:  615:    case adventurer:
    #####:  616:      return 6;
        -:  617:    case council_room:
    #####:  618:      return 5;
        -:  619:    case feast:
    #####:  620:      return 4;
        -:  621:    case gardens:
    #####:  622:      return 4;
        -:  623:    case mine:
    #####:  624:      return 5;
        -:  625:    case remodel:
    #####:  626:      return 4;
        -:  627:    case smithy:
    #####:  628:      return 4;
        -:  629:    case village:
    #####:  630:      return 3;
        -:  631:    case baron:
    #####:  632:      return 4;
        -:  633:    case great_hall:
    #####:  634:      return 3;
        -:  635:    case minion:
    #####:  636:      return 5;
        -:  637:    case steward:
    #####:  638:      return 3;
        -:  639:    case tribute:
    #####:  640:      return 5;
        -:  641:    case ambassador:
    #####:  642:      return 3;
        -:  643:    case cutpurse:
    #####:  644:      return 4;
        -:  645:    case embargo:
    #####:  646:      return 2;
        -:  647:    case outpost:
    #####:  648:      return 5;
        -:  649:    case salvager:
    #####:  650:      return 4;
        -:  651:    case sea_hag:
    #####:  652:      return 4;
        -:  653:    case treasure_map:
    #####:  654:      return 4;
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
        -:  658:}
        -:  659:
    #####:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int x;
        -:  665:  int index;
    #####:  666:  int currentPlayer = whoseTurn(state);
    #####:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    #####:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    #####:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:
        -:  675:
        -:  676:  //uses switch to select card and perform actions
    #####:  677:  switch( card ) {
        -:  678:
        -:  679:    case adventurer:
    #####:  680:      adventurer_refactor(state, currentPlayer, temphand);
    #####:  681:      return 0;
        -:  682:
        -:  683:    case council_room:
        -:  684:      //+4 Cards
    #####:  685:      for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:      //+1 Buy
    #####:  691:      state->numBuys++;
        -:  692:
        -:  693:      //Each other player draws a card
    #####:  694:      for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:	  if ( i != currentPlayer )
        -:  697:	    {
    #####:  698:	      drawCard(i, state);
        -:  699:	    }
        -:  700:	}
        -:  701:
        -:  702:      //put played card in played card pile
    #####:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:      return 0;
        -:  706:
        -:  707:    case feast:
        -:  708:      //gain card with cost up to 5
        -:  709:      //Backup hand
    #####:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
    #####:  717:      updateCoins(currentPlayer, state, 5);
    #####:  718:      x = 1;//Condition to loop on
    #####:  719:      while( x == 1) {//Buy one card
    #####:  720:	if (supplyCount(choice1, state) <= 0){
        -:  721:	  if (DEBUG)
        -:  722:	    printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:	  }
        -:  727:	}
    #####:  728:	else if (state->coins < getCost(choice1)){
    #####:  729:	  printf("That card is too expensive!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:	  }
        -:  734:	}
        -:  735:	else{
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
    #####:  741:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  742:	  x = 0;//No more buying cards
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
        -:  748:	}
        -:  749:      }
        -:  750:
        -:  751:      //Reset Hand
    #####:  752:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  753:	state->hand[currentPlayer][i] = temphand[i];
    #####:  754:	temphand[i] = -1;
        -:  755:      }
        -:  756:      //Reset Hand
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case gardens:
    #####:  761:      return -1;
        -:  762:
        -:  763:    case mine:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if (choice2 > treasure_map || choice2 < curse)
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 2, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case remodel:
    #####:  799:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      gainCard(choice2, state, 0, currentPlayer);
        -:  807:
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
        -:  810:
        -:  811:      //discard trashed card
    #####:  812:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:	{
    #####:  814:	  if (state->hand[currentPlayer][i] == j)
        -:  815:	    {
    #####:  816:	      discardCard(i, currentPlayer, state, 0);
    #####:  817:	      break;
        -:  818:	    }
        -:  819:	}
        -:  820:
        -:  821:
    #####:  822:      return 0;
        -:  823:
        -:  824:    case smithy:
    #####:  825:      smithy_refactor(state, currentPlayer, handPos);
    #####:  826:      return 0;
        -:  827:
        -:  828:    case village:
        -:  829:      //+1 Card
    #####:  830:      drawCard(currentPlayer, state);
        -:  831:
        -:  832:      //+2 Actions
    #####:  833:      state->numActions = state->numActions + 2;
        -:  834:
        -:  835:      //discard played card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
    #####:  837:      return 0;
        -:  838:
        -:  839:    case baron:
    #####:  840:      baron_refactor(state, currentPlayer, choice1);
    #####:  841:      return 0;
        -:  842:
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:
        -:  854:    case minion:
    #####:  855:      minion_refactor(state, currentPlayer, handPos, choice1, choice2);
    #####:  856:      return 0;
        -:  857:
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
    #####:  863:	  drawCard(currentPlayer, state);
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
        -:  875:	}
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  909:	}
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }
        -:  917:
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  930:	  drawCard(currentPlayer, state);
    #####:  931:	  drawCard(currentPlayer, state);
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:
    #####:  938:      return 0;
        -:  939:
        -:  940:    case ambassador:
    #####:  941:      j = 0;		//used to check if player has enough cards to discard
        -:  942:
    #####:  943:      if (choice2 > 2 || choice2 < 0)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice1 == handPos)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  956:	    {
    #####:  957:	      j++;
        -:  958:	    }
        -:  959:	}
    #####:  960:      if (j < choice2)
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      if (DEBUG)
        -:  966:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  967:
        -:  968:      //increase supply count for choosen card by amount being discarded
    #####:  969:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  970:
        -:  971:      //each other player gains a copy of revealed card
    #####:  972:      for (i = 0; i < state->numPlayers; i++)
        -:  973:	{
    #####:  974:	  if (i != currentPlayer)
        -:  975:	    {
    #####:  976:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:      //trash copies of cards returned to supply
    #####:  984:      for (j = 0; j < choice2; j++)
        -:  985:	{
    #####:  986:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:	    {
    #####:  988:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  989:		{
    #####:  990:		  discardCard(i, currentPlayer, state, 1);
    #####:  991:		  break;
        -:  992:		}
        -:  993:	    }
        -:  994:	}
        -:  995:
    #####:  996:      return 0;
        -:  997:
        -:  998:    case cutpurse:
    #####:  999:      cutpurse_refactor(state, currentPlayer, handPos);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:
        -: 1003:    case embargo:
        -: 1004:      //+2 Coins
    #####: 1005:      state->coins = state->coins + 2;
        -: 1006:
        -: 1007:      //see if selected pile is in play
    #####: 1008:      if ( state->supplyCount[choice1] == -1 )
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      //add embargo token to selected supply pile
    #####: 1014:      state->embargoTokens[choice1]++;
        -: 1015:
        -: 1016:      //trash card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case outpost:
        -: 1021:      //set outpost flag
    #####: 1022:      state->outpostPlayed++;
        -: 1023:
        -: 1024:      //discard card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case salvager:
        -: 1029:      //+1 buy
    #####: 1030:      state->numBuys++;
        -: 1031:
    #####: 1032:      if (choice1)
        -: 1033:	{
        -: 1034:	  //gain coins equal to trashed card
    #####: 1035:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1036:	  //trash card
    #####: 1037:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case sea_hag:
    #####: 1045:      for (i = 0; i < state->numPlayers; i++){
    #####: 1046:	if (i != currentPlayer){
    #####: 1047:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1048:	  state->discardCount[i]++;
    #####: 1049:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1050:	}
        -: 1051:      }
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:    case treasure_map:
        -: 1055:      //search hand for another treasure_map
    #####: 1056:      index = -1;
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:	{
    #####: 1059:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1060:	    {
    #####: 1061:	      index = i;
    #####: 1062:	      break;
        -: 1063:	    }
        -: 1064:	}
    #####: 1065:      if (index > -1)
        -: 1066:	{
        -: 1067:	  //trash both treasure cards
    #####: 1068:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1069:	  discardCard(index, currentPlayer, state, 1);
        -: 1070:
        -: 1071:	  //gain 4 Gold cards
    #####: 1072:	  for (i = 0; i < 4; i++)
        -: 1073:	    {
    #####: 1074:	      gainCard(gold, state, 1, currentPlayer);
        -: 1075:	    }
        -: 1076:
        -: 1077:	  //return success
    #####: 1078:	  return 1;
        -: 1079:	}
        -: 1080:
        -: 1081:      //no second treasure_map found in hand
    #####: 1082:      return -1;
        -: 1083:    }
        -: 1084:
    #####: 1085:  return -1;
        -: 1086:}
        -: 1087:
        -: 1088:/*******************************************************************************
        -: 1089:* Description: adventurer_refactor function
        -: 1090:*******************************************************************************/
        -: 1091:
    #####: 1092:void adventurer_refactor(struct gameState *state, int currentPlayer, int *temphand) {
    #####: 1093:  int drawntreasure = 0,
        -: 1094:      cardDrawn,
    #####: 1095:      z = 0;
        -: 1096:
    #####: 1097:  while(drawntreasure > 2) {
    #####: 1098:    if(state->deckCount[currentPlayer] < 1) {                                   //if the deck is empty we need to shuffle discard and add to deck
    #####: 1099:      shuffle(currentPlayer, state);
        -: 1100:    }
    #####: 1101:    drawCard(currentPlayer, state);
    #####: 1102:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];  //top card of hand is most recently drawn card.
    #####: 1103:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1104:      drawntreasure++;
        -: 1105:    } else {
    #####: 1106:      temphand[z]=cardDrawn;
    #####: 1107:      state->handCount[currentPlayer]--;                                        //this should just remove the top card (the most recently drawn one).
    #####: 1108:      z++;
        -: 1109:    }
        -: 1110:  }
    #####: 1111:  while(z - 1 >= 0) {
    #####: 1112:    state->discard[currentPlayer][state->discardCount[currentPlayer] ++]
    #####: 1113:    = temphand[z - 1];                                                          // discard all cards in play that have been drawn
    #####: 1114:    z = z - 1;
        -: 1115:  }
    #####: 1116:}
        -: 1117:
        -: 1118:/*******************************************************************************
        -: 1119:* Description: smithy_refactor function
        -: 1120:*******************************************************************************/
        -: 1121:
    #####: 1122:void smithy_refactor(struct gameState *state, int currentPlayer, int handPos) {
        -: 1123:  //+3 Cards
    #####: 1124:  int i = 0;
    #####: 1125:  for (i = 0; i < 10; i++) {
    #####: 1126:    drawCard(currentPlayer, state);
        -: 1127:  }
        -: 1128:  //discard card from hand
    #####: 1129:  discardCard(handPos, currentPlayer, state, 0);
        -: 1130:  // return 0;
    #####: 1131:}
        -: 1132:
        -: 1133:/*******************************************************************************
        -: 1134:* Description: baron_refactor function
        -: 1135:*******************************************************************************/
        -: 1136:
    #####: 1137:void baron_refactor(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1138:  state->numBuys ++;                                                            //Increase buys by 1!
    #####: 1139:  if (choice1 > 0) {                                                            //Boolean true or going to discard an estate
    #####: 1140:    int p = 0;                                                                  //Iterator for hand!
    #####: 1141:    int card_not_discarded = 1;                                                 //Flag for discard set!
    #####: 1142:    while(card_not_discarded) {
    #####: 1143:      if (state->hand[currentPlayer][p] == estate) {                            //Found an estate card!
    #####: 1144:        state->coins += 4;                                                      //Add 4 coins to the amount of coins
    #####: 1145:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1146:        state->discardCount[currentPlayer] ++;
    #####: 1147:        for (;p < state->handCount[currentPlayer]; p ++) {
    #####: 1148:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1149:        }
    #####: 1150:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1151:        state->handCount[currentPlayer]--;
    #####: 1152:        card_not_discarded = 0;                                                 //Exit the loop
    #####: 1153:      } else if (p > state->handCount[currentPlayer]) {
        -: 1154:        if(DEBUG) {
        -: 1155:          printf("No estate cards in your hand, invalid choice\n");
        -: 1156:          printf("Must gain an estate if there are any\n");
        -: 1157:        }
    #####: 1158:        if (supplyCount(estate, state) > 0) {
    #####: 1159:          gainCard(estate, state, 0, currentPlayer);
    #####: 1160:          state->supplyCount[estate]--;                                         //Decrement estates
    #####: 1161:          if (supplyCount(estate, state) == 0) {
    #####: 1162:            isGameOver(state);
        -: 1163:          }
        -: 1164:        }
    #####: 1165:        card_not_discarded = 0;                                                 //Exit the loop
        -: 1166:      } else {
    #####: 1167:        p ++;                                                                   //Next card
        -: 1168:      }
        -: 1169:    }
        -: 1170:  } else {
    #####: 1171:    if (supplyCount(estate, state) > 0) {
    #####: 1172:      gainCard(estate, state, 0, currentPlayer);                                //Gain an estate
    #####: 1173:      state->supplyCount[estate]--;                                             //Decrement Estates
    #####: 1174:      if (supplyCount(estate, state) == 0){
    #####: 1175:        isGameOver(state);
        -: 1176:      }
        -: 1177:    }
        -: 1178:  }
    #####: 1179:}
        -: 1180:
        -: 1181:/*******************************************************************************
        -: 1182:* Description: minion_refactor function
        -: 1183:*******************************************************************************/
        -: 1184:
    #####: 1185:void minion_refactor(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
    #####: 1186:  int i = 0,
    #####: 1187:      j = 0;
        -: 1188:  //+1 action
    #####: 1189:  state->numActions++;
        -: 1190:
        -: 1191:  //discard card from hand
    #####: 1192:  discardCard(handPos, currentPlayer, state, 0);
        -: 1193:  //+2 coins
    #####: 1194:  if (choice2) {
    #####: 1195:    state->coins = state->coins + 2;
    #####: 1196:  } else if (choice1) {                                                         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1197:    //discard hand
    #####: 1198:    while(numHandCards(state) > 0) {
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:    }
        -: 1201:    //draw 4
    #####: 1202:    for (i = 0; i < 4; i++) {
    #####: 1203:      drawCard(currentPlayer, state);
        -: 1204:    }
        -: 1205:    //other players discard hand and redraw if hand size > 4
    #####: 1206:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:      if (i != currentPlayer) {
    #####: 1208:        if ( state->handCount[i] > 4 ) {
        -: 1209:          //discard hand
    #####: 1210:          while( state->handCount[i] > 0 ) {
    #####: 1211:            discardCard(handPos, i, state, 0);
        -: 1212:          }
        -: 1213:          //draw 4
    #####: 1214:          for (j = 0; j < 4; j++) {
    #####: 1215:            drawCard(i, state);
        -: 1216:          }
        -: 1217:        }
        -: 1218:      }
        -: 1219:    }
        -: 1220:  }
    #####: 1221:}
        -: 1222:
        -: 1223:/*******************************************************************************
        -: 1224:* Description: cutpurse_refactor function
        -: 1225:*******************************************************************************/
        -: 1226:
    #####: 1227:void cutpurse_refactor(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1228:  int i = 0,
    #####: 1229:      j = 0,
    #####: 1230:      k = 0;
    #####: 1231:  updateCoins(currentPlayer, state, 2);
    #####: 1232:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1233:    if (j != currentPlayer) {
    #####: 1234:      for (j = 0; j < state->handCount[i]; j++) {
    #####: 1235:        if (state->hand[i][j] == copper) {
    #####: 1236:          discardCard(j, i, state, 0);
    #####: 1237:          break;
        -: 1238:        }
    #####: 1239:        if (j == state->handCount[i]) {
    #####: 1240:          for (k = 0; k < state->handCount[i]; k++) {
        -: 1241:            if (DEBUG) {
        -: 1242:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:            }
        -: 1244:          }
    #####: 1245:          break;
        -: 1246:        }
        -: 1247:      }
        -: 1248:    }
        -: 1249:  }
        -: 1250:  //discard played card from hand
    #####: 1251:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:}
        -: 1253:
    #####: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:  //if card is not trashed, added to Played pile
    #####: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:  //set played card to -1
    #####: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:  //remove card from player's hand
    #####: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    #####: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    #####: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    #####: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
    #####: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
        8: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:
        -: 1333:  //reset coin count
        8: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
       33: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
       25: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
       13: 1341:	  state->coins += 1;
        -: 1342:	}
       12: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
        5: 1345:	  state->coins += 2;
        -: 1346:	}
        7: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
        5: 1349:	  state->coins += 3;
        -: 1350:	}
        -: 1351:    }
        -: 1352:
        -: 1353:  //add bonus
        8: 1354:  state->coins += bonus;
        -: 1355:
        8: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
unittest2.c:
-------------------- Testing: isGameOver() -------------------------

Province cards empty
Test: PASSED

Three supply piles empty
Test: PASSED

Province cards not empty

Three supply piles not empty
Test: PASSED

TEST SUCCESSFULLY COMPLETED

File 'unittest2.c'
Lines executed:87.88% of 33
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:17.37% of 570
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** PREPROCESSOR DIRECTIVES
        -:    3:*******************************************************************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:/*******************************************************************************
        -:   13:** FUNCTION DECLARATIONS
        -:   14:*******************************************************************************/
        -:   15:
        -:   16:void adventurer_refactor(struct gameState*, int, int*);                         // Declare function for adventurer card functionality
        -:   17:void smithy_refactor(struct gameState*, int, int);                              // Declare function for smithy card functionality
        -:   18:void baron_refactor(struct gameState*, int, int);                               // Declare function for baron card functionality
        -:   19:void minion_refactor(struct gameState*, int, int, int, int);                    // Declare function for minion card functionality
        -:   20:void cutpurse_refactor(struct gameState*, int, int);                            // Declare function for cutpurse card functionality
        -:   21:
       30:   22:int compare(const void* a, const void* b) {
       30:   23:  if (*(int*)a > *(int*)b)
    #####:   24:    return 1;
       30:   25:  if (*(int*)a < *(int*)b)
        8:   26:    return -1;
       22:   27:  return 0;
        -:   28:}
        -:   29:
    #####:   30:struct gameState* newGame() {
    #####:   31:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   32:  return g;
        -:   33:}
        -:   34:
    #####:   35:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   36:		  int k8, int k9, int k10) {
    #####:   37:  int* k = malloc(10 * sizeof(int));
    #####:   38:  k[0] = k1;
    #####:   39:  k[1] = k2;
    #####:   40:  k[2] = k3;
    #####:   41:  k[3] = k4;
    #####:   42:  k[4] = k5;
    #####:   43:  k[5] = k6;
    #####:   44:  k[6] = k7;
    #####:   45:  k[7] = k8;
    #####:   46:  k[8] = k9;
    #####:   47:  k[9] = k10;
    #####:   48:  return k;
        -:   49:}
        -:   50:
        1:   51:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        1:   58:  SelectStream(1);
        1:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        1:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        1:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:  //check selected kingdom cards are different
       11:   71:  for (i = 0; i < 10; i++)
        -:   72:    {
      110:   73:      for (j = 0; j < 10; j++)
        -:   74:        {
      100:   75:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:	    {
    #####:   77:	      return -1;
        -:   78:	    }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:
        -:   83:  //initialize supply
        -:   84:  ///////////////////////////////
        -:   85:
        -:   86:  //set number of Curse cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[curse] = 10;
        -:   90:    }
    #####:   91:  else if (numPlayers == 3)
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 20;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 30;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Victory cards
        1:  101:  if (numPlayers == 2)
        -:  102:    {
        1:  103:      state->supplyCount[estate] = 8;
        1:  104:      state->supplyCount[duchy] = 8;
        1:  105:      state->supplyCount[province] = 8;
        -:  106:    }
        -:  107:  else
        -:  108:    {
    #####:  109:      state->supplyCount[estate] = 12;
    #####:  110:      state->supplyCount[duchy] = 12;
    #####:  111:      state->supplyCount[province] = 12;
        -:  112:    }
        -:  113:
        -:  114:  //set number of Treasure cards
        1:  115:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  116:  state->supplyCount[silver] = 40;
        1:  117:  state->supplyCount[gold] = 30;
        -:  118:
        -:  119:  //set number of Kingdom cards
       21:  120:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  121:    {
      165:  122:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  123:	{
      155:  124:	  if (kingdomCards[j] == i)
        -:  125:	    {
        -:  126:	      //check if card is a 'Victory' Kingdom card
       10:  127:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:		{
        4:  129:		  if (numPlayers == 2){
        2:  130:		    state->supplyCount[i] = 8;
        -:  131:		  }
    #####:  132:		  else{ state->supplyCount[i] = 12; }
        -:  133:		}
        -:  134:	      else
        -:  135:		{
        8:  136:		  state->supplyCount[i] = 10;
        -:  137:		}
       10:  138:	      break;
        -:  139:	    }
        -:  140:	  else    //card is not in the set choosen for the game
        -:  141:	    {
      145:  142:	      state->supplyCount[i] = -1;
        -:  143:	    }
        -:  144:	}
        -:  145:
        -:  146:    }
        -:  147:
        -:  148:  ////////////////////////
        -:  149:  //supply intilization complete
        -:  150:
        -:  151:  //set player decks
        3:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
        2:  154:      state->deckCount[i] = 0;
        8:  155:      for (j = 0; j < 3; j++)
        -:  156:	{
        6:  157:	  state->deck[i][j] = estate;
        6:  158:	  state->deckCount[i]++;
        -:  159:	}
       16:  160:      for (j = 3; j < 10; j++)
        -:  161:	{
       14:  162:	  state->deck[i][j] = copper;
       14:  163:	  state->deckCount[i]++;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //shuffle player decks
        3:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        2:  170:      if ( shuffle(i, state) < 0 )
        -:  171:	{
    #####:  172:	  return -1;
        -:  173:	}
        -:  174:    }
        -:  175:
        -:  176:  //draw player hands
        3:  177:  for (i = 0; i < numPlayers; i++)
        -:  178:    {
        -:  179:      //initialize hand size to zero
        2:  180:      state->handCount[i] = 0;
        2:  181:      state->discardCount[i] = 0;
        -:  182:      //draw 5 cards
        -:  183:      // for (j = 0; j < 5; j++)
        -:  184:      //	{
        -:  185:      //	  drawCard(i, state);
        -:  186:      //	}
        -:  187:    }
        -:  188:
        -:  189:  //set embargo tokens to 0 for all supply piles
       28:  190:  for (i = 0; i <= treasure_map; i++)
        -:  191:    {
       27:  192:      state->embargoTokens[i] = 0;
        -:  193:    }
        -:  194:
        -:  195:  //initialize first player's turn
        1:  196:  state->outpostPlayed = 0;
        1:  197:  state->phase = 0;
        1:  198:  state->numActions = 1;
        1:  199:  state->numBuys = 1;
        1:  200:  state->playedCardCount = 0;
        1:  201:  state->whoseTurn = 0;
        1:  202:  state->handCount[state->whoseTurn] = 0;
        -:  203:  //int it; move to top
        -:  204:
        -:  205:  //Moved draw cards to here, only drawing at the start of a turn
        6:  206:  for (it = 0; it < 5; it++){
        5:  207:    drawCard(state->whoseTurn, state);
        -:  208:  }
        -:  209:
        1:  210:  updateCoins(state->whoseTurn, state, 0);
        -:  211:
        1:  212:  return 0;
        -:  213:}
        -:  214:
        2:  215:int shuffle(int player, struct gameState *state) {
        -:  216:
        -:  217:
        -:  218:  int newDeck[MAX_DECK];
        2:  219:  int newDeckPos = 0;
        -:  220:  int card;
        -:  221:  int i;
        -:  222:
        2:  223:  if (state->deckCount[player] < 1)
    #####:  224:    return -1;
        2:  225:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  226:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  227:
       24:  228:  while (state->deckCount[player] > 0) {
       20:  229:    card = floor(Random() * state->deckCount[player]);
       20:  230:    newDeck[newDeckPos] = state->deck[player][card];
       20:  231:    newDeckPos++;
       76:  232:    for (i = card; i < state->deckCount[player]-1; i++) {
       56:  233:      state->deck[player][i] = state->deck[player][i+1];
        -:  234:    }
       20:  235:    state->deckCount[player]--;
        -:  236:  }
       22:  237:  for (i = 0; i < newDeckPos; i++) {
       20:  238:    state->deck[player][i] = newDeck[i];
       20:  239:    state->deckCount[player]++;
        -:  240:  }
        -:  241:
        2:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:  int card;
    #####:  248:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  249:
        -:  250:  //check if it is the right phase
    #####:  251:  if (state->phase != 0)
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //check if player has enough actions
    #####:  257:  if ( state->numActions < 1 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //get card played
    #####:  263:  card = handCard(handPos, state);
        -:  264:
        -:  265:  //check if selected card is an action
    #####:  266:  if ( card < adventurer || card > treasure_map )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //play card
    #####:  272:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  273:    {
    #####:  274:      return -1;
        -:  275:    }
        -:  276:
        -:  277:  //reduce number of actions
    #####:  278:  state->numActions--;
        -:  279:
        -:  280:  //update coins (Treasure cards may be added with card draws)
    #####:  281:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:  return 0;
        -:  284:}
        -:  285:
    #####:  286:int buyCard(int supplyPos, struct gameState *state) {
        -:  287:  int who;
        -:  288:  if (DEBUG){
        -:  289:    printf("Entering buyCard...\n");
        -:  290:  }
        -:  291:
        -:  292:  // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:  who = state->whoseTurn;
        -:  295:
    #####:  296:  if (state->numBuys < 1){
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have any buys left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (supplyCount(supplyPos, state) <1){
        -:  301:    if (DEBUG)
        -:  302:      printf("There are not any of that type of card left\n");
    #####:  303:    return -1;
    #####:  304:  } else if (state->coins < getCost(supplyPos)){
        -:  305:    if (DEBUG)
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  } else {
    #####:  309:    state->phase=1;
        -:  310:    //state->supplyCount[supplyPos]--;
    #####:  311:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  312:
    #####:  313:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  314:    state->numBuys--;
        -:  315:    if (DEBUG)
        -:  316:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  317:  }
        -:  318:
        -:  319:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  320:  //state->discardCount[who]++;
        -:  321:
    #####:  322:  return 0;
        -:  323:}
        -:  324:
    #####:  325:int numHandCards(struct gameState *state) {
    #####:  326:  return state->handCount[ whoseTurn(state) ];
        -:  327:}
        -:  328:
    #####:  329:int handCard(int handPos, struct gameState *state) {
    #####:  330:  int currentPlayer = whoseTurn(state);
    #####:  331:  return state->hand[currentPlayer][handPos];
        -:  332:}
        -:  333:
    #####:  334:int supplyCount(int card, struct gameState *state) {
    #####:  335:  return state->supplyCount[card];
        -:  336:}
        -:  337:
    #####:  338:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  339:  int i;
    #####:  340:  int count = 0;
        -:  341:
    #####:  342:  for (i = 0; i < state->deckCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->deck[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->handCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->hand[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  for (i = 0; i < state->discardCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->discard[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  return count;
        -:  358:}
        -:  359:
    #####:  360:int whoseTurn(struct gameState *state) {
    #####:  361:  return state->whoseTurn;
        -:  362:}
        -:  363:
    #####:  364:int endTurn(struct gameState *state) {
        -:  365:  int k;
        -:  366:  int i;
    #####:  367:  int currentPlayer = whoseTurn(state);
        -:  368:
        -:  369:  //Discard hand
    #####:  370:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  371:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  372:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  373:  }
    #####:  374:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  375:
        -:  376:  //Code for determining the player
    #####:  377:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  378:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  379:  }
        -:  380:  else{
    #####:  381:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:  }
        -:  383:
    #####:  384:  state->outpostPlayed = 0;
    #####:  385:  state->phase = 0;
    #####:  386:  state->numActions = 1;
    #####:  387:  state->coins = 0;
    #####:  388:  state->numBuys = 1;
    #####:  389:  state->playedCardCount = 0;
    #####:  390:  state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:  //int k; move to top
        -:  393:  //Next player draws hand
    #####:  394:  for (k = 0; k < 5; k++){
    #####:  395:    drawCard(state->whoseTurn, state);//Draw a card
        -:  396:  }
        -:  397:
        -:  398:  //Update money
    #####:  399:  updateCoins(state->whoseTurn, state , 0);
        -:  400:
    #####:  401:  return 0;
        -:  402:}
        -:  403:
        3:  404:int isGameOver(struct gameState *state) {
        -:  405:  int i;
        -:  406:  int j;
        -:  407:
        -:  408:  //if stack of Province cards is empty, the game ends
        3:  409:  if (state->supplyCount[province] == 0)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  //if three supply pile are at 0, the game ends
        2:  415:  j = 0;
       52:  416:  for (i = 0; i < 25; i++)
        -:  417:    {
       50:  418:      if (state->supplyCount[i] == 0)
        -:  419:	{
        3:  420:	  j++;
        -:  421:	}
        -:  422:    }
        2:  423:  if ( j >= 3)
        -:  424:    {
        1:  425:      return 1;
        -:  426:    }
        -:  427:
        1:  428:  return 0;
        -:  429:}
        -:  430:
    #####:  431:int scoreFor (int player, struct gameState *state) {
        -:  432:
        -:  433:  int i;
    #####:  434:  int score = 0;
        -:  435:  //score from hand
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from discard
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        -:  457:  //score from deck
    #####:  458:  for (i = 0; i < state->discardCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  461:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  463:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  464:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  465:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  466:    }
        -:  467:
    #####:  468:  return score;
        -:  469:}
        -:  470:
    #####:  471:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  472:  int i;
        -:  473:  int j;
        -:  474:  int highScore;
        -:  475:  int currentPlayer;
        -:  476:
        -:  477:  //get score for each player
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      //set unused player scores to -9999
    #####:  481:      if (i >= state->numPlayers)
        -:  482:	{
    #####:  483:	  players[i] = -9999;
        -:  484:	}
        -:  485:      else
        -:  486:	{
    #####:  487:	  players[i] = scoreFor (i, state);
        -:  488:	}
        -:  489:    }
        -:  490:
        -:  491:  //find highest score
    #####:  492:  j = 0;
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if (players[i] > players[j])
        -:  496:	{
    #####:  497:	  j = i;
        -:  498:	}
        -:  499:    }
    #####:  500:  highScore = players[j];
        -:  501:
        -:  502:  //add 1 to players who had less turns
    #####:  503:  currentPlayer = whoseTurn(state);
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] == highScore && i > currentPlayer )
        -:  507:	{
    #####:  508:	  players[i]++;
        -:  509:	}
        -:  510:    }
        -:  511:
        -:  512:  //find new highest score
    #####:  513:  j = 0;
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] > players[j] )
        -:  517:	{
    #####:  518:	  j = i;
        -:  519:	}
        -:  520:    }
    #####:  521:  highScore = players[j];
        -:  522:
        -:  523:  //set winners in array to 1 and rest to 0
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] == highScore )
        -:  527:	{
    #####:  528:	  players[i] = 1;
        -:  529:	}
        -:  530:      else
        -:  531:	{
    #####:  532:	  players[i] = 0;
        -:  533:	}
        -:  534:    }
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
        5:  539:int drawCard(int player, struct gameState *state)
        -:  540:{	int count;
        -:  541:  int deckCounter;
        5:  542:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
    #####:  547:    for (i = 0; i < state->discardCount[player];i++){
    #####:  548:      state->deck[player][i] = state->discard[player][i];
    #####:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
    #####:  552:    state->deckCount[player] = state->discardCount[player];
    #####:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
    #####:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
    #####:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
    #####:  565:    count = state->handCount[player];//Get current player's hand count
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
    #####:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
    #####:  573:    if (deckCounter == 0)
    #####:  574:      return -1;
        -:  575:
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
        -:  581:  else{
        5:  582:    int count = state->handCount[player];//Get current hand count for player
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
        5:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  590:    state->deckCount[player]--;
        5:  591:    state->handCount[player]++;//Increment hand count
        -:  592:  }
        -:  593:
        5:  594:  return 0;
        -:  595:}
        -:  596:
    #####:  597:int getCost(int cardNumber)
        -:  598:{
    #####:  599:  switch( cardNumber )
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
        -:  603:    case estate:
    #####:  604:      return 2;
        -:  605:    case duchy:
    #####:  606:      return 5;
        -:  607:    case province:
    #####:  608:      return 8;
        -:  609:    case copper:
    #####:  610:      return 0;
        -:  611:    case silver:
    #####:  612:      return 3;
        -:  613:    case gold:
    #####:  614:      return 6;
        -:  615:    case adventurer:
    #####:  616:      return 6;
        -:  617:    case council_room:
    #####:  618:      return 5;
        -:  619:    case feast:
    #####:  620:      return 4;
        -:  621:    case gardens:
    #####:  622:      return 4;
        -:  623:    case mine:
    #####:  624:      return 5;
        -:  625:    case remodel:
    #####:  626:      return 4;
        -:  627:    case smithy:
    #####:  628:      return 4;
        -:  629:    case village:
    #####:  630:      return 3;
        -:  631:    case baron:
    #####:  632:      return 4;
        -:  633:    case great_hall:
    #####:  634:      return 3;
        -:  635:    case minion:
    #####:  636:      return 5;
        -:  637:    case steward:
    #####:  638:      return 3;
        -:  639:    case tribute:
    #####:  640:      return 5;
        -:  641:    case ambassador:
    #####:  642:      return 3;
        -:  643:    case cutpurse:
    #####:  644:      return 4;
        -:  645:    case embargo:
    #####:  646:      return 2;
        -:  647:    case outpost:
    #####:  648:      return 5;
        -:  649:    case salvager:
    #####:  650:      return 4;
        -:  651:    case sea_hag:
    #####:  652:      return 4;
        -:  653:    case treasure_map:
    #####:  654:      return 4;
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
        -:  658:}
        -:  659:
    #####:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int x;
        -:  665:  int index;
    #####:  666:  int currentPlayer = whoseTurn(state);
    #####:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    #####:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    #####:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:
        -:  675:
        -:  676:  //uses switch to select card and perform actions
    #####:  677:  switch( card ) {
        -:  678:
        -:  679:    case adventurer:
    #####:  680:      adventurer_refactor(state, currentPlayer, temphand);
    #####:  681:      return 0;
        -:  682:
        -:  683:    case council_room:
        -:  684:      //+4 Cards
    #####:  685:      for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:      //+1 Buy
    #####:  691:      state->numBuys++;
        -:  692:
        -:  693:      //Each other player draws a card
    #####:  694:      for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:	  if ( i != currentPlayer )
        -:  697:	    {
    #####:  698:	      drawCard(i, state);
        -:  699:	    }
        -:  700:	}
        -:  701:
        -:  702:      //put played card in played card pile
    #####:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:      return 0;
        -:  706:
        -:  707:    case feast:
        -:  708:      //gain card with cost up to 5
        -:  709:      //Backup hand
    #####:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
    #####:  717:      updateCoins(currentPlayer, state, 5);
    #####:  718:      x = 1;//Condition to loop on
    #####:  719:      while( x == 1) {//Buy one card
    #####:  720:	if (supplyCount(choice1, state) <= 0){
        -:  721:	  if (DEBUG)
        -:  722:	    printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:	  }
        -:  727:	}
    #####:  728:	else if (state->coins < getCost(choice1)){
    #####:  729:	  printf("That card is too expensive!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:	  }
        -:  734:	}
        -:  735:	else{
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
    #####:  741:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  742:	  x = 0;//No more buying cards
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
        -:  748:	}
        -:  749:      }
        -:  750:
        -:  751:      //Reset Hand
    #####:  752:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  753:	state->hand[currentPlayer][i] = temphand[i];
    #####:  754:	temphand[i] = -1;
        -:  755:      }
        -:  756:      //Reset Hand
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case gardens:
    #####:  761:      return -1;
        -:  762:
        -:  763:    case mine:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if (choice2 > treasure_map || choice2 < curse)
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 2, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case remodel:
    #####:  799:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      gainCard(choice2, state, 0, currentPlayer);
        -:  807:
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
        -:  810:
        -:  811:      //discard trashed card
    #####:  812:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:	{
    #####:  814:	  if (state->hand[currentPlayer][i] == j)
        -:  815:	    {
    #####:  816:	      discardCard(i, currentPlayer, state, 0);
    #####:  817:	      break;
        -:  818:	    }
        -:  819:	}
        -:  820:
        -:  821:
    #####:  822:      return 0;
        -:  823:
        -:  824:    case smithy:
    #####:  825:      smithy_refactor(state, currentPlayer, handPos);
    #####:  826:      return 0;
        -:  827:
        -:  828:    case village:
        -:  829:      //+1 Card
    #####:  830:      drawCard(currentPlayer, state);
        -:  831:
        -:  832:      //+2 Actions
    #####:  833:      state->numActions = state->numActions + 2;
        -:  834:
        -:  835:      //discard played card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
    #####:  837:      return 0;
        -:  838:
        -:  839:    case baron:
    #####:  840:      baron_refactor(state, currentPlayer, choice1);
    #####:  841:      return 0;
        -:  842:
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:
        -:  854:    case minion:
    #####:  855:      minion_refactor(state, currentPlayer, handPos, choice1, choice2);
    #####:  856:      return 0;
        -:  857:
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
    #####:  863:	  drawCard(currentPlayer, state);
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
        -:  875:	}
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  909:	}
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }
        -:  917:
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  930:	  drawCard(currentPlayer, state);
    #####:  931:	  drawCard(currentPlayer, state);
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:
    #####:  938:      return 0;
        -:  939:
        -:  940:    case ambassador:
    #####:  941:      j = 0;		//used to check if player has enough cards to discard
        -:  942:
    #####:  943:      if (choice2 > 2 || choice2 < 0)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice1 == handPos)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  956:	    {
    #####:  957:	      j++;
        -:  958:	    }
        -:  959:	}
    #####:  960:      if (j < choice2)
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      if (DEBUG)
        -:  966:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  967:
        -:  968:      //increase supply count for choosen card by amount being discarded
    #####:  969:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  970:
        -:  971:      //each other player gains a copy of revealed card
    #####:  972:      for (i = 0; i < state->numPlayers; i++)
        -:  973:	{
    #####:  974:	  if (i != currentPlayer)
        -:  975:	    {
    #####:  976:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:      //trash copies of cards returned to supply
    #####:  984:      for (j = 0; j < choice2; j++)
        -:  985:	{
    #####:  986:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:	    {
    #####:  988:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  989:		{
    #####:  990:		  discardCard(i, currentPlayer, state, 1);
    #####:  991:		  break;
        -:  992:		}
        -:  993:	    }
        -:  994:	}
        -:  995:
    #####:  996:      return 0;
        -:  997:
        -:  998:    case cutpurse:
    #####:  999:      cutpurse_refactor(state, currentPlayer, handPos);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:
        -: 1003:    case embargo:
        -: 1004:      //+2 Coins
    #####: 1005:      state->coins = state->coins + 2;
        -: 1006:
        -: 1007:      //see if selected pile is in play
    #####: 1008:      if ( state->supplyCount[choice1] == -1 )
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      //add embargo token to selected supply pile
    #####: 1014:      state->embargoTokens[choice1]++;
        -: 1015:
        -: 1016:      //trash card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case outpost:
        -: 1021:      //set outpost flag
    #####: 1022:      state->outpostPlayed++;
        -: 1023:
        -: 1024:      //discard card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case salvager:
        -: 1029:      //+1 buy
    #####: 1030:      state->numBuys++;
        -: 1031:
    #####: 1032:      if (choice1)
        -: 1033:	{
        -: 1034:	  //gain coins equal to trashed card
    #####: 1035:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1036:	  //trash card
    #####: 1037:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case sea_hag:
    #####: 1045:      for (i = 0; i < state->numPlayers; i++){
    #####: 1046:	if (i != currentPlayer){
    #####: 1047:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1048:	  state->discardCount[i]++;
    #####: 1049:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1050:	}
        -: 1051:      }
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:    case treasure_map:
        -: 1055:      //search hand for another treasure_map
    #####: 1056:      index = -1;
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:	{
    #####: 1059:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1060:	    {
    #####: 1061:	      index = i;
    #####: 1062:	      break;
        -: 1063:	    }
        -: 1064:	}
    #####: 1065:      if (index > -1)
        -: 1066:	{
        -: 1067:	  //trash both treasure cards
    #####: 1068:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1069:	  discardCard(index, currentPlayer, state, 1);
        -: 1070:
        -: 1071:	  //gain 4 Gold cards
    #####: 1072:	  for (i = 0; i < 4; i++)
        -: 1073:	    {
    #####: 1074:	      gainCard(gold, state, 1, currentPlayer);
        -: 1075:	    }
        -: 1076:
        -: 1077:	  //return success
    #####: 1078:	  return 1;
        -: 1079:	}
        -: 1080:
        -: 1081:      //no second treasure_map found in hand
    #####: 1082:      return -1;
        -: 1083:    }
        -: 1084:
    #####: 1085:  return -1;
        -: 1086:}
        -: 1087:
        -: 1088:/*******************************************************************************
        -: 1089:* Description: adventurer_refactor function
        -: 1090:*******************************************************************************/
        -: 1091:
    #####: 1092:void adventurer_refactor(struct gameState *state, int currentPlayer, int *temphand) {
    #####: 1093:  int drawntreasure = 0,
        -: 1094:      cardDrawn,
    #####: 1095:      z = 0;
        -: 1096:
    #####: 1097:  while(drawntreasure > 2) {
    #####: 1098:    if(state->deckCount[currentPlayer] < 1) {                                   //if the deck is empty we need to shuffle discard and add to deck
    #####: 1099:      shuffle(currentPlayer, state);
        -: 1100:    }
    #####: 1101:    drawCard(currentPlayer, state);
    #####: 1102:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];  //top card of hand is most recently drawn card.
    #####: 1103:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1104:      drawntreasure++;
        -: 1105:    } else {
    #####: 1106:      temphand[z]=cardDrawn;
    #####: 1107:      state->handCount[currentPlayer]--;                                        //this should just remove the top card (the most recently drawn one).
    #####: 1108:      z++;
        -: 1109:    }
        -: 1110:  }
    #####: 1111:  while(z - 1 >= 0) {
    #####: 1112:    state->discard[currentPlayer][state->discardCount[currentPlayer] ++]
    #####: 1113:    = temphand[z - 1];                                                          // discard all cards in play that have been drawn
    #####: 1114:    z = z - 1;
        -: 1115:  }
    #####: 1116:}
        -: 1117:
        -: 1118:/*******************************************************************************
        -: 1119:* Description: smithy_refactor function
        -: 1120:*******************************************************************************/
        -: 1121:
    #####: 1122:void smithy_refactor(struct gameState *state, int currentPlayer, int handPos) {
        -: 1123:  //+3 Cards
    #####: 1124:  int i = 0;
    #####: 1125:  for (i = 0; i < 10; i++) {
    #####: 1126:    drawCard(currentPlayer, state);
        -: 1127:  }
        -: 1128:  //discard card from hand
    #####: 1129:  discardCard(handPos, currentPlayer, state, 0);
        -: 1130:  // return 0;
    #####: 1131:}
        -: 1132:
        -: 1133:/*******************************************************************************
        -: 1134:* Description: baron_refactor function
        -: 1135:*******************************************************************************/
        -: 1136:
    #####: 1137:void baron_refactor(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1138:  state->numBuys ++;                                                            //Increase buys by 1!
    #####: 1139:  if (choice1 > 0) {                                                            //Boolean true or going to discard an estate
    #####: 1140:    int p = 0;                                                                  //Iterator for hand!
    #####: 1141:    int card_not_discarded = 1;                                                 //Flag for discard set!
    #####: 1142:    while(card_not_discarded) {
    #####: 1143:      if (state->hand[currentPlayer][p] == estate) {                            //Found an estate card!
    #####: 1144:        state->coins += 4;                                                      //Add 4 coins to the amount of coins
    #####: 1145:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1146:        state->discardCount[currentPlayer] ++;
    #####: 1147:        for (;p < state->handCount[currentPlayer]; p ++) {
    #####: 1148:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1149:        }
    #####: 1150:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1151:        state->handCount[currentPlayer]--;
    #####: 1152:        card_not_discarded = 0;                                                 //Exit the loop
    #####: 1153:      } else if (p > state->handCount[currentPlayer]) {
        -: 1154:        if(DEBUG) {
        -: 1155:          printf("No estate cards in your hand, invalid choice\n");
        -: 1156:          printf("Must gain an estate if there are any\n");
        -: 1157:        }
    #####: 1158:        if (supplyCount(estate, state) > 0) {
    #####: 1159:          gainCard(estate, state, 0, currentPlayer);
    #####: 1160:          state->supplyCount[estate]--;                                         //Decrement estates
    #####: 1161:          if (supplyCount(estate, state) == 0) {
    #####: 1162:            isGameOver(state);
        -: 1163:          }
        -: 1164:        }
    #####: 1165:        card_not_discarded = 0;                                                 //Exit the loop
        -: 1166:      } else {
    #####: 1167:        p ++;                                                                   //Next card
        -: 1168:      }
        -: 1169:    }
        -: 1170:  } else {
    #####: 1171:    if (supplyCount(estate, state) > 0) {
    #####: 1172:      gainCard(estate, state, 0, currentPlayer);                                //Gain an estate
    #####: 1173:      state->supplyCount[estate]--;                                             //Decrement Estates
    #####: 1174:      if (supplyCount(estate, state) == 0){
    #####: 1175:        isGameOver(state);
        -: 1176:      }
        -: 1177:    }
        -: 1178:  }
    #####: 1179:}
        -: 1180:
        -: 1181:/*******************************************************************************
        -: 1182:* Description: minion_refactor function
        -: 1183:*******************************************************************************/
        -: 1184:
    #####: 1185:void minion_refactor(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
    #####: 1186:  int i = 0,
    #####: 1187:      j = 0;
        -: 1188:  //+1 action
    #####: 1189:  state->numActions++;
        -: 1190:
        -: 1191:  //discard card from hand
    #####: 1192:  discardCard(handPos, currentPlayer, state, 0);
        -: 1193:  //+2 coins
    #####: 1194:  if (choice2) {
    #####: 1195:    state->coins = state->coins + 2;
    #####: 1196:  } else if (choice1) {                                                         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1197:    //discard hand
    #####: 1198:    while(numHandCards(state) > 0) {
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:    }
        -: 1201:    //draw 4
    #####: 1202:    for (i = 0; i < 4; i++) {
    #####: 1203:      drawCard(currentPlayer, state);
        -: 1204:    }
        -: 1205:    //other players discard hand and redraw if hand size > 4
    #####: 1206:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:      if (i != currentPlayer) {
    #####: 1208:        if ( state->handCount[i] > 4 ) {
        -: 1209:          //discard hand
    #####: 1210:          while( state->handCount[i] > 0 ) {
    #####: 1211:            discardCard(handPos, i, state, 0);
        -: 1212:          }
        -: 1213:          //draw 4
    #####: 1214:          for (j = 0; j < 4; j++) {
    #####: 1215:            drawCard(i, state);
        -: 1216:          }
        -: 1217:        }
        -: 1218:      }
        -: 1219:    }
        -: 1220:  }
    #####: 1221:}
        -: 1222:
        -: 1223:/*******************************************************************************
        -: 1224:* Description: cutpurse_refactor function
        -: 1225:*******************************************************************************/
        -: 1226:
    #####: 1227:void cutpurse_refactor(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1228:  int i = 0,
    #####: 1229:      j = 0,
    #####: 1230:      k = 0;
    #####: 1231:  updateCoins(currentPlayer, state, 2);
    #####: 1232:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1233:    if (j != currentPlayer) {
    #####: 1234:      for (j = 0; j < state->handCount[i]; j++) {
    #####: 1235:        if (state->hand[i][j] == copper) {
    #####: 1236:          discardCard(j, i, state, 0);
    #####: 1237:          break;
        -: 1238:        }
    #####: 1239:        if (j == state->handCount[i]) {
    #####: 1240:          for (k = 0; k < state->handCount[i]; k++) {
        -: 1241:            if (DEBUG) {
        -: 1242:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:            }
        -: 1244:          }
    #####: 1245:          break;
        -: 1246:        }
        -: 1247:      }
        -: 1248:    }
        -: 1249:  }
        -: 1250:  //discard played card from hand
    #####: 1251:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:}
        -: 1253:
    #####: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:  //if card is not trashed, added to Played pile
    #####: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:  //set played card to -1
    #####: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:  //remove card from player's hand
    #####: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    #####: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    #####: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    #####: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
    #####: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
        1: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:
        -: 1333:  //reset coin count
        1: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
        6: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
        5: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
        4: 1341:	  state->coins += 1;
        -: 1342:	}
        1: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
        1: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}
        -: 1351:    }
        -: 1352:
        -: 1353:  //add bonus
        1: 1354:  state->coins += bonus;
        -: 1355:
        1: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
unittest3.c:
------------------ Testing: shuffle() -------------------

Player deck count is 0
Test: PASSED

Player deck count is 10 before and after shuffle
Test: PASSED

Cards are shuffled
Test: PASSED

TEST SUCCESSFULLY COMPLETED

File 'unittest3.c'
Lines executed:84.85% of 33
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:15.96% of 570
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** PREPROCESSOR DIRECTIVES
        -:    3:*******************************************************************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:/*******************************************************************************
        -:   13:** FUNCTION DECLARATIONS
        -:   14:*******************************************************************************/
        -:   15:
        -:   16:void adventurer_refactor(struct gameState*, int, int*);                         // Declare function for adventurer card functionality
        -:   17:void smithy_refactor(struct gameState*, int, int);                              // Declare function for smithy card functionality
        -:   18:void baron_refactor(struct gameState*, int, int);                               // Declare function for baron card functionality
        -:   19:void minion_refactor(struct gameState*, int, int, int, int);                    // Declare function for minion card functionality
        -:   20:void cutpurse_refactor(struct gameState*, int, int);                            // Declare function for cutpurse card functionality
        -:   21:
       63:   22:int compare(const void* a, const void* b) {
       63:   23:  if (*(int*)a > *(int*)b)
        4:   24:    return 1;
       59:   25:  if (*(int*)a < *(int*)b)
       14:   26:    return -1;
       45:   27:  return 0;
        -:   28:}
        -:   29:
    #####:   30:struct gameState* newGame() {
    #####:   31:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   32:  return g;
        -:   33:}
        -:   34:
    #####:   35:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   36:		  int k8, int k9, int k10) {
    #####:   37:  int* k = malloc(10 * sizeof(int));
    #####:   38:  k[0] = k1;
    #####:   39:  k[1] = k2;
    #####:   40:  k[2] = k3;
    #####:   41:  k[3] = k4;
    #####:   42:  k[4] = k5;
    #####:   43:  k[5] = k6;
    #####:   44:  k[6] = k7;
    #####:   45:  k[7] = k8;
    #####:   46:  k[8] = k9;
    #####:   47:  k[9] = k10;
    #####:   48:  return k;
        -:   49:}
        -:   50:
        1:   51:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        1:   58:  SelectStream(1);
        1:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        1:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        1:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:  //check selected kingdom cards are different
       11:   71:  for (i = 0; i < 10; i++)
        -:   72:    {
      110:   73:      for (j = 0; j < 10; j++)
        -:   74:        {
      100:   75:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:	    {
    #####:   77:	      return -1;
        -:   78:	    }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:
        -:   83:  //initialize supply
        -:   84:  ///////////////////////////////
        -:   85:
        -:   86:  //set number of Curse cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[curse] = 10;
        -:   90:    }
    #####:   91:  else if (numPlayers == 3)
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 20;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 30;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Victory cards
        1:  101:  if (numPlayers == 2)
        -:  102:    {
        1:  103:      state->supplyCount[estate] = 8;
        1:  104:      state->supplyCount[duchy] = 8;
        1:  105:      state->supplyCount[province] = 8;
        -:  106:    }
        -:  107:  else
        -:  108:    {
    #####:  109:      state->supplyCount[estate] = 12;
    #####:  110:      state->supplyCount[duchy] = 12;
    #####:  111:      state->supplyCount[province] = 12;
        -:  112:    }
        -:  113:
        -:  114:  //set number of Treasure cards
        1:  115:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  116:  state->supplyCount[silver] = 40;
        1:  117:  state->supplyCount[gold] = 30;
        -:  118:
        -:  119:  //set number of Kingdom cards
       21:  120:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  121:    {
      165:  122:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  123:	{
      155:  124:	  if (kingdomCards[j] == i)
        -:  125:	    {
        -:  126:	      //check if card is a 'Victory' Kingdom card
       10:  127:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:		{
        4:  129:		  if (numPlayers == 2){
        2:  130:		    state->supplyCount[i] = 8;
        -:  131:		  }
    #####:  132:		  else{ state->supplyCount[i] = 12; }
        -:  133:		}
        -:  134:	      else
        -:  135:		{
        8:  136:		  state->supplyCount[i] = 10;
        -:  137:		}
       10:  138:	      break;
        -:  139:	    }
        -:  140:	  else    //card is not in the set choosen for the game
        -:  141:	    {
      145:  142:	      state->supplyCount[i] = -1;
        -:  143:	    }
        -:  144:	}
        -:  145:
        -:  146:    }
        -:  147:
        -:  148:  ////////////////////////
        -:  149:  //supply intilization complete
        -:  150:
        -:  151:  //set player decks
        3:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
        2:  154:      state->deckCount[i] = 0;
        8:  155:      for (j = 0; j < 3; j++)
        -:  156:	{
        6:  157:	  state->deck[i][j] = estate;
        6:  158:	  state->deckCount[i]++;
        -:  159:	}
       16:  160:      for (j = 3; j < 10; j++)
        -:  161:	{
       14:  162:	  state->deck[i][j] = copper;
       14:  163:	  state->deckCount[i]++;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //shuffle player decks
        3:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        2:  170:      if ( shuffle(i, state) < 0 )
        -:  171:	{
    #####:  172:	  return -1;
        -:  173:	}
        -:  174:    }
        -:  175:
        -:  176:  //draw player hands
        3:  177:  for (i = 0; i < numPlayers; i++)
        -:  178:    {
        -:  179:      //initialize hand size to zero
        2:  180:      state->handCount[i] = 0;
        2:  181:      state->discardCount[i] = 0;
        -:  182:      //draw 5 cards
        -:  183:      // for (j = 0; j < 5; j++)
        -:  184:      //	{
        -:  185:      //	  drawCard(i, state);
        -:  186:      //	}
        -:  187:    }
        -:  188:
        -:  189:  //set embargo tokens to 0 for all supply piles
       28:  190:  for (i = 0; i <= treasure_map; i++)
        -:  191:    {
       27:  192:      state->embargoTokens[i] = 0;
        -:  193:    }
        -:  194:
        -:  195:  //initialize first player's turn
        1:  196:  state->outpostPlayed = 0;
        1:  197:  state->phase = 0;
        1:  198:  state->numActions = 1;
        1:  199:  state->numBuys = 1;
        1:  200:  state->playedCardCount = 0;
        1:  201:  state->whoseTurn = 0;
        1:  202:  state->handCount[state->whoseTurn] = 0;
        -:  203:  //int it; move to top
        -:  204:
        -:  205:  //Moved draw cards to here, only drawing at the start of a turn
        6:  206:  for (it = 0; it < 5; it++){
        5:  207:    drawCard(state->whoseTurn, state);
        -:  208:  }
        -:  209:
        1:  210:  updateCoins(state->whoseTurn, state, 0);
        -:  211:
        1:  212:  return 0;
        -:  213:}
        -:  214:
        5:  215:int shuffle(int player, struct gameState *state) {
        -:  216:
        -:  217:
        -:  218:  int newDeck[MAX_DECK];
        5:  219:  int newDeckPos = 0;
        -:  220:  int card;
        -:  221:  int i;
        -:  222:
        5:  223:  if (state->deckCount[player] < 1)
        1:  224:    return -1;
        4:  225:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  226:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  227:
       48:  228:  while (state->deckCount[player] > 0) {
       40:  229:    card = floor(Random() * state->deckCount[player]);
       40:  230:    newDeck[newDeckPos] = state->deck[player][card];
       40:  231:    newDeckPos++;
      139:  232:    for (i = card; i < state->deckCount[player]-1; i++) {
       99:  233:      state->deck[player][i] = state->deck[player][i+1];
        -:  234:    }
       40:  235:    state->deckCount[player]--;
        -:  236:  }
       44:  237:  for (i = 0; i < newDeckPos; i++) {
       40:  238:    state->deck[player][i] = newDeck[i];
       40:  239:    state->deckCount[player]++;
        -:  240:  }
        -:  241:
        4:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:  int card;
    #####:  248:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  249:
        -:  250:  //check if it is the right phase
    #####:  251:  if (state->phase != 0)
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //check if player has enough actions
    #####:  257:  if ( state->numActions < 1 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //get card played
    #####:  263:  card = handCard(handPos, state);
        -:  264:
        -:  265:  //check if selected card is an action
    #####:  266:  if ( card < adventurer || card > treasure_map )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //play card
    #####:  272:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  273:    {
    #####:  274:      return -1;
        -:  275:    }
        -:  276:
        -:  277:  //reduce number of actions
    #####:  278:  state->numActions--;
        -:  279:
        -:  280:  //update coins (Treasure cards may be added with card draws)
    #####:  281:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:  return 0;
        -:  284:}
        -:  285:
    #####:  286:int buyCard(int supplyPos, struct gameState *state) {
        -:  287:  int who;
        -:  288:  if (DEBUG){
        -:  289:    printf("Entering buyCard...\n");
        -:  290:  }
        -:  291:
        -:  292:  // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:  who = state->whoseTurn;
        -:  295:
    #####:  296:  if (state->numBuys < 1){
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have any buys left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (supplyCount(supplyPos, state) <1){
        -:  301:    if (DEBUG)
        -:  302:      printf("There are not any of that type of card left\n");
    #####:  303:    return -1;
    #####:  304:  } else if (state->coins < getCost(supplyPos)){
        -:  305:    if (DEBUG)
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  } else {
    #####:  309:    state->phase=1;
        -:  310:    //state->supplyCount[supplyPos]--;
    #####:  311:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  312:
    #####:  313:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  314:    state->numBuys--;
        -:  315:    if (DEBUG)
        -:  316:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  317:  }
        -:  318:
        -:  319:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  320:  //state->discardCount[who]++;
        -:  321:
    #####:  322:  return 0;
        -:  323:}
        -:  324:
    #####:  325:int numHandCards(struct gameState *state) {
    #####:  326:  return state->handCount[ whoseTurn(state) ];
        -:  327:}
        -:  328:
    #####:  329:int handCard(int handPos, struct gameState *state) {
    #####:  330:  int currentPlayer = whoseTurn(state);
    #####:  331:  return state->hand[currentPlayer][handPos];
        -:  332:}
        -:  333:
    #####:  334:int supplyCount(int card, struct gameState *state) {
    #####:  335:  return state->supplyCount[card];
        -:  336:}
        -:  337:
    #####:  338:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  339:  int i;
    #####:  340:  int count = 0;
        -:  341:
    #####:  342:  for (i = 0; i < state->deckCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->deck[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->handCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->hand[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  for (i = 0; i < state->discardCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->discard[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  return count;
        -:  358:}
        -:  359:
    #####:  360:int whoseTurn(struct gameState *state) {
    #####:  361:  return state->whoseTurn;
        -:  362:}
        -:  363:
    #####:  364:int endTurn(struct gameState *state) {
        -:  365:  int k;
        -:  366:  int i;
    #####:  367:  int currentPlayer = whoseTurn(state);
        -:  368:
        -:  369:  //Discard hand
    #####:  370:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  371:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  372:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  373:  }
    #####:  374:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  375:
        -:  376:  //Code for determining the player
    #####:  377:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  378:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  379:  }
        -:  380:  else{
    #####:  381:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:  }
        -:  383:
    #####:  384:  state->outpostPlayed = 0;
    #####:  385:  state->phase = 0;
    #####:  386:  state->numActions = 1;
    #####:  387:  state->coins = 0;
    #####:  388:  state->numBuys = 1;
    #####:  389:  state->playedCardCount = 0;
    #####:  390:  state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:  //int k; move to top
        -:  393:  //Next player draws hand
    #####:  394:  for (k = 0; k < 5; k++){
    #####:  395:    drawCard(state->whoseTurn, state);//Draw a card
        -:  396:  }
        -:  397:
        -:  398:  //Update money
    #####:  399:  updateCoins(state->whoseTurn, state , 0);
        -:  400:
    #####:  401:  return 0;
        -:  402:}
        -:  403:
    #####:  404:int isGameOver(struct gameState *state) {
        -:  405:  int i;
        -:  406:  int j;
        -:  407:
        -:  408:  //if stack of Province cards is empty, the game ends
    #####:  409:  if (state->supplyCount[province] == 0)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  //if three supply pile are at 0, the game ends
    #####:  415:  j = 0;
    #####:  416:  for (i = 0; i < 25; i++)
        -:  417:    {
    #####:  418:      if (state->supplyCount[i] == 0)
        -:  419:	{
    #####:  420:	  j++;
        -:  421:	}
        -:  422:    }
    #####:  423:  if ( j >= 3)
        -:  424:    {
    #####:  425:      return 1;
        -:  426:    }
        -:  427:
    #####:  428:  return 0;
        -:  429:}
        -:  430:
    #####:  431:int scoreFor (int player, struct gameState *state) {
        -:  432:
        -:  433:  int i;
    #####:  434:  int score = 0;
        -:  435:  //score from hand
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from discard
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        -:  457:  //score from deck
    #####:  458:  for (i = 0; i < state->discardCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  461:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  463:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  464:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  465:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  466:    }
        -:  467:
    #####:  468:  return score;
        -:  469:}
        -:  470:
    #####:  471:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  472:  int i;
        -:  473:  int j;
        -:  474:  int highScore;
        -:  475:  int currentPlayer;
        -:  476:
        -:  477:  //get score for each player
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      //set unused player scores to -9999
    #####:  481:      if (i >= state->numPlayers)
        -:  482:	{
    #####:  483:	  players[i] = -9999;
        -:  484:	}
        -:  485:      else
        -:  486:	{
    #####:  487:	  players[i] = scoreFor (i, state);
        -:  488:	}
        -:  489:    }
        -:  490:
        -:  491:  //find highest score
    #####:  492:  j = 0;
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if (players[i] > players[j])
        -:  496:	{
    #####:  497:	  j = i;
        -:  498:	}
        -:  499:    }
    #####:  500:  highScore = players[j];
        -:  501:
        -:  502:  //add 1 to players who had less turns
    #####:  503:  currentPlayer = whoseTurn(state);
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] == highScore && i > currentPlayer )
        -:  507:	{
    #####:  508:	  players[i]++;
        -:  509:	}
        -:  510:    }
        -:  511:
        -:  512:  //find new highest score
    #####:  513:  j = 0;
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] > players[j] )
        -:  517:	{
    #####:  518:	  j = i;
        -:  519:	}
        -:  520:    }
    #####:  521:  highScore = players[j];
        -:  522:
        -:  523:  //set winners in array to 1 and rest to 0
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] == highScore )
        -:  527:	{
    #####:  528:	  players[i] = 1;
        -:  529:	}
        -:  530:      else
        -:  531:	{
    #####:  532:	  players[i] = 0;
        -:  533:	}
        -:  534:    }
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
        5:  539:int drawCard(int player, struct gameState *state)
        -:  540:{	int count;
        -:  541:  int deckCounter;
        5:  542:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
    #####:  547:    for (i = 0; i < state->discardCount[player];i++){
    #####:  548:      state->deck[player][i] = state->discard[player][i];
    #####:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
    #####:  552:    state->deckCount[player] = state->discardCount[player];
    #####:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
    #####:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
    #####:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
    #####:  565:    count = state->handCount[player];//Get current player's hand count
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
    #####:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
    #####:  573:    if (deckCounter == 0)
    #####:  574:      return -1;
        -:  575:
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
        -:  581:  else{
        5:  582:    int count = state->handCount[player];//Get current hand count for player
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
        5:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  590:    state->deckCount[player]--;
        5:  591:    state->handCount[player]++;//Increment hand count
        -:  592:  }
        -:  593:
        5:  594:  return 0;
        -:  595:}
        -:  596:
    #####:  597:int getCost(int cardNumber)
        -:  598:{
    #####:  599:  switch( cardNumber )
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
        -:  603:    case estate:
    #####:  604:      return 2;
        -:  605:    case duchy:
    #####:  606:      return 5;
        -:  607:    case province:
    #####:  608:      return 8;
        -:  609:    case copper:
    #####:  610:      return 0;
        -:  611:    case silver:
    #####:  612:      return 3;
        -:  613:    case gold:
    #####:  614:      return 6;
        -:  615:    case adventurer:
    #####:  616:      return 6;
        -:  617:    case council_room:
    #####:  618:      return 5;
        -:  619:    case feast:
    #####:  620:      return 4;
        -:  621:    case gardens:
    #####:  622:      return 4;
        -:  623:    case mine:
    #####:  624:      return 5;
        -:  625:    case remodel:
    #####:  626:      return 4;
        -:  627:    case smithy:
    #####:  628:      return 4;
        -:  629:    case village:
    #####:  630:      return 3;
        -:  631:    case baron:
    #####:  632:      return 4;
        -:  633:    case great_hall:
    #####:  634:      return 3;
        -:  635:    case minion:
    #####:  636:      return 5;
        -:  637:    case steward:
    #####:  638:      return 3;
        -:  639:    case tribute:
    #####:  640:      return 5;
        -:  641:    case ambassador:
    #####:  642:      return 3;
        -:  643:    case cutpurse:
    #####:  644:      return 4;
        -:  645:    case embargo:
    #####:  646:      return 2;
        -:  647:    case outpost:
    #####:  648:      return 5;
        -:  649:    case salvager:
    #####:  650:      return 4;
        -:  651:    case sea_hag:
    #####:  652:      return 4;
        -:  653:    case treasure_map:
    #####:  654:      return 4;
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
        -:  658:}
        -:  659:
    #####:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int x;
        -:  665:  int index;
    #####:  666:  int currentPlayer = whoseTurn(state);
    #####:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    #####:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    #####:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:
        -:  675:
        -:  676:  //uses switch to select card and perform actions
    #####:  677:  switch( card ) {
        -:  678:
        -:  679:    case adventurer:
    #####:  680:      adventurer_refactor(state, currentPlayer, temphand);
    #####:  681:      return 0;
        -:  682:
        -:  683:    case council_room:
        -:  684:      //+4 Cards
    #####:  685:      for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:      //+1 Buy
    #####:  691:      state->numBuys++;
        -:  692:
        -:  693:      //Each other player draws a card
    #####:  694:      for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:	  if ( i != currentPlayer )
        -:  697:	    {
    #####:  698:	      drawCard(i, state);
        -:  699:	    }
        -:  700:	}
        -:  701:
        -:  702:      //put played card in played card pile
    #####:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:      return 0;
        -:  706:
        -:  707:    case feast:
        -:  708:      //gain card with cost up to 5
        -:  709:      //Backup hand
    #####:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
    #####:  717:      updateCoins(currentPlayer, state, 5);
    #####:  718:      x = 1;//Condition to loop on
    #####:  719:      while( x == 1) {//Buy one card
    #####:  720:	if (supplyCount(choice1, state) <= 0){
        -:  721:	  if (DEBUG)
        -:  722:	    printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:	  }
        -:  727:	}
    #####:  728:	else if (state->coins < getCost(choice1)){
    #####:  729:	  printf("That card is too expensive!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:	  }
        -:  734:	}
        -:  735:	else{
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
    #####:  741:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  742:	  x = 0;//No more buying cards
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
        -:  748:	}
        -:  749:      }
        -:  750:
        -:  751:      //Reset Hand
    #####:  752:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  753:	state->hand[currentPlayer][i] = temphand[i];
    #####:  754:	temphand[i] = -1;
        -:  755:      }
        -:  756:      //Reset Hand
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case gardens:
    #####:  761:      return -1;
        -:  762:
        -:  763:    case mine:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if (choice2 > treasure_map || choice2 < curse)
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 2, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case remodel:
    #####:  799:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      gainCard(choice2, state, 0, currentPlayer);
        -:  807:
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
        -:  810:
        -:  811:      //discard trashed card
    #####:  812:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:	{
    #####:  814:	  if (state->hand[currentPlayer][i] == j)
        -:  815:	    {
    #####:  816:	      discardCard(i, currentPlayer, state, 0);
    #####:  817:	      break;
        -:  818:	    }
        -:  819:	}
        -:  820:
        -:  821:
    #####:  822:      return 0;
        -:  823:
        -:  824:    case smithy:
    #####:  825:      smithy_refactor(state, currentPlayer, handPos);
    #####:  826:      return 0;
        -:  827:
        -:  828:    case village:
        -:  829:      //+1 Card
    #####:  830:      drawCard(currentPlayer, state);
        -:  831:
        -:  832:      //+2 Actions
    #####:  833:      state->numActions = state->numActions + 2;
        -:  834:
        -:  835:      //discard played card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
    #####:  837:      return 0;
        -:  838:
        -:  839:    case baron:
    #####:  840:      baron_refactor(state, currentPlayer, choice1);
    #####:  841:      return 0;
        -:  842:
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:
        -:  854:    case minion:
    #####:  855:      minion_refactor(state, currentPlayer, handPos, choice1, choice2);
    #####:  856:      return 0;
        -:  857:
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
    #####:  863:	  drawCard(currentPlayer, state);
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
        -:  875:	}
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  909:	}
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }
        -:  917:
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  930:	  drawCard(currentPlayer, state);
    #####:  931:	  drawCard(currentPlayer, state);
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:
    #####:  938:      return 0;
        -:  939:
        -:  940:    case ambassador:
    #####:  941:      j = 0;		//used to check if player has enough cards to discard
        -:  942:
    #####:  943:      if (choice2 > 2 || choice2 < 0)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice1 == handPos)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  956:	    {
    #####:  957:	      j++;
        -:  958:	    }
        -:  959:	}
    #####:  960:      if (j < choice2)
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      if (DEBUG)
        -:  966:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  967:
        -:  968:      //increase supply count for choosen card by amount being discarded
    #####:  969:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  970:
        -:  971:      //each other player gains a copy of revealed card
    #####:  972:      for (i = 0; i < state->numPlayers; i++)
        -:  973:	{
    #####:  974:	  if (i != currentPlayer)
        -:  975:	    {
    #####:  976:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:      //trash copies of cards returned to supply
    #####:  984:      for (j = 0; j < choice2; j++)
        -:  985:	{
    #####:  986:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:	    {
    #####:  988:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  989:		{
    #####:  990:		  discardCard(i, currentPlayer, state, 1);
    #####:  991:		  break;
        -:  992:		}
        -:  993:	    }
        -:  994:	}
        -:  995:
    #####:  996:      return 0;
        -:  997:
        -:  998:    case cutpurse:
    #####:  999:      cutpurse_refactor(state, currentPlayer, handPos);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:
        -: 1003:    case embargo:
        -: 1004:      //+2 Coins
    #####: 1005:      state->coins = state->coins + 2;
        -: 1006:
        -: 1007:      //see if selected pile is in play
    #####: 1008:      if ( state->supplyCount[choice1] == -1 )
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      //add embargo token to selected supply pile
    #####: 1014:      state->embargoTokens[choice1]++;
        -: 1015:
        -: 1016:      //trash card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case outpost:
        -: 1021:      //set outpost flag
    #####: 1022:      state->outpostPlayed++;
        -: 1023:
        -: 1024:      //discard card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case salvager:
        -: 1029:      //+1 buy
    #####: 1030:      state->numBuys++;
        -: 1031:
    #####: 1032:      if (choice1)
        -: 1033:	{
        -: 1034:	  //gain coins equal to trashed card
    #####: 1035:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1036:	  //trash card
    #####: 1037:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case sea_hag:
    #####: 1045:      for (i = 0; i < state->numPlayers; i++){
    #####: 1046:	if (i != currentPlayer){
    #####: 1047:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1048:	  state->discardCount[i]++;
    #####: 1049:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1050:	}
        -: 1051:      }
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:    case treasure_map:
        -: 1055:      //search hand for another treasure_map
    #####: 1056:      index = -1;
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:	{
    #####: 1059:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1060:	    {
    #####: 1061:	      index = i;
    #####: 1062:	      break;
        -: 1063:	    }
        -: 1064:	}
    #####: 1065:      if (index > -1)
        -: 1066:	{
        -: 1067:	  //trash both treasure cards
    #####: 1068:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1069:	  discardCard(index, currentPlayer, state, 1);
        -: 1070:
        -: 1071:	  //gain 4 Gold cards
    #####: 1072:	  for (i = 0; i < 4; i++)
        -: 1073:	    {
    #####: 1074:	      gainCard(gold, state, 1, currentPlayer);
        -: 1075:	    }
        -: 1076:
        -: 1077:	  //return success
    #####: 1078:	  return 1;
        -: 1079:	}
        -: 1080:
        -: 1081:      //no second treasure_map found in hand
    #####: 1082:      return -1;
        -: 1083:    }
        -: 1084:
    #####: 1085:  return -1;
        -: 1086:}
        -: 1087:
        -: 1088:/*******************************************************************************
        -: 1089:* Description: adventurer_refactor function
        -: 1090:*******************************************************************************/
        -: 1091:
    #####: 1092:void adventurer_refactor(struct gameState *state, int currentPlayer, int *temphand) {
    #####: 1093:  int drawntreasure = 0,
        -: 1094:      cardDrawn,
    #####: 1095:      z = 0;
        -: 1096:
    #####: 1097:  while(drawntreasure > 2) {
    #####: 1098:    if(state->deckCount[currentPlayer] < 1) {                                   //if the deck is empty we need to shuffle discard and add to deck
    #####: 1099:      shuffle(currentPlayer, state);
        -: 1100:    }
    #####: 1101:    drawCard(currentPlayer, state);
    #####: 1102:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];  //top card of hand is most recently drawn card.
    #####: 1103:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1104:      drawntreasure++;
        -: 1105:    } else {
    #####: 1106:      temphand[z]=cardDrawn;
    #####: 1107:      state->handCount[currentPlayer]--;                                        //this should just remove the top card (the most recently drawn one).
    #####: 1108:      z++;
        -: 1109:    }
        -: 1110:  }
    #####: 1111:  while(z - 1 >= 0) {
    #####: 1112:    state->discard[currentPlayer][state->discardCount[currentPlayer] ++]
    #####: 1113:    = temphand[z - 1];                                                          // discard all cards in play that have been drawn
    #####: 1114:    z = z - 1;
        -: 1115:  }
    #####: 1116:}
        -: 1117:
        -: 1118:/*******************************************************************************
        -: 1119:* Description: smithy_refactor function
        -: 1120:*******************************************************************************/
        -: 1121:
    #####: 1122:void smithy_refactor(struct gameState *state, int currentPlayer, int handPos) {
        -: 1123:  //+3 Cards
    #####: 1124:  int i = 0;
    #####: 1125:  for (i = 0; i < 10; i++) {
    #####: 1126:    drawCard(currentPlayer, state);
        -: 1127:  }
        -: 1128:  //discard card from hand
    #####: 1129:  discardCard(handPos, currentPlayer, state, 0);
        -: 1130:  // return 0;
    #####: 1131:}
        -: 1132:
        -: 1133:/*******************************************************************************
        -: 1134:* Description: baron_refactor function
        -: 1135:*******************************************************************************/
        -: 1136:
    #####: 1137:void baron_refactor(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1138:  state->numBuys ++;                                                            //Increase buys by 1!
    #####: 1139:  if (choice1 > 0) {                                                            //Boolean true or going to discard an estate
    #####: 1140:    int p = 0;                                                                  //Iterator for hand!
    #####: 1141:    int card_not_discarded = 1;                                                 //Flag for discard set!
    #####: 1142:    while(card_not_discarded) {
    #####: 1143:      if (state->hand[currentPlayer][p] == estate) {                            //Found an estate card!
    #####: 1144:        state->coins += 4;                                                      //Add 4 coins to the amount of coins
    #####: 1145:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1146:        state->discardCount[currentPlayer] ++;
    #####: 1147:        for (;p < state->handCount[currentPlayer]; p ++) {
    #####: 1148:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1149:        }
    #####: 1150:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1151:        state->handCount[currentPlayer]--;
    #####: 1152:        card_not_discarded = 0;                                                 //Exit the loop
    #####: 1153:      } else if (p > state->handCount[currentPlayer]) {
        -: 1154:        if(DEBUG) {
        -: 1155:          printf("No estate cards in your hand, invalid choice\n");
        -: 1156:          printf("Must gain an estate if there are any\n");
        -: 1157:        }
    #####: 1158:        if (supplyCount(estate, state) > 0) {
    #####: 1159:          gainCard(estate, state, 0, currentPlayer);
    #####: 1160:          state->supplyCount[estate]--;                                         //Decrement estates
    #####: 1161:          if (supplyCount(estate, state) == 0) {
    #####: 1162:            isGameOver(state);
        -: 1163:          }
        -: 1164:        }
    #####: 1165:        card_not_discarded = 0;                                                 //Exit the loop
        -: 1166:      } else {
    #####: 1167:        p ++;                                                                   //Next card
        -: 1168:      }
        -: 1169:    }
        -: 1170:  } else {
    #####: 1171:    if (supplyCount(estate, state) > 0) {
    #####: 1172:      gainCard(estate, state, 0, currentPlayer);                                //Gain an estate
    #####: 1173:      state->supplyCount[estate]--;                                             //Decrement Estates
    #####: 1174:      if (supplyCount(estate, state) == 0){
    #####: 1175:        isGameOver(state);
        -: 1176:      }
        -: 1177:    }
        -: 1178:  }
    #####: 1179:}
        -: 1180:
        -: 1181:/*******************************************************************************
        -: 1182:* Description: minion_refactor function
        -: 1183:*******************************************************************************/
        -: 1184:
    #####: 1185:void minion_refactor(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
    #####: 1186:  int i = 0,
    #####: 1187:      j = 0;
        -: 1188:  //+1 action
    #####: 1189:  state->numActions++;
        -: 1190:
        -: 1191:  //discard card from hand
    #####: 1192:  discardCard(handPos, currentPlayer, state, 0);
        -: 1193:  //+2 coins
    #####: 1194:  if (choice2) {
    #####: 1195:    state->coins = state->coins + 2;
    #####: 1196:  } else if (choice1) {                                                         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1197:    //discard hand
    #####: 1198:    while(numHandCards(state) > 0) {
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:    }
        -: 1201:    //draw 4
    #####: 1202:    for (i = 0; i < 4; i++) {
    #####: 1203:      drawCard(currentPlayer, state);
        -: 1204:    }
        -: 1205:    //other players discard hand and redraw if hand size > 4
    #####: 1206:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:      if (i != currentPlayer) {
    #####: 1208:        if ( state->handCount[i] > 4 ) {
        -: 1209:          //discard hand
    #####: 1210:          while( state->handCount[i] > 0 ) {
    #####: 1211:            discardCard(handPos, i, state, 0);
        -: 1212:          }
        -: 1213:          //draw 4
    #####: 1214:          for (j = 0; j < 4; j++) {
    #####: 1215:            drawCard(i, state);
        -: 1216:          }
        -: 1217:        }
        -: 1218:      }
        -: 1219:    }
        -: 1220:  }
    #####: 1221:}
        -: 1222:
        -: 1223:/*******************************************************************************
        -: 1224:* Description: cutpurse_refactor function
        -: 1225:*******************************************************************************/
        -: 1226:
    #####: 1227:void cutpurse_refactor(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1228:  int i = 0,
    #####: 1229:      j = 0,
    #####: 1230:      k = 0;
    #####: 1231:  updateCoins(currentPlayer, state, 2);
    #####: 1232:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1233:    if (j != currentPlayer) {
    #####: 1234:      for (j = 0; j < state->handCount[i]; j++) {
    #####: 1235:        if (state->hand[i][j] == copper) {
    #####: 1236:          discardCard(j, i, state, 0);
    #####: 1237:          break;
        -: 1238:        }
    #####: 1239:        if (j == state->handCount[i]) {
    #####: 1240:          for (k = 0; k < state->handCount[i]; k++) {
        -: 1241:            if (DEBUG) {
        -: 1242:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:            }
        -: 1244:          }
    #####: 1245:          break;
        -: 1246:        }
        -: 1247:      }
        -: 1248:    }
        -: 1249:  }
        -: 1250:  //discard played card from hand
    #####: 1251:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:}
        -: 1253:
    #####: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:  //if card is not trashed, added to Played pile
    #####: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:  //set played card to -1
    #####: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:  //remove card from player's hand
    #####: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    #####: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    #####: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    #####: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
    #####: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
        1: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:
        -: 1333:  //reset coin count
        1: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
        6: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
        5: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
        4: 1341:	  state->coins += 1;
        -: 1342:	}
        1: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
        1: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}
        -: 1351:    }
        -: 1352:
        -: 1353:  //add bonus
        1: 1354:  state->coins += bonus;
        -: 1355:
        1: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
unittest4.c:
------------------- Testing: gainCard() ---------------------

Gold supply pile is empty
Test: PASSED

Add card to deck
Test: PASSED

Add card to hand
Test: PASSED

Add card to discard pile
Test: PASSED

Decrease gold supply
Test: PASSED

TEST SUCCESSFULLY COMPLETED

File 'unittest4.c'
Lines executed:89.19% of 37
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:18.25% of 570
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** PREPROCESSOR DIRECTIVES
        -:    3:*******************************************************************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:/*******************************************************************************
        -:   13:** FUNCTION DECLARATIONS
        -:   14:*******************************************************************************/
        -:   15:
        -:   16:void adventurer_refactor(struct gameState*, int, int*);                         // Declare function for adventurer card functionality
        -:   17:void smithy_refactor(struct gameState*, int, int);                              // Declare function for smithy card functionality
        -:   18:void baron_refactor(struct gameState*, int, int);                               // Declare function for baron card functionality
        -:   19:void minion_refactor(struct gameState*, int, int, int, int);                    // Declare function for minion card functionality
        -:   20:void cutpurse_refactor(struct gameState*, int, int);                            // Declare function for cutpurse card functionality
        -:   21:
       30:   22:int compare(const void* a, const void* b) {
       30:   23:  if (*(int*)a > *(int*)b)
    #####:   24:    return 1;
       30:   25:  if (*(int*)a < *(int*)b)
        8:   26:    return -1;
       22:   27:  return 0;
        -:   28:}
        -:   29:
    #####:   30:struct gameState* newGame() {
    #####:   31:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   32:  return g;
        -:   33:}
        -:   34:
    #####:   35:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   36:		  int k8, int k9, int k10) {
    #####:   37:  int* k = malloc(10 * sizeof(int));
    #####:   38:  k[0] = k1;
    #####:   39:  k[1] = k2;
    #####:   40:  k[2] = k3;
    #####:   41:  k[3] = k4;
    #####:   42:  k[4] = k5;
    #####:   43:  k[5] = k6;
    #####:   44:  k[6] = k7;
    #####:   45:  k[7] = k8;
    #####:   46:  k[8] = k9;
    #####:   47:  k[9] = k10;
    #####:   48:  return k;
        -:   49:}
        -:   50:
        1:   51:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        1:   58:  SelectStream(1);
        1:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        1:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        1:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:  //check selected kingdom cards are different
       11:   71:  for (i = 0; i < 10; i++)
        -:   72:    {
      110:   73:      for (j = 0; j < 10; j++)
        -:   74:        {
      100:   75:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:	    {
    #####:   77:	      return -1;
        -:   78:	    }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:
        -:   83:  //initialize supply
        -:   84:  ///////////////////////////////
        -:   85:
        -:   86:  //set number of Curse cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[curse] = 10;
        -:   90:    }
    #####:   91:  else if (numPlayers == 3)
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 20;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 30;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Victory cards
        1:  101:  if (numPlayers == 2)
        -:  102:    {
        1:  103:      state->supplyCount[estate] = 8;
        1:  104:      state->supplyCount[duchy] = 8;
        1:  105:      state->supplyCount[province] = 8;
        -:  106:    }
        -:  107:  else
        -:  108:    {
    #####:  109:      state->supplyCount[estate] = 12;
    #####:  110:      state->supplyCount[duchy] = 12;
    #####:  111:      state->supplyCount[province] = 12;
        -:  112:    }
        -:  113:
        -:  114:  //set number of Treasure cards
        1:  115:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  116:  state->supplyCount[silver] = 40;
        1:  117:  state->supplyCount[gold] = 30;
        -:  118:
        -:  119:  //set number of Kingdom cards
       21:  120:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  121:    {
      165:  122:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  123:	{
      155:  124:	  if (kingdomCards[j] == i)
        -:  125:	    {
        -:  126:	      //check if card is a 'Victory' Kingdom card
       10:  127:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:		{
        4:  129:		  if (numPlayers == 2){
        2:  130:		    state->supplyCount[i] = 8;
        -:  131:		  }
    #####:  132:		  else{ state->supplyCount[i] = 12; }
        -:  133:		}
        -:  134:	      else
        -:  135:		{
        8:  136:		  state->supplyCount[i] = 10;
        -:  137:		}
       10:  138:	      break;
        -:  139:	    }
        -:  140:	  else    //card is not in the set choosen for the game
        -:  141:	    {
      145:  142:	      state->supplyCount[i] = -1;
        -:  143:	    }
        -:  144:	}
        -:  145:
        -:  146:    }
        -:  147:
        -:  148:  ////////////////////////
        -:  149:  //supply intilization complete
        -:  150:
        -:  151:  //set player decks
        3:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
        2:  154:      state->deckCount[i] = 0;
        8:  155:      for (j = 0; j < 3; j++)
        -:  156:	{
        6:  157:	  state->deck[i][j] = estate;
        6:  158:	  state->deckCount[i]++;
        -:  159:	}
       16:  160:      for (j = 3; j < 10; j++)
        -:  161:	{
       14:  162:	  state->deck[i][j] = copper;
       14:  163:	  state->deckCount[i]++;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //shuffle player decks
        3:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        2:  170:      if ( shuffle(i, state) < 0 )
        -:  171:	{
    #####:  172:	  return -1;
        -:  173:	}
        -:  174:    }
        -:  175:
        -:  176:  //draw player hands
        3:  177:  for (i = 0; i < numPlayers; i++)
        -:  178:    {
        -:  179:      //initialize hand size to zero
        2:  180:      state->handCount[i] = 0;
        2:  181:      state->discardCount[i] = 0;
        -:  182:      //draw 5 cards
        -:  183:      // for (j = 0; j < 5; j++)
        -:  184:      //	{
        -:  185:      //	  drawCard(i, state);
        -:  186:      //	}
        -:  187:    }
        -:  188:
        -:  189:  //set embargo tokens to 0 for all supply piles
       28:  190:  for (i = 0; i <= treasure_map; i++)
        -:  191:    {
       27:  192:      state->embargoTokens[i] = 0;
        -:  193:    }
        -:  194:
        -:  195:  //initialize first player's turn
        1:  196:  state->outpostPlayed = 0;
        1:  197:  state->phase = 0;
        1:  198:  state->numActions = 1;
        1:  199:  state->numBuys = 1;
        1:  200:  state->playedCardCount = 0;
        1:  201:  state->whoseTurn = 0;
        1:  202:  state->handCount[state->whoseTurn] = 0;
        -:  203:  //int it; move to top
        -:  204:
        -:  205:  //Moved draw cards to here, only drawing at the start of a turn
        6:  206:  for (it = 0; it < 5; it++){
        5:  207:    drawCard(state->whoseTurn, state);
        -:  208:  }
        -:  209:
        1:  210:  updateCoins(state->whoseTurn, state, 0);
        -:  211:
        1:  212:  return 0;
        -:  213:}
        -:  214:
        2:  215:int shuffle(int player, struct gameState *state) {
        -:  216:
        -:  217:
        -:  218:  int newDeck[MAX_DECK];
        2:  219:  int newDeckPos = 0;
        -:  220:  int card;
        -:  221:  int i;
        -:  222:
        2:  223:  if (state->deckCount[player] < 1)
    #####:  224:    return -1;
        2:  225:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  226:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  227:
       24:  228:  while (state->deckCount[player] > 0) {
       20:  229:    card = floor(Random() * state->deckCount[player]);
       20:  230:    newDeck[newDeckPos] = state->deck[player][card];
       20:  231:    newDeckPos++;
       76:  232:    for (i = card; i < state->deckCount[player]-1; i++) {
       56:  233:      state->deck[player][i] = state->deck[player][i+1];
        -:  234:    }
       20:  235:    state->deckCount[player]--;
        -:  236:  }
       22:  237:  for (i = 0; i < newDeckPos; i++) {
       20:  238:    state->deck[player][i] = newDeck[i];
       20:  239:    state->deckCount[player]++;
        -:  240:  }
        -:  241:
        2:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:  int card;
    #####:  248:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  249:
        -:  250:  //check if it is the right phase
    #####:  251:  if (state->phase != 0)
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //check if player has enough actions
    #####:  257:  if ( state->numActions < 1 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //get card played
    #####:  263:  card = handCard(handPos, state);
        -:  264:
        -:  265:  //check if selected card is an action
    #####:  266:  if ( card < adventurer || card > treasure_map )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //play card
    #####:  272:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  273:    {
    #####:  274:      return -1;
        -:  275:    }
        -:  276:
        -:  277:  //reduce number of actions
    #####:  278:  state->numActions--;
        -:  279:
        -:  280:  //update coins (Treasure cards may be added with card draws)
    #####:  281:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:  return 0;
        -:  284:}
        -:  285:
    #####:  286:int buyCard(int supplyPos, struct gameState *state) {
        -:  287:  int who;
        -:  288:  if (DEBUG){
        -:  289:    printf("Entering buyCard...\n");
        -:  290:  }
        -:  291:
        -:  292:  // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:  who = state->whoseTurn;
        -:  295:
    #####:  296:  if (state->numBuys < 1){
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have any buys left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (supplyCount(supplyPos, state) <1){
        -:  301:    if (DEBUG)
        -:  302:      printf("There are not any of that type of card left\n");
    #####:  303:    return -1;
    #####:  304:  } else if (state->coins < getCost(supplyPos)){
        -:  305:    if (DEBUG)
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  } else {
    #####:  309:    state->phase=1;
        -:  310:    //state->supplyCount[supplyPos]--;
    #####:  311:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  312:
    #####:  313:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  314:    state->numBuys--;
        -:  315:    if (DEBUG)
        -:  316:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  317:  }
        -:  318:
        -:  319:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  320:  //state->discardCount[who]++;
        -:  321:
    #####:  322:  return 0;
        -:  323:}
        -:  324:
    #####:  325:int numHandCards(struct gameState *state) {
    #####:  326:  return state->handCount[ whoseTurn(state) ];
        -:  327:}
        -:  328:
    #####:  329:int handCard(int handPos, struct gameState *state) {
    #####:  330:  int currentPlayer = whoseTurn(state);
    #####:  331:  return state->hand[currentPlayer][handPos];
        -:  332:}
        -:  333:
        5:  334:int supplyCount(int card, struct gameState *state) {
        5:  335:  return state->supplyCount[card];
        -:  336:}
        -:  337:
    #####:  338:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  339:  int i;
    #####:  340:  int count = 0;
        -:  341:
    #####:  342:  for (i = 0; i < state->deckCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->deck[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->handCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->hand[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  for (i = 0; i < state->discardCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->discard[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  return count;
        -:  358:}
        -:  359:
    #####:  360:int whoseTurn(struct gameState *state) {
    #####:  361:  return state->whoseTurn;
        -:  362:}
        -:  363:
    #####:  364:int endTurn(struct gameState *state) {
        -:  365:  int k;
        -:  366:  int i;
    #####:  367:  int currentPlayer = whoseTurn(state);
        -:  368:
        -:  369:  //Discard hand
    #####:  370:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  371:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  372:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  373:  }
    #####:  374:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  375:
        -:  376:  //Code for determining the player
    #####:  377:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  378:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  379:  }
        -:  380:  else{
    #####:  381:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:  }
        -:  383:
    #####:  384:  state->outpostPlayed = 0;
    #####:  385:  state->phase = 0;
    #####:  386:  state->numActions = 1;
    #####:  387:  state->coins = 0;
    #####:  388:  state->numBuys = 1;
    #####:  389:  state->playedCardCount = 0;
    #####:  390:  state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:  //int k; move to top
        -:  393:  //Next player draws hand
    #####:  394:  for (k = 0; k < 5; k++){
    #####:  395:    drawCard(state->whoseTurn, state);//Draw a card
        -:  396:  }
        -:  397:
        -:  398:  //Update money
    #####:  399:  updateCoins(state->whoseTurn, state , 0);
        -:  400:
    #####:  401:  return 0;
        -:  402:}
        -:  403:
    #####:  404:int isGameOver(struct gameState *state) {
        -:  405:  int i;
        -:  406:  int j;
        -:  407:
        -:  408:  //if stack of Province cards is empty, the game ends
    #####:  409:  if (state->supplyCount[province] == 0)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  //if three supply pile are at 0, the game ends
    #####:  415:  j = 0;
    #####:  416:  for (i = 0; i < 25; i++)
        -:  417:    {
    #####:  418:      if (state->supplyCount[i] == 0)
        -:  419:	{
    #####:  420:	  j++;
        -:  421:	}
        -:  422:    }
    #####:  423:  if ( j >= 3)
        -:  424:    {
    #####:  425:      return 1;
        -:  426:    }
        -:  427:
    #####:  428:  return 0;
        -:  429:}
        -:  430:
    #####:  431:int scoreFor (int player, struct gameState *state) {
        -:  432:
        -:  433:  int i;
    #####:  434:  int score = 0;
        -:  435:  //score from hand
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from discard
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        -:  457:  //score from deck
    #####:  458:  for (i = 0; i < state->discardCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  461:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  463:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  464:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  465:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  466:    }
        -:  467:
    #####:  468:  return score;
        -:  469:}
        -:  470:
    #####:  471:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  472:  int i;
        -:  473:  int j;
        -:  474:  int highScore;
        -:  475:  int currentPlayer;
        -:  476:
        -:  477:  //get score for each player
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      //set unused player scores to -9999
    #####:  481:      if (i >= state->numPlayers)
        -:  482:	{
    #####:  483:	  players[i] = -9999;
        -:  484:	}
        -:  485:      else
        -:  486:	{
    #####:  487:	  players[i] = scoreFor (i, state);
        -:  488:	}
        -:  489:    }
        -:  490:
        -:  491:  //find highest score
    #####:  492:  j = 0;
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if (players[i] > players[j])
        -:  496:	{
    #####:  497:	  j = i;
        -:  498:	}
        -:  499:    }
    #####:  500:  highScore = players[j];
        -:  501:
        -:  502:  //add 1 to players who had less turns
    #####:  503:  currentPlayer = whoseTurn(state);
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] == highScore && i > currentPlayer )
        -:  507:	{
    #####:  508:	  players[i]++;
        -:  509:	}
        -:  510:    }
        -:  511:
        -:  512:  //find new highest score
    #####:  513:  j = 0;
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] > players[j] )
        -:  517:	{
    #####:  518:	  j = i;
        -:  519:	}
        -:  520:    }
    #####:  521:  highScore = players[j];
        -:  522:
        -:  523:  //set winners in array to 1 and rest to 0
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] == highScore )
        -:  527:	{
    #####:  528:	  players[i] = 1;
        -:  529:	}
        -:  530:      else
        -:  531:	{
    #####:  532:	  players[i] = 0;
        -:  533:	}
        -:  534:    }
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
        5:  539:int drawCard(int player, struct gameState *state)
        -:  540:{	int count;
        -:  541:  int deckCounter;
        5:  542:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
    #####:  547:    for (i = 0; i < state->discardCount[player];i++){
    #####:  548:      state->deck[player][i] = state->discard[player][i];
    #####:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
    #####:  552:    state->deckCount[player] = state->discardCount[player];
    #####:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
    #####:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
    #####:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
    #####:  565:    count = state->handCount[player];//Get current player's hand count
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
    #####:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
    #####:  573:    if (deckCounter == 0)
    #####:  574:      return -1;
        -:  575:
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
        -:  581:  else{
        5:  582:    int count = state->handCount[player];//Get current hand count for player
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
        5:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  590:    state->deckCount[player]--;
        5:  591:    state->handCount[player]++;//Increment hand count
        -:  592:  }
        -:  593:
        5:  594:  return 0;
        -:  595:}
        -:  596:
    #####:  597:int getCost(int cardNumber)
        -:  598:{
    #####:  599:  switch( cardNumber )
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
        -:  603:    case estate:
    #####:  604:      return 2;
        -:  605:    case duchy:
    #####:  606:      return 5;
        -:  607:    case province:
    #####:  608:      return 8;
        -:  609:    case copper:
    #####:  610:      return 0;
        -:  611:    case silver:
    #####:  612:      return 3;
        -:  613:    case gold:
    #####:  614:      return 6;
        -:  615:    case adventurer:
    #####:  616:      return 6;
        -:  617:    case council_room:
    #####:  618:      return 5;
        -:  619:    case feast:
    #####:  620:      return 4;
        -:  621:    case gardens:
    #####:  622:      return 4;
        -:  623:    case mine:
    #####:  624:      return 5;
        -:  625:    case remodel:
    #####:  626:      return 4;
        -:  627:    case smithy:
    #####:  628:      return 4;
        -:  629:    case village:
    #####:  630:      return 3;
        -:  631:    case baron:
    #####:  632:      return 4;
        -:  633:    case great_hall:
    #####:  634:      return 3;
        -:  635:    case minion:
    #####:  636:      return 5;
        -:  637:    case steward:
    #####:  638:      return 3;
        -:  639:    case tribute:
    #####:  640:      return 5;
        -:  641:    case ambassador:
    #####:  642:      return 3;
        -:  643:    case cutpurse:
    #####:  644:      return 4;
        -:  645:    case embargo:
    #####:  646:      return 2;
        -:  647:    case outpost:
    #####:  648:      return 5;
        -:  649:    case salvager:
    #####:  650:      return 4;
        -:  651:    case sea_hag:
    #####:  652:      return 4;
        -:  653:    case treasure_map:
    #####:  654:      return 4;
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
        -:  658:}
        -:  659:
    #####:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int x;
        -:  665:  int index;
    #####:  666:  int currentPlayer = whoseTurn(state);
    #####:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    #####:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    #####:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:
        -:  675:
        -:  676:  //uses switch to select card and perform actions
    #####:  677:  switch( card ) {
        -:  678:
        -:  679:    case adventurer:
    #####:  680:      adventurer_refactor(state, currentPlayer, temphand);
    #####:  681:      return 0;
        -:  682:
        -:  683:    case council_room:
        -:  684:      //+4 Cards
    #####:  685:      for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:      //+1 Buy
    #####:  691:      state->numBuys++;
        -:  692:
        -:  693:      //Each other player draws a card
    #####:  694:      for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:	  if ( i != currentPlayer )
        -:  697:	    {
    #####:  698:	      drawCard(i, state);
        -:  699:	    }
        -:  700:	}
        -:  701:
        -:  702:      //put played card in played card pile
    #####:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:      return 0;
        -:  706:
        -:  707:    case feast:
        -:  708:      //gain card with cost up to 5
        -:  709:      //Backup hand
    #####:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
    #####:  717:      updateCoins(currentPlayer, state, 5);
    #####:  718:      x = 1;//Condition to loop on
    #####:  719:      while( x == 1) {//Buy one card
    #####:  720:	if (supplyCount(choice1, state) <= 0){
        -:  721:	  if (DEBUG)
        -:  722:	    printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:	  }
        -:  727:	}
    #####:  728:	else if (state->coins < getCost(choice1)){
    #####:  729:	  printf("That card is too expensive!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:	  }
        -:  734:	}
        -:  735:	else{
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
    #####:  741:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  742:	  x = 0;//No more buying cards
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
        -:  748:	}
        -:  749:      }
        -:  750:
        -:  751:      //Reset Hand
    #####:  752:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  753:	state->hand[currentPlayer][i] = temphand[i];
    #####:  754:	temphand[i] = -1;
        -:  755:      }
        -:  756:      //Reset Hand
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case gardens:
    #####:  761:      return -1;
        -:  762:
        -:  763:    case mine:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if (choice2 > treasure_map || choice2 < curse)
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 2, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case remodel:
    #####:  799:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      gainCard(choice2, state, 0, currentPlayer);
        -:  807:
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
        -:  810:
        -:  811:      //discard trashed card
    #####:  812:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:	{
    #####:  814:	  if (state->hand[currentPlayer][i] == j)
        -:  815:	    {
    #####:  816:	      discardCard(i, currentPlayer, state, 0);
    #####:  817:	      break;
        -:  818:	    }
        -:  819:	}
        -:  820:
        -:  821:
    #####:  822:      return 0;
        -:  823:
        -:  824:    case smithy:
    #####:  825:      smithy_refactor(state, currentPlayer, handPos);
    #####:  826:      return 0;
        -:  827:
        -:  828:    case village:
        -:  829:      //+1 Card
    #####:  830:      drawCard(currentPlayer, state);
        -:  831:
        -:  832:      //+2 Actions
    #####:  833:      state->numActions = state->numActions + 2;
        -:  834:
        -:  835:      //discard played card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
    #####:  837:      return 0;
        -:  838:
        -:  839:    case baron:
    #####:  840:      baron_refactor(state, currentPlayer, choice1);
    #####:  841:      return 0;
        -:  842:
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:
        -:  854:    case minion:
    #####:  855:      minion_refactor(state, currentPlayer, handPos, choice1, choice2);
    #####:  856:      return 0;
        -:  857:
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
    #####:  863:	  drawCard(currentPlayer, state);
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
        -:  875:	}
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  909:	}
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }
        -:  917:
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  930:	  drawCard(currentPlayer, state);
    #####:  931:	  drawCard(currentPlayer, state);
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:
    #####:  938:      return 0;
        -:  939:
        -:  940:    case ambassador:
    #####:  941:      j = 0;		//used to check if player has enough cards to discard
        -:  942:
    #####:  943:      if (choice2 > 2 || choice2 < 0)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice1 == handPos)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  956:	    {
    #####:  957:	      j++;
        -:  958:	    }
        -:  959:	}
    #####:  960:      if (j < choice2)
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      if (DEBUG)
        -:  966:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  967:
        -:  968:      //increase supply count for choosen card by amount being discarded
    #####:  969:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  970:
        -:  971:      //each other player gains a copy of revealed card
    #####:  972:      for (i = 0; i < state->numPlayers; i++)
        -:  973:	{
    #####:  974:	  if (i != currentPlayer)
        -:  975:	    {
    #####:  976:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:      //trash copies of cards returned to supply
    #####:  984:      for (j = 0; j < choice2; j++)
        -:  985:	{
    #####:  986:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:	    {
    #####:  988:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  989:		{
    #####:  990:		  discardCard(i, currentPlayer, state, 1);
    #####:  991:		  break;
        -:  992:		}
        -:  993:	    }
        -:  994:	}
        -:  995:
    #####:  996:      return 0;
        -:  997:
        -:  998:    case cutpurse:
    #####:  999:      cutpurse_refactor(state, currentPlayer, handPos);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:
        -: 1003:    case embargo:
        -: 1004:      //+2 Coins
    #####: 1005:      state->coins = state->coins + 2;
        -: 1006:
        -: 1007:      //see if selected pile is in play
    #####: 1008:      if ( state->supplyCount[choice1] == -1 )
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      //add embargo token to selected supply pile
    #####: 1014:      state->embargoTokens[choice1]++;
        -: 1015:
        -: 1016:      //trash card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case outpost:
        -: 1021:      //set outpost flag
    #####: 1022:      state->outpostPlayed++;
        -: 1023:
        -: 1024:      //discard card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case salvager:
        -: 1029:      //+1 buy
    #####: 1030:      state->numBuys++;
        -: 1031:
    #####: 1032:      if (choice1)
        -: 1033:	{
        -: 1034:	  //gain coins equal to trashed card
    #####: 1035:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1036:	  //trash card
    #####: 1037:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case sea_hag:
    #####: 1045:      for (i = 0; i < state->numPlayers; i++){
    #####: 1046:	if (i != currentPlayer){
    #####: 1047:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1048:	  state->discardCount[i]++;
    #####: 1049:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1050:	}
        -: 1051:      }
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:    case treasure_map:
        -: 1055:      //search hand for another treasure_map
    #####: 1056:      index = -1;
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:	{
    #####: 1059:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1060:	    {
    #####: 1061:	      index = i;
    #####: 1062:	      break;
        -: 1063:	    }
        -: 1064:	}
    #####: 1065:      if (index > -1)
        -: 1066:	{
        -: 1067:	  //trash both treasure cards
    #####: 1068:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1069:	  discardCard(index, currentPlayer, state, 1);
        -: 1070:
        -: 1071:	  //gain 4 Gold cards
    #####: 1072:	  for (i = 0; i < 4; i++)
        -: 1073:	    {
    #####: 1074:	      gainCard(gold, state, 1, currentPlayer);
        -: 1075:	    }
        -: 1076:
        -: 1077:	  //return success
    #####: 1078:	  return 1;
        -: 1079:	}
        -: 1080:
        -: 1081:      //no second treasure_map found in hand
    #####: 1082:      return -1;
        -: 1083:    }
        -: 1084:
    #####: 1085:  return -1;
        -: 1086:}
        -: 1087:
        -: 1088:/*******************************************************************************
        -: 1089:* Description: adventurer_refactor function
        -: 1090:*******************************************************************************/
        -: 1091:
    #####: 1092:void adventurer_refactor(struct gameState *state, int currentPlayer, int *temphand) {
    #####: 1093:  int drawntreasure = 0,
        -: 1094:      cardDrawn,
    #####: 1095:      z = 0;
        -: 1096:
    #####: 1097:  while(drawntreasure > 2) {
    #####: 1098:    if(state->deckCount[currentPlayer] < 1) {                                   //if the deck is empty we need to shuffle discard and add to deck
    #####: 1099:      shuffle(currentPlayer, state);
        -: 1100:    }
    #####: 1101:    drawCard(currentPlayer, state);
    #####: 1102:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];  //top card of hand is most recently drawn card.
    #####: 1103:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1104:      drawntreasure++;
        -: 1105:    } else {
    #####: 1106:      temphand[z]=cardDrawn;
    #####: 1107:      state->handCount[currentPlayer]--;                                        //this should just remove the top card (the most recently drawn one).
    #####: 1108:      z++;
        -: 1109:    }
        -: 1110:  }
    #####: 1111:  while(z - 1 >= 0) {
    #####: 1112:    state->discard[currentPlayer][state->discardCount[currentPlayer] ++]
    #####: 1113:    = temphand[z - 1];                                                          // discard all cards in play that have been drawn
    #####: 1114:    z = z - 1;
        -: 1115:  }
    #####: 1116:}
        -: 1117:
        -: 1118:/*******************************************************************************
        -: 1119:* Description: smithy_refactor function
        -: 1120:*******************************************************************************/
        -: 1121:
    #####: 1122:void smithy_refactor(struct gameState *state, int currentPlayer, int handPos) {
        -: 1123:  //+3 Cards
    #####: 1124:  int i = 0;
    #####: 1125:  for (i = 0; i < 10; i++) {
    #####: 1126:    drawCard(currentPlayer, state);
        -: 1127:  }
        -: 1128:  //discard card from hand
    #####: 1129:  discardCard(handPos, currentPlayer, state, 0);
        -: 1130:  // return 0;
    #####: 1131:}
        -: 1132:
        -: 1133:/*******************************************************************************
        -: 1134:* Description: baron_refactor function
        -: 1135:*******************************************************************************/
        -: 1136:
    #####: 1137:void baron_refactor(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1138:  state->numBuys ++;                                                            //Increase buys by 1!
    #####: 1139:  if (choice1 > 0) {                                                            //Boolean true or going to discard an estate
    #####: 1140:    int p = 0;                                                                  //Iterator for hand!
    #####: 1141:    int card_not_discarded = 1;                                                 //Flag for discard set!
    #####: 1142:    while(card_not_discarded) {
    #####: 1143:      if (state->hand[currentPlayer][p] == estate) {                            //Found an estate card!
    #####: 1144:        state->coins += 4;                                                      //Add 4 coins to the amount of coins
    #####: 1145:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1146:        state->discardCount[currentPlayer] ++;
    #####: 1147:        for (;p < state->handCount[currentPlayer]; p ++) {
    #####: 1148:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1149:        }
    #####: 1150:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1151:        state->handCount[currentPlayer]--;
    #####: 1152:        card_not_discarded = 0;                                                 //Exit the loop
    #####: 1153:      } else if (p > state->handCount[currentPlayer]) {
        -: 1154:        if(DEBUG) {
        -: 1155:          printf("No estate cards in your hand, invalid choice\n");
        -: 1156:          printf("Must gain an estate if there are any\n");
        -: 1157:        }
    #####: 1158:        if (supplyCount(estate, state) > 0) {
    #####: 1159:          gainCard(estate, state, 0, currentPlayer);
    #####: 1160:          state->supplyCount[estate]--;                                         //Decrement estates
    #####: 1161:          if (supplyCount(estate, state) == 0) {
    #####: 1162:            isGameOver(state);
        -: 1163:          }
        -: 1164:        }
    #####: 1165:        card_not_discarded = 0;                                                 //Exit the loop
        -: 1166:      } else {
    #####: 1167:        p ++;                                                                   //Next card
        -: 1168:      }
        -: 1169:    }
        -: 1170:  } else {
    #####: 1171:    if (supplyCount(estate, state) > 0) {
    #####: 1172:      gainCard(estate, state, 0, currentPlayer);                                //Gain an estate
    #####: 1173:      state->supplyCount[estate]--;                                             //Decrement Estates
    #####: 1174:      if (supplyCount(estate, state) == 0){
    #####: 1175:        isGameOver(state);
        -: 1176:      }
        -: 1177:    }
        -: 1178:  }
    #####: 1179:}
        -: 1180:
        -: 1181:/*******************************************************************************
        -: 1182:* Description: minion_refactor function
        -: 1183:*******************************************************************************/
        -: 1184:
    #####: 1185:void minion_refactor(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
    #####: 1186:  int i = 0,
    #####: 1187:      j = 0;
        -: 1188:  //+1 action
    #####: 1189:  state->numActions++;
        -: 1190:
        -: 1191:  //discard card from hand
    #####: 1192:  discardCard(handPos, currentPlayer, state, 0);
        -: 1193:  //+2 coins
    #####: 1194:  if (choice2) {
    #####: 1195:    state->coins = state->coins + 2;
    #####: 1196:  } else if (choice1) {                                                         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1197:    //discard hand
    #####: 1198:    while(numHandCards(state) > 0) {
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:    }
        -: 1201:    //draw 4
    #####: 1202:    for (i = 0; i < 4; i++) {
    #####: 1203:      drawCard(currentPlayer, state);
        -: 1204:    }
        -: 1205:    //other players discard hand and redraw if hand size > 4
    #####: 1206:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:      if (i != currentPlayer) {
    #####: 1208:        if ( state->handCount[i] > 4 ) {
        -: 1209:          //discard hand
    #####: 1210:          while( state->handCount[i] > 0 ) {
    #####: 1211:            discardCard(handPos, i, state, 0);
        -: 1212:          }
        -: 1213:          //draw 4
    #####: 1214:          for (j = 0; j < 4; j++) {
    #####: 1215:            drawCard(i, state);
        -: 1216:          }
        -: 1217:        }
        -: 1218:      }
        -: 1219:    }
        -: 1220:  }
    #####: 1221:}
        -: 1222:
        -: 1223:/*******************************************************************************
        -: 1224:* Description: cutpurse_refactor function
        -: 1225:*******************************************************************************/
        -: 1226:
    #####: 1227:void cutpurse_refactor(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1228:  int i = 0,
    #####: 1229:      j = 0,
    #####: 1230:      k = 0;
    #####: 1231:  updateCoins(currentPlayer, state, 2);
    #####: 1232:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1233:    if (j != currentPlayer) {
    #####: 1234:      for (j = 0; j < state->handCount[i]; j++) {
    #####: 1235:        if (state->hand[i][j] == copper) {
    #####: 1236:          discardCard(j, i, state, 0);
    #####: 1237:          break;
        -: 1238:        }
    #####: 1239:        if (j == state->handCount[i]) {
    #####: 1240:          for (k = 0; k < state->handCount[i]; k++) {
        -: 1241:            if (DEBUG) {
        -: 1242:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:            }
        -: 1244:          }
    #####: 1245:          break;
        -: 1246:        }
        -: 1247:      }
        -: 1248:    }
        -: 1249:  }
        -: 1250:  //discard played card from hand
    #####: 1251:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:}
        -: 1253:
    #####: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:  //if card is not trashed, added to Played pile
    #####: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:  //set played card to -1
    #####: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:  //remove card from player's hand
    #####: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    #####: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    #####: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    #####: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
    #####: 1289:  return 0;
        -: 1290:}
        -: 1291:
        5: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
        1: 1299:      return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
        4: 1307:  if (toFlag == 1)
        -: 1308:    {
        1: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1310:      state->deckCount[player]++;
        -: 1311:    }
        3: 1312:  else if (toFlag == 2)
        -: 1313:    {
        1: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
        2: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:  //decrease number in supply pile
        4: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:
        4: 1326:  return 0;
        -: 1327:}
        -: 1328:
        1: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:
        -: 1333:  //reset coin count
        1: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
        6: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
        5: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
        4: 1341:	  state->coins += 1;
        -: 1342:	}
        1: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
        1: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}
        -: 1351:    }
        -: 1352:
        -: 1353:  //add bonus
        1: 1354:  state->coins += bonus;
        -: 1355:
        1: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
cardtest1.c:
-------------------- Testing: adventure_Card()---------------------

Player0 gains 2 cards
Test: FAILED

Player0 gains 2 treasure cards
Test: FAILED

No change to victory card piles
Province Pile
Test: PASSED
Duchy Pile
Test: PASSED
Estate Pile
Test: PASSED

No change to kingdom card piles
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED

Player1 was not affected
Hand Count
Test: PASSED
Deck Count
Test: PASSED

TEST FAILED
Fails: 2
File 'cardtest1.c'
Lines executed:98.21% of 56
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:18.42% of 570
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** PREPROCESSOR DIRECTIVES
        -:    3:*******************************************************************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:/*******************************************************************************
        -:   13:** FUNCTION DECLARATIONS
        -:   14:*******************************************************************************/
        -:   15:
        -:   16:void adventurer_refactor(struct gameState*, int, int*);                         // Declare function for adventurer card functionality
        -:   17:void smithy_refactor(struct gameState*, int, int);                              // Declare function for smithy card functionality
        -:   18:void baron_refactor(struct gameState*, int, int);                               // Declare function for baron card functionality
        -:   19:void minion_refactor(struct gameState*, int, int, int, int);                    // Declare function for minion card functionality
        -:   20:void cutpurse_refactor(struct gameState*, int, int);                            // Declare function for cutpurse card functionality
        -:   21:
       30:   22:int compare(const void* a, const void* b) {
       30:   23:  if (*(int*)a > *(int*)b)
    #####:   24:    return 1;
       30:   25:  if (*(int*)a < *(int*)b)
        8:   26:    return -1;
       22:   27:  return 0;
        -:   28:}
        -:   29:
    #####:   30:struct gameState* newGame() {
    #####:   31:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   32:  return g;
        -:   33:}
        -:   34:
    #####:   35:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   36:		  int k8, int k9, int k10) {
    #####:   37:  int* k = malloc(10 * sizeof(int));
    #####:   38:  k[0] = k1;
    #####:   39:  k[1] = k2;
    #####:   40:  k[2] = k3;
    #####:   41:  k[3] = k4;
    #####:   42:  k[4] = k5;
    #####:   43:  k[5] = k6;
    #####:   44:  k[6] = k7;
    #####:   45:  k[7] = k8;
    #####:   46:  k[8] = k9;
    #####:   47:  k[9] = k10;
    #####:   48:  return k;
        -:   49:}
        -:   50:
        1:   51:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        1:   58:  SelectStream(1);
        1:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        1:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        1:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:  //check selected kingdom cards are different
       11:   71:  for (i = 0; i < 10; i++)
        -:   72:    {
      110:   73:      for (j = 0; j < 10; j++)
        -:   74:        {
      100:   75:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:	    {
    #####:   77:	      return -1;
        -:   78:	    }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:
        -:   83:  //initialize supply
        -:   84:  ///////////////////////////////
        -:   85:
        -:   86:  //set number of Curse cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[curse] = 10;
        -:   90:    }
    #####:   91:  else if (numPlayers == 3)
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 20;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 30;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Victory cards
        1:  101:  if (numPlayers == 2)
        -:  102:    {
        1:  103:      state->supplyCount[estate] = 8;
        1:  104:      state->supplyCount[duchy] = 8;
        1:  105:      state->supplyCount[province] = 8;
        -:  106:    }
        -:  107:  else
        -:  108:    {
    #####:  109:      state->supplyCount[estate] = 12;
    #####:  110:      state->supplyCount[duchy] = 12;
    #####:  111:      state->supplyCount[province] = 12;
        -:  112:    }
        -:  113:
        -:  114:  //set number of Treasure cards
        1:  115:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  116:  state->supplyCount[silver] = 40;
        1:  117:  state->supplyCount[gold] = 30;
        -:  118:
        -:  119:  //set number of Kingdom cards
       21:  120:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  121:    {
      165:  122:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  123:	{
      155:  124:	  if (kingdomCards[j] == i)
        -:  125:	    {
        -:  126:	      //check if card is a 'Victory' Kingdom card
       10:  127:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:		{
        4:  129:		  if (numPlayers == 2){
        2:  130:		    state->supplyCount[i] = 8;
        -:  131:		  }
    #####:  132:		  else{ state->supplyCount[i] = 12; }
        -:  133:		}
        -:  134:	      else
        -:  135:		{
        8:  136:		  state->supplyCount[i] = 10;
        -:  137:		}
       10:  138:	      break;
        -:  139:	    }
        -:  140:	  else    //card is not in the set choosen for the game
        -:  141:	    {
      145:  142:	      state->supplyCount[i] = -1;
        -:  143:	    }
        -:  144:	}
        -:  145:
        -:  146:    }
        -:  147:
        -:  148:  ////////////////////////
        -:  149:  //supply intilization complete
        -:  150:
        -:  151:  //set player decks
        3:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
        2:  154:      state->deckCount[i] = 0;
        8:  155:      for (j = 0; j < 3; j++)
        -:  156:	{
        6:  157:	  state->deck[i][j] = estate;
        6:  158:	  state->deckCount[i]++;
        -:  159:	}
       16:  160:      for (j = 3; j < 10; j++)
        -:  161:	{
       14:  162:	  state->deck[i][j] = copper;
       14:  163:	  state->deckCount[i]++;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //shuffle player decks
        3:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        2:  170:      if ( shuffle(i, state) < 0 )
        -:  171:	{
    #####:  172:	  return -1;
        -:  173:	}
        -:  174:    }
        -:  175:
        -:  176:  //draw player hands
        3:  177:  for (i = 0; i < numPlayers; i++)
        -:  178:    {
        -:  179:      //initialize hand size to zero
        2:  180:      state->handCount[i] = 0;
        2:  181:      state->discardCount[i] = 0;
        -:  182:      //draw 5 cards
        -:  183:      // for (j = 0; j < 5; j++)
        -:  184:      //	{
        -:  185:      //	  drawCard(i, state);
        -:  186:      //	}
        -:  187:    }
        -:  188:
        -:  189:  //set embargo tokens to 0 for all supply piles
       28:  190:  for (i = 0; i <= treasure_map; i++)
        -:  191:    {
       27:  192:      state->embargoTokens[i] = 0;
        -:  193:    }
        -:  194:
        -:  195:  //initialize first player's turn
        1:  196:  state->outpostPlayed = 0;
        1:  197:  state->phase = 0;
        1:  198:  state->numActions = 1;
        1:  199:  state->numBuys = 1;
        1:  200:  state->playedCardCount = 0;
        1:  201:  state->whoseTurn = 0;
        1:  202:  state->handCount[state->whoseTurn] = 0;
        -:  203:  //int it; move to top
        -:  204:
        -:  205:  //Moved draw cards to here, only drawing at the start of a turn
        6:  206:  for (it = 0; it < 5; it++){
        5:  207:    drawCard(state->whoseTurn, state);
        -:  208:  }
        -:  209:
        1:  210:  updateCoins(state->whoseTurn, state, 0);
        -:  211:
        1:  212:  return 0;
        -:  213:}
        -:  214:
        2:  215:int shuffle(int player, struct gameState *state) {
        -:  216:
        -:  217:
        -:  218:  int newDeck[MAX_DECK];
        2:  219:  int newDeckPos = 0;
        -:  220:  int card;
        -:  221:  int i;
        -:  222:
        2:  223:  if (state->deckCount[player] < 1)
    #####:  224:    return -1;
        2:  225:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  226:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  227:
       24:  228:  while (state->deckCount[player] > 0) {
       20:  229:    card = floor(Random() * state->deckCount[player]);
       20:  230:    newDeck[newDeckPos] = state->deck[player][card];
       20:  231:    newDeckPos++;
       76:  232:    for (i = card; i < state->deckCount[player]-1; i++) {
       56:  233:      state->deck[player][i] = state->deck[player][i+1];
        -:  234:    }
       20:  235:    state->deckCount[player]--;
        -:  236:  }
       22:  237:  for (i = 0; i < newDeckPos; i++) {
       20:  238:    state->deck[player][i] = newDeck[i];
       20:  239:    state->deckCount[player]++;
        -:  240:  }
        -:  241:
        2:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:  int card;
    #####:  248:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  249:
        -:  250:  //check if it is the right phase
    #####:  251:  if (state->phase != 0)
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //check if player has enough actions
    #####:  257:  if ( state->numActions < 1 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //get card played
    #####:  263:  card = handCard(handPos, state);
        -:  264:
        -:  265:  //check if selected card is an action
    #####:  266:  if ( card < adventurer || card > treasure_map )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //play card
    #####:  272:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  273:    {
    #####:  274:      return -1;
        -:  275:    }
        -:  276:
        -:  277:  //reduce number of actions
    #####:  278:  state->numActions--;
        -:  279:
        -:  280:  //update coins (Treasure cards may be added with card draws)
    #####:  281:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:  return 0;
        -:  284:}
        -:  285:
    #####:  286:int buyCard(int supplyPos, struct gameState *state) {
        -:  287:  int who;
        -:  288:  if (DEBUG){
        -:  289:    printf("Entering buyCard...\n");
        -:  290:  }
        -:  291:
        -:  292:  // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:  who = state->whoseTurn;
        -:  295:
    #####:  296:  if (state->numBuys < 1){
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have any buys left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (supplyCount(supplyPos, state) <1){
        -:  301:    if (DEBUG)
        -:  302:      printf("There are not any of that type of card left\n");
    #####:  303:    return -1;
    #####:  304:  } else if (state->coins < getCost(supplyPos)){
        -:  305:    if (DEBUG)
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  } else {
    #####:  309:    state->phase=1;
        -:  310:    //state->supplyCount[supplyPos]--;
    #####:  311:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  312:
    #####:  313:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  314:    state->numBuys--;
        -:  315:    if (DEBUG)
        -:  316:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  317:  }
        -:  318:
        -:  319:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  320:  //state->discardCount[who]++;
        -:  321:
    #####:  322:  return 0;
        -:  323:}
        -:  324:
    #####:  325:int numHandCards(struct gameState *state) {
    #####:  326:  return state->handCount[ whoseTurn(state) ];
        -:  327:}
        -:  328:
    #####:  329:int handCard(int handPos, struct gameState *state) {
    #####:  330:  int currentPlayer = whoseTurn(state);
    #####:  331:  return state->hand[currentPlayer][handPos];
        -:  332:}
        -:  333:
    #####:  334:int supplyCount(int card, struct gameState *state) {
    #####:  335:  return state->supplyCount[card];
        -:  336:}
        -:  337:
    #####:  338:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  339:  int i;
    #####:  340:  int count = 0;
        -:  341:
    #####:  342:  for (i = 0; i < state->deckCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->deck[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->handCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->hand[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  for (i = 0; i < state->discardCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->discard[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  return count;
        -:  358:}
        -:  359:
        1:  360:int whoseTurn(struct gameState *state) {
        1:  361:  return state->whoseTurn;
        -:  362:}
        -:  363:
    #####:  364:int endTurn(struct gameState *state) {
        -:  365:  int k;
        -:  366:  int i;
    #####:  367:  int currentPlayer = whoseTurn(state);
        -:  368:
        -:  369:  //Discard hand
    #####:  370:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  371:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  372:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  373:  }
    #####:  374:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  375:
        -:  376:  //Code for determining the player
    #####:  377:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  378:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  379:  }
        -:  380:  else{
    #####:  381:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:  }
        -:  383:
    #####:  384:  state->outpostPlayed = 0;
    #####:  385:  state->phase = 0;
    #####:  386:  state->numActions = 1;
    #####:  387:  state->coins = 0;
    #####:  388:  state->numBuys = 1;
    #####:  389:  state->playedCardCount = 0;
    #####:  390:  state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:  //int k; move to top
        -:  393:  //Next player draws hand
    #####:  394:  for (k = 0; k < 5; k++){
    #####:  395:    drawCard(state->whoseTurn, state);//Draw a card
        -:  396:  }
        -:  397:
        -:  398:  //Update money
    #####:  399:  updateCoins(state->whoseTurn, state , 0);
        -:  400:
    #####:  401:  return 0;
        -:  402:}
        -:  403:
    #####:  404:int isGameOver(struct gameState *state) {
        -:  405:  int i;
        -:  406:  int j;
        -:  407:
        -:  408:  //if stack of Province cards is empty, the game ends
    #####:  409:  if (state->supplyCount[province] == 0)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  //if three supply pile are at 0, the game ends
    #####:  415:  j = 0;
    #####:  416:  for (i = 0; i < 25; i++)
        -:  417:    {
    #####:  418:      if (state->supplyCount[i] == 0)
        -:  419:	{
    #####:  420:	  j++;
        -:  421:	}
        -:  422:    }
    #####:  423:  if ( j >= 3)
        -:  424:    {
    #####:  425:      return 1;
        -:  426:    }
        -:  427:
    #####:  428:  return 0;
        -:  429:}
        -:  430:
    #####:  431:int scoreFor (int player, struct gameState *state) {
        -:  432:
        -:  433:  int i;
    #####:  434:  int score = 0;
        -:  435:  //score from hand
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from discard
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        -:  457:  //score from deck
    #####:  458:  for (i = 0; i < state->discardCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  461:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  463:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  464:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  465:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  466:    }
        -:  467:
    #####:  468:  return score;
        -:  469:}
        -:  470:
    #####:  471:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  472:  int i;
        -:  473:  int j;
        -:  474:  int highScore;
        -:  475:  int currentPlayer;
        -:  476:
        -:  477:  //get score for each player
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      //set unused player scores to -9999
    #####:  481:      if (i >= state->numPlayers)
        -:  482:	{
    #####:  483:	  players[i] = -9999;
        -:  484:	}
        -:  485:      else
        -:  486:	{
    #####:  487:	  players[i] = scoreFor (i, state);
        -:  488:	}
        -:  489:    }
        -:  490:
        -:  491:  //find highest score
    #####:  492:  j = 0;
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if (players[i] > players[j])
        -:  496:	{
    #####:  497:	  j = i;
        -:  498:	}
        -:  499:    }
    #####:  500:  highScore = players[j];
        -:  501:
        -:  502:  //add 1 to players who had less turns
    #####:  503:  currentPlayer = whoseTurn(state);
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] == highScore && i > currentPlayer )
        -:  507:	{
    #####:  508:	  players[i]++;
        -:  509:	}
        -:  510:    }
        -:  511:
        -:  512:  //find new highest score
    #####:  513:  j = 0;
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] > players[j] )
        -:  517:	{
    #####:  518:	  j = i;
        -:  519:	}
        -:  520:    }
    #####:  521:  highScore = players[j];
        -:  522:
        -:  523:  //set winners in array to 1 and rest to 0
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] == highScore )
        -:  527:	{
    #####:  528:	  players[i] = 1;
        -:  529:	}
        -:  530:      else
        -:  531:	{
    #####:  532:	  players[i] = 0;
        -:  533:	}
        -:  534:    }
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
        5:  539:int drawCard(int player, struct gameState *state)
        -:  540:{	int count;
        -:  541:  int deckCounter;
        5:  542:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
    #####:  547:    for (i = 0; i < state->discardCount[player];i++){
    #####:  548:      state->deck[player][i] = state->discard[player][i];
    #####:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
    #####:  552:    state->deckCount[player] = state->discardCount[player];
    #####:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
    #####:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
    #####:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
    #####:  565:    count = state->handCount[player];//Get current player's hand count
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
    #####:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
    #####:  573:    if (deckCounter == 0)
    #####:  574:      return -1;
        -:  575:
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
        -:  581:  else{
        5:  582:    int count = state->handCount[player];//Get current hand count for player
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
        5:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  590:    state->deckCount[player]--;
        5:  591:    state->handCount[player]++;//Increment hand count
        -:  592:  }
        -:  593:
        5:  594:  return 0;
        -:  595:}
        -:  596:
    #####:  597:int getCost(int cardNumber)
        -:  598:{
    #####:  599:  switch( cardNumber )
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
        -:  603:    case estate:
    #####:  604:      return 2;
        -:  605:    case duchy:
    #####:  606:      return 5;
        -:  607:    case province:
    #####:  608:      return 8;
        -:  609:    case copper:
    #####:  610:      return 0;
        -:  611:    case silver:
    #####:  612:      return 3;
        -:  613:    case gold:
    #####:  614:      return 6;
        -:  615:    case adventurer:
    #####:  616:      return 6;
        -:  617:    case council_room:
    #####:  618:      return 5;
        -:  619:    case feast:
    #####:  620:      return 4;
        -:  621:    case gardens:
    #####:  622:      return 4;
        -:  623:    case mine:
    #####:  624:      return 5;
        -:  625:    case remodel:
    #####:  626:      return 4;
        -:  627:    case smithy:
    #####:  628:      return 4;
        -:  629:    case village:
    #####:  630:      return 3;
        -:  631:    case baron:
    #####:  632:      return 4;
        -:  633:    case great_hall:
    #####:  634:      return 3;
        -:  635:    case minion:
    #####:  636:      return 5;
        -:  637:    case steward:
    #####:  638:      return 3;
        -:  639:    case tribute:
    #####:  640:      return 5;
        -:  641:    case ambassador:
    #####:  642:      return 3;
        -:  643:    case cutpurse:
    #####:  644:      return 4;
        -:  645:    case embargo:
    #####:  646:      return 2;
        -:  647:    case outpost:
    #####:  648:      return 5;
        -:  649:    case salvager:
    #####:  650:      return 4;
        -:  651:    case sea_hag:
    #####:  652:      return 4;
        -:  653:    case treasure_map:
    #####:  654:      return 4;
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
        -:  658:}
        -:  659:
        1:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int x;
        -:  665:  int index;
        1:  666:  int currentPlayer = whoseTurn(state);
        1:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
        1:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
        1:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:
        -:  675:
        -:  676:  //uses switch to select card and perform actions
        1:  677:  switch( card ) {
        -:  678:
        -:  679:    case adventurer:
        1:  680:      adventurer_refactor(state, currentPlayer, temphand);
        1:  681:      return 0;
        -:  682:
        -:  683:    case council_room:
        -:  684:      //+4 Cards
    #####:  685:      for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:      //+1 Buy
    #####:  691:      state->numBuys++;
        -:  692:
        -:  693:      //Each other player draws a card
    #####:  694:      for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:	  if ( i != currentPlayer )
        -:  697:	    {
    #####:  698:	      drawCard(i, state);
        -:  699:	    }
        -:  700:	}
        -:  701:
        -:  702:      //put played card in played card pile
    #####:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:      return 0;
        -:  706:
        -:  707:    case feast:
        -:  708:      //gain card with cost up to 5
        -:  709:      //Backup hand
    #####:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
    #####:  717:      updateCoins(currentPlayer, state, 5);
    #####:  718:      x = 1;//Condition to loop on
    #####:  719:      while( x == 1) {//Buy one card
    #####:  720:	if (supplyCount(choice1, state) <= 0){
        -:  721:	  if (DEBUG)
        -:  722:	    printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:	  }
        -:  727:	}
    #####:  728:	else if (state->coins < getCost(choice1)){
    #####:  729:	  printf("That card is too expensive!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:	  }
        -:  734:	}
        -:  735:	else{
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
    #####:  741:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  742:	  x = 0;//No more buying cards
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
        -:  748:	}
        -:  749:      }
        -:  750:
        -:  751:      //Reset Hand
    #####:  752:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  753:	state->hand[currentPlayer][i] = temphand[i];
    #####:  754:	temphand[i] = -1;
        -:  755:      }
        -:  756:      //Reset Hand
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case gardens:
    #####:  761:      return -1;
        -:  762:
        -:  763:    case mine:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if (choice2 > treasure_map || choice2 < curse)
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 2, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case remodel:
    #####:  799:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      gainCard(choice2, state, 0, currentPlayer);
        -:  807:
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
        -:  810:
        -:  811:      //discard trashed card
    #####:  812:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:	{
    #####:  814:	  if (state->hand[currentPlayer][i] == j)
        -:  815:	    {
    #####:  816:	      discardCard(i, currentPlayer, state, 0);
    #####:  817:	      break;
        -:  818:	    }
        -:  819:	}
        -:  820:
        -:  821:
    #####:  822:      return 0;
        -:  823:
        -:  824:    case smithy:
    #####:  825:      smithy_refactor(state, currentPlayer, handPos);
    #####:  826:      return 0;
        -:  827:
        -:  828:    case village:
        -:  829:      //+1 Card
    #####:  830:      drawCard(currentPlayer, state);
        -:  831:
        -:  832:      //+2 Actions
    #####:  833:      state->numActions = state->numActions + 2;
        -:  834:
        -:  835:      //discard played card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
    #####:  837:      return 0;
        -:  838:
        -:  839:    case baron:
    #####:  840:      baron_refactor(state, currentPlayer, choice1);
    #####:  841:      return 0;
        -:  842:
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:
        -:  854:    case minion:
    #####:  855:      minion_refactor(state, currentPlayer, handPos, choice1, choice2);
    #####:  856:      return 0;
        -:  857:
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
    #####:  863:	  drawCard(currentPlayer, state);
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
        -:  875:	}
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  909:	}
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }
        -:  917:
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  930:	  drawCard(currentPlayer, state);
    #####:  931:	  drawCard(currentPlayer, state);
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:
    #####:  938:      return 0;
        -:  939:
        -:  940:    case ambassador:
    #####:  941:      j = 0;		//used to check if player has enough cards to discard
        -:  942:
    #####:  943:      if (choice2 > 2 || choice2 < 0)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice1 == handPos)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  956:	    {
    #####:  957:	      j++;
        -:  958:	    }
        -:  959:	}
    #####:  960:      if (j < choice2)
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      if (DEBUG)
        -:  966:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  967:
        -:  968:      //increase supply count for choosen card by amount being discarded
    #####:  969:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  970:
        -:  971:      //each other player gains a copy of revealed card
    #####:  972:      for (i = 0; i < state->numPlayers; i++)
        -:  973:	{
    #####:  974:	  if (i != currentPlayer)
        -:  975:	    {
    #####:  976:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:      //trash copies of cards returned to supply
    #####:  984:      for (j = 0; j < choice2; j++)
        -:  985:	{
    #####:  986:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:	    {
    #####:  988:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  989:		{
    #####:  990:		  discardCard(i, currentPlayer, state, 1);
    #####:  991:		  break;
        -:  992:		}
        -:  993:	    }
        -:  994:	}
        -:  995:
    #####:  996:      return 0;
        -:  997:
        -:  998:    case cutpurse:
    #####:  999:      cutpurse_refactor(state, currentPlayer, handPos);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:
        -: 1003:    case embargo:
        -: 1004:      //+2 Coins
    #####: 1005:      state->coins = state->coins + 2;
        -: 1006:
        -: 1007:      //see if selected pile is in play
    #####: 1008:      if ( state->supplyCount[choice1] == -1 )
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      //add embargo token to selected supply pile
    #####: 1014:      state->embargoTokens[choice1]++;
        -: 1015:
        -: 1016:      //trash card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case outpost:
        -: 1021:      //set outpost flag
    #####: 1022:      state->outpostPlayed++;
        -: 1023:
        -: 1024:      //discard card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case salvager:
        -: 1029:      //+1 buy
    #####: 1030:      state->numBuys++;
        -: 1031:
    #####: 1032:      if (choice1)
        -: 1033:	{
        -: 1034:	  //gain coins equal to trashed card
    #####: 1035:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1036:	  //trash card
    #####: 1037:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case sea_hag:
    #####: 1045:      for (i = 0; i < state->numPlayers; i++){
    #####: 1046:	if (i != currentPlayer){
    #####: 1047:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1048:	  state->discardCount[i]++;
    #####: 1049:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1050:	}
        -: 1051:      }
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:    case treasure_map:
        -: 1055:      //search hand for another treasure_map
    #####: 1056:      index = -1;
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:	{
    #####: 1059:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1060:	    {
    #####: 1061:	      index = i;
    #####: 1062:	      break;
        -: 1063:	    }
        -: 1064:	}
    #####: 1065:      if (index > -1)
        -: 1066:	{
        -: 1067:	  //trash both treasure cards
    #####: 1068:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1069:	  discardCard(index, currentPlayer, state, 1);
        -: 1070:
        -: 1071:	  //gain 4 Gold cards
    #####: 1072:	  for (i = 0; i < 4; i++)
        -: 1073:	    {
    #####: 1074:	      gainCard(gold, state, 1, currentPlayer);
        -: 1075:	    }
        -: 1076:
        -: 1077:	  //return success
    #####: 1078:	  return 1;
        -: 1079:	}
        -: 1080:
        -: 1081:      //no second treasure_map found in hand
    #####: 1082:      return -1;
        -: 1083:    }
        -: 1084:
    #####: 1085:  return -1;
        -: 1086:}
        -: 1087:
        -: 1088:/*******************************************************************************
        -: 1089:* Description: adventurer_refactor function
        -: 1090:*******************************************************************************/
        -: 1091:
        1: 1092:void adventurer_refactor(struct gameState *state, int currentPlayer, int *temphand) {
        1: 1093:  int drawntreasure = 0,
        -: 1094:      cardDrawn,
        1: 1095:      z = 0;
        -: 1096:
        2: 1097:  while(drawntreasure > 2) {
    #####: 1098:    if(state->deckCount[currentPlayer] < 1) {                                   //if the deck is empty we need to shuffle discard and add to deck
    #####: 1099:      shuffle(currentPlayer, state);
        -: 1100:    }
    #####: 1101:    drawCard(currentPlayer, state);
    #####: 1102:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];  //top card of hand is most recently drawn card.
    #####: 1103:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1104:      drawntreasure++;
        -: 1105:    } else {
    #####: 1106:      temphand[z]=cardDrawn;
    #####: 1107:      state->handCount[currentPlayer]--;                                        //this should just remove the top card (the most recently drawn one).
    #####: 1108:      z++;
        -: 1109:    }
        -: 1110:  }
        2: 1111:  while(z - 1 >= 0) {
    #####: 1112:    state->discard[currentPlayer][state->discardCount[currentPlayer] ++]
    #####: 1113:    = temphand[z - 1];                                                          // discard all cards in play that have been drawn
    #####: 1114:    z = z - 1;
        -: 1115:  }
        1: 1116:}
        -: 1117:
        -: 1118:/*******************************************************************************
        -: 1119:* Description: smithy_refactor function
        -: 1120:*******************************************************************************/
        -: 1121:
    #####: 1122:void smithy_refactor(struct gameState *state, int currentPlayer, int handPos) {
        -: 1123:  //+3 Cards
    #####: 1124:  int i = 0;
    #####: 1125:  for (i = 0; i < 10; i++) {
    #####: 1126:    drawCard(currentPlayer, state);
        -: 1127:  }
        -: 1128:  //discard card from hand
    #####: 1129:  discardCard(handPos, currentPlayer, state, 0);
        -: 1130:  // return 0;
    #####: 1131:}
        -: 1132:
        -: 1133:/*******************************************************************************
        -: 1134:* Description: baron_refactor function
        -: 1135:*******************************************************************************/
        -: 1136:
    #####: 1137:void baron_refactor(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1138:  state->numBuys ++;                                                            //Increase buys by 1!
    #####: 1139:  if (choice1 > 0) {                                                            //Boolean true or going to discard an estate
    #####: 1140:    int p = 0;                                                                  //Iterator for hand!
    #####: 1141:    int card_not_discarded = 1;                                                 //Flag for discard set!
    #####: 1142:    while(card_not_discarded) {
    #####: 1143:      if (state->hand[currentPlayer][p] == estate) {                            //Found an estate card!
    #####: 1144:        state->coins += 4;                                                      //Add 4 coins to the amount of coins
    #####: 1145:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1146:        state->discardCount[currentPlayer] ++;
    #####: 1147:        for (;p < state->handCount[currentPlayer]; p ++) {
    #####: 1148:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1149:        }
    #####: 1150:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1151:        state->handCount[currentPlayer]--;
    #####: 1152:        card_not_discarded = 0;                                                 //Exit the loop
    #####: 1153:      } else if (p > state->handCount[currentPlayer]) {
        -: 1154:        if(DEBUG) {
        -: 1155:          printf("No estate cards in your hand, invalid choice\n");
        -: 1156:          printf("Must gain an estate if there are any\n");
        -: 1157:        }
    #####: 1158:        if (supplyCount(estate, state) > 0) {
    #####: 1159:          gainCard(estate, state, 0, currentPlayer);
    #####: 1160:          state->supplyCount[estate]--;                                         //Decrement estates
    #####: 1161:          if (supplyCount(estate, state) == 0) {
    #####: 1162:            isGameOver(state);
        -: 1163:          }
        -: 1164:        }
    #####: 1165:        card_not_discarded = 0;                                                 //Exit the loop
        -: 1166:      } else {
    #####: 1167:        p ++;                                                                   //Next card
        -: 1168:      }
        -: 1169:    }
        -: 1170:  } else {
    #####: 1171:    if (supplyCount(estate, state) > 0) {
    #####: 1172:      gainCard(estate, state, 0, currentPlayer);                                //Gain an estate
    #####: 1173:      state->supplyCount[estate]--;                                             //Decrement Estates
    #####: 1174:      if (supplyCount(estate, state) == 0){
    #####: 1175:        isGameOver(state);
        -: 1176:      }
        -: 1177:    }
        -: 1178:  }
    #####: 1179:}
        -: 1180:
        -: 1181:/*******************************************************************************
        -: 1182:* Description: minion_refactor function
        -: 1183:*******************************************************************************/
        -: 1184:
    #####: 1185:void minion_refactor(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
    #####: 1186:  int i = 0,
    #####: 1187:      j = 0;
        -: 1188:  //+1 action
    #####: 1189:  state->numActions++;
        -: 1190:
        -: 1191:  //discard card from hand
    #####: 1192:  discardCard(handPos, currentPlayer, state, 0);
        -: 1193:  //+2 coins
    #####: 1194:  if (choice2) {
    #####: 1195:    state->coins = state->coins + 2;
    #####: 1196:  } else if (choice1) {                                                         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1197:    //discard hand
    #####: 1198:    while(numHandCards(state) > 0) {
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:    }
        -: 1201:    //draw 4
    #####: 1202:    for (i = 0; i < 4; i++) {
    #####: 1203:      drawCard(currentPlayer, state);
        -: 1204:    }
        -: 1205:    //other players discard hand and redraw if hand size > 4
    #####: 1206:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:      if (i != currentPlayer) {
    #####: 1208:        if ( state->handCount[i] > 4 ) {
        -: 1209:          //discard hand
    #####: 1210:          while( state->handCount[i] > 0 ) {
    #####: 1211:            discardCard(handPos, i, state, 0);
        -: 1212:          }
        -: 1213:          //draw 4
    #####: 1214:          for (j = 0; j < 4; j++) {
    #####: 1215:            drawCard(i, state);
        -: 1216:          }
        -: 1217:        }
        -: 1218:      }
        -: 1219:    }
        -: 1220:  }
    #####: 1221:}
        -: 1222:
        -: 1223:/*******************************************************************************
        -: 1224:* Description: cutpurse_refactor function
        -: 1225:*******************************************************************************/
        -: 1226:
    #####: 1227:void cutpurse_refactor(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1228:  int i = 0,
    #####: 1229:      j = 0,
    #####: 1230:      k = 0;
    #####: 1231:  updateCoins(currentPlayer, state, 2);
    #####: 1232:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1233:    if (j != currentPlayer) {
    #####: 1234:      for (j = 0; j < state->handCount[i]; j++) {
    #####: 1235:        if (state->hand[i][j] == copper) {
    #####: 1236:          discardCard(j, i, state, 0);
    #####: 1237:          break;
        -: 1238:        }
    #####: 1239:        if (j == state->handCount[i]) {
    #####: 1240:          for (k = 0; k < state->handCount[i]; k++) {
        -: 1241:            if (DEBUG) {
        -: 1242:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:            }
        -: 1244:          }
    #####: 1245:          break;
        -: 1246:        }
        -: 1247:      }
        -: 1248:    }
        -: 1249:  }
        -: 1250:  //discard played card from hand
    #####: 1251:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:}
        -: 1253:
    #####: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:  //if card is not trashed, added to Played pile
    #####: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
    #####: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:  //set played card to -1
    #####: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:  //remove card from player's hand
    #####: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
    #####: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
    #####: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
    #####: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
    #####: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
        1: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:
        -: 1333:  //reset coin count
        1: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
        6: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
        5: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
        4: 1341:	  state->coins += 1;
        -: 1342:	}
        1: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
        1: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}
        -: 1351:    }
        -: 1352:
        -: 1353:  //add bonus
        1: 1354:  state->coins += bonus;
        -: 1355:
        1: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
cardtest2.c:
-------------------------- Testing: smithy_Card()----------------------------

Player0 gains 3 cards
Test: FAILED

Player0 gains 3 cards from his own pile
Test: FAILED

No change to victory card piles
Province Pile
Test: PASSED
Duchy Pile
Test: PASSED
Estate Pile
Test: PASSED

No change to kingdom card piles
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED

Player1 was not affected
Hand Count
Test: PASSED
Deck Count
Test: PASSED

TEST FAILED
Fails: 2
File 'cardtest2.c'
Lines executed:97.83% of 46
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:22.11% of 570
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** PREPROCESSOR DIRECTIVES
        -:    3:*******************************************************************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:/*******************************************************************************
        -:   13:** FUNCTION DECLARATIONS
        -:   14:*******************************************************************************/
        -:   15:
        -:   16:void adventurer_refactor(struct gameState*, int, int*);                         // Declare function for adventurer card functionality
        -:   17:void smithy_refactor(struct gameState*, int, int);                              // Declare function for smithy card functionality
        -:   18:void baron_refactor(struct gameState*, int, int);                               // Declare function for baron card functionality
        -:   19:void minion_refactor(struct gameState*, int, int, int, int);                    // Declare function for minion card functionality
        -:   20:void cutpurse_refactor(struct gameState*, int, int);                            // Declare function for cutpurse card functionality
        -:   21:
       30:   22:int compare(const void* a, const void* b) {
       30:   23:  if (*(int*)a > *(int*)b)
    #####:   24:    return 1;
       30:   25:  if (*(int*)a < *(int*)b)
        8:   26:    return -1;
       22:   27:  return 0;
        -:   28:}
        -:   29:
    #####:   30:struct gameState* newGame() {
    #####:   31:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   32:  return g;
        -:   33:}
        -:   34:
    #####:   35:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   36:		  int k8, int k9, int k10) {
    #####:   37:  int* k = malloc(10 * sizeof(int));
    #####:   38:  k[0] = k1;
    #####:   39:  k[1] = k2;
    #####:   40:  k[2] = k3;
    #####:   41:  k[3] = k4;
    #####:   42:  k[4] = k5;
    #####:   43:  k[5] = k6;
    #####:   44:  k[6] = k7;
    #####:   45:  k[7] = k8;
    #####:   46:  k[8] = k9;
    #####:   47:  k[9] = k10;
    #####:   48:  return k;
        -:   49:}
        -:   50:
        1:   51:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        1:   58:  SelectStream(1);
        1:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        1:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        1:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:  //check selected kingdom cards are different
       11:   71:  for (i = 0; i < 10; i++)
        -:   72:    {
      110:   73:      for (j = 0; j < 10; j++)
        -:   74:        {
      100:   75:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:	    {
    #####:   77:	      return -1;
        -:   78:	    }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:
        -:   83:  //initialize supply
        -:   84:  ///////////////////////////////
        -:   85:
        -:   86:  //set number of Curse cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[curse] = 10;
        -:   90:    }
    #####:   91:  else if (numPlayers == 3)
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 20;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 30;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Victory cards
        1:  101:  if (numPlayers == 2)
        -:  102:    {
        1:  103:      state->supplyCount[estate] = 8;
        1:  104:      state->supplyCount[duchy] = 8;
        1:  105:      state->supplyCount[province] = 8;
        -:  106:    }
        -:  107:  else
        -:  108:    {
    #####:  109:      state->supplyCount[estate] = 12;
    #####:  110:      state->supplyCount[duchy] = 12;
    #####:  111:      state->supplyCount[province] = 12;
        -:  112:    }
        -:  113:
        -:  114:  //set number of Treasure cards
        1:  115:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  116:  state->supplyCount[silver] = 40;
        1:  117:  state->supplyCount[gold] = 30;
        -:  118:
        -:  119:  //set number of Kingdom cards
       21:  120:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  121:    {
      165:  122:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  123:	{
      155:  124:	  if (kingdomCards[j] == i)
        -:  125:	    {
        -:  126:	      //check if card is a 'Victory' Kingdom card
       10:  127:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:		{
        4:  129:		  if (numPlayers == 2){
        2:  130:		    state->supplyCount[i] = 8;
        -:  131:		  }
    #####:  132:		  else{ state->supplyCount[i] = 12; }
        -:  133:		}
        -:  134:	      else
        -:  135:		{
        8:  136:		  state->supplyCount[i] = 10;
        -:  137:		}
       10:  138:	      break;
        -:  139:	    }
        -:  140:	  else    //card is not in the set choosen for the game
        -:  141:	    {
      145:  142:	      state->supplyCount[i] = -1;
        -:  143:	    }
        -:  144:	}
        -:  145:
        -:  146:    }
        -:  147:
        -:  148:  ////////////////////////
        -:  149:  //supply intilization complete
        -:  150:
        -:  151:  //set player decks
        3:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
        2:  154:      state->deckCount[i] = 0;
        8:  155:      for (j = 0; j < 3; j++)
        -:  156:	{
        6:  157:	  state->deck[i][j] = estate;
        6:  158:	  state->deckCount[i]++;
        -:  159:	}
       16:  160:      for (j = 3; j < 10; j++)
        -:  161:	{
       14:  162:	  state->deck[i][j] = copper;
       14:  163:	  state->deckCount[i]++;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //shuffle player decks
        3:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        2:  170:      if ( shuffle(i, state) < 0 )
        -:  171:	{
    #####:  172:	  return -1;
        -:  173:	}
        -:  174:    }
        -:  175:
        -:  176:  //draw player hands
        3:  177:  for (i = 0; i < numPlayers; i++)
        -:  178:    {
        -:  179:      //initialize hand size to zero
        2:  180:      state->handCount[i] = 0;
        2:  181:      state->discardCount[i] = 0;
        -:  182:      //draw 5 cards
        -:  183:      // for (j = 0; j < 5; j++)
        -:  184:      //	{
        -:  185:      //	  drawCard(i, state);
        -:  186:      //	}
        -:  187:    }
        -:  188:
        -:  189:  //set embargo tokens to 0 for all supply piles
       28:  190:  for (i = 0; i <= treasure_map; i++)
        -:  191:    {
       27:  192:      state->embargoTokens[i] = 0;
        -:  193:    }
        -:  194:
        -:  195:  //initialize first player's turn
        1:  196:  state->outpostPlayed = 0;
        1:  197:  state->phase = 0;
        1:  198:  state->numActions = 1;
        1:  199:  state->numBuys = 1;
        1:  200:  state->playedCardCount = 0;
        1:  201:  state->whoseTurn = 0;
        1:  202:  state->handCount[state->whoseTurn] = 0;
        -:  203:  //int it; move to top
        -:  204:
        -:  205:  //Moved draw cards to here, only drawing at the start of a turn
        6:  206:  for (it = 0; it < 5; it++){
        5:  207:    drawCard(state->whoseTurn, state);
        -:  208:  }
        -:  209:
        1:  210:  updateCoins(state->whoseTurn, state, 0);
        -:  211:
        1:  212:  return 0;
        -:  213:}
        -:  214:
        7:  215:int shuffle(int player, struct gameState *state) {
        -:  216:
        -:  217:
        -:  218:  int newDeck[MAX_DECK];
        7:  219:  int newDeckPos = 0;
        -:  220:  int card;
        -:  221:  int i;
        -:  222:
        7:  223:  if (state->deckCount[player] < 1)
        5:  224:    return -1;
        2:  225:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  226:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  227:
       24:  228:  while (state->deckCount[player] > 0) {
       20:  229:    card = floor(Random() * state->deckCount[player]);
       20:  230:    newDeck[newDeckPos] = state->deck[player][card];
       20:  231:    newDeckPos++;
       76:  232:    for (i = card; i < state->deckCount[player]-1; i++) {
       56:  233:      state->deck[player][i] = state->deck[player][i+1];
        -:  234:    }
       20:  235:    state->deckCount[player]--;
        -:  236:  }
       22:  237:  for (i = 0; i < newDeckPos; i++) {
       20:  238:    state->deck[player][i] = newDeck[i];
       20:  239:    state->deckCount[player]++;
        -:  240:  }
        -:  241:
        2:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:  int card;
    #####:  248:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  249:
        -:  250:  //check if it is the right phase
    #####:  251:  if (state->phase != 0)
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //check if player has enough actions
    #####:  257:  if ( state->numActions < 1 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //get card played
    #####:  263:  card = handCard(handPos, state);
        -:  264:
        -:  265:  //check if selected card is an action
    #####:  266:  if ( card < adventurer || card > treasure_map )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //play card
    #####:  272:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  273:    {
    #####:  274:      return -1;
        -:  275:    }
        -:  276:
        -:  277:  //reduce number of actions
    #####:  278:  state->numActions--;
        -:  279:
        -:  280:  //update coins (Treasure cards may be added with card draws)
    #####:  281:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:  return 0;
        -:  284:}
        -:  285:
    #####:  286:int buyCard(int supplyPos, struct gameState *state) {
        -:  287:  int who;
        -:  288:  if (DEBUG){
        -:  289:    printf("Entering buyCard...\n");
        -:  290:  }
        -:  291:
        -:  292:  // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:  who = state->whoseTurn;
        -:  295:
    #####:  296:  if (state->numBuys < 1){
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have any buys left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (supplyCount(supplyPos, state) <1){
        -:  301:    if (DEBUG)
        -:  302:      printf("There are not any of that type of card left\n");
    #####:  303:    return -1;
    #####:  304:  } else if (state->coins < getCost(supplyPos)){
        -:  305:    if (DEBUG)
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  } else {
    #####:  309:    state->phase=1;
        -:  310:    //state->supplyCount[supplyPos]--;
    #####:  311:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  312:
    #####:  313:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  314:    state->numBuys--;
        -:  315:    if (DEBUG)
        -:  316:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  317:  }
        -:  318:
        -:  319:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  320:  //state->discardCount[who]++;
        -:  321:
    #####:  322:  return 0;
        -:  323:}
        -:  324:
    #####:  325:int numHandCards(struct gameState *state) {
    #####:  326:  return state->handCount[ whoseTurn(state) ];
        -:  327:}
        -:  328:
    #####:  329:int handCard(int handPos, struct gameState *state) {
    #####:  330:  int currentPlayer = whoseTurn(state);
    #####:  331:  return state->hand[currentPlayer][handPos];
        -:  332:}
        -:  333:
    #####:  334:int supplyCount(int card, struct gameState *state) {
    #####:  335:  return state->supplyCount[card];
        -:  336:}
        -:  337:
    #####:  338:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  339:  int i;
    #####:  340:  int count = 0;
        -:  341:
    #####:  342:  for (i = 0; i < state->deckCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->deck[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->handCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->hand[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  for (i = 0; i < state->discardCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->discard[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  return count;
        -:  358:}
        -:  359:
        1:  360:int whoseTurn(struct gameState *state) {
        1:  361:  return state->whoseTurn;
        -:  362:}
        -:  363:
    #####:  364:int endTurn(struct gameState *state) {
        -:  365:  int k;
        -:  366:  int i;
    #####:  367:  int currentPlayer = whoseTurn(state);
        -:  368:
        -:  369:  //Discard hand
    #####:  370:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  371:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  372:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  373:  }
    #####:  374:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  375:
        -:  376:  //Code for determining the player
    #####:  377:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  378:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  379:  }
        -:  380:  else{
    #####:  381:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:  }
        -:  383:
    #####:  384:  state->outpostPlayed = 0;
    #####:  385:  state->phase = 0;
    #####:  386:  state->numActions = 1;
    #####:  387:  state->coins = 0;
    #####:  388:  state->numBuys = 1;
    #####:  389:  state->playedCardCount = 0;
    #####:  390:  state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:  //int k; move to top
        -:  393:  //Next player draws hand
    #####:  394:  for (k = 0; k < 5; k++){
    #####:  395:    drawCard(state->whoseTurn, state);//Draw a card
        -:  396:  }
        -:  397:
        -:  398:  //Update money
    #####:  399:  updateCoins(state->whoseTurn, state , 0);
        -:  400:
    #####:  401:  return 0;
        -:  402:}
        -:  403:
    #####:  404:int isGameOver(struct gameState *state) {
        -:  405:  int i;
        -:  406:  int j;
        -:  407:
        -:  408:  //if stack of Province cards is empty, the game ends
    #####:  409:  if (state->supplyCount[province] == 0)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  //if three supply pile are at 0, the game ends
    #####:  415:  j = 0;
    #####:  416:  for (i = 0; i < 25; i++)
        -:  417:    {
    #####:  418:      if (state->supplyCount[i] == 0)
        -:  419:	{
    #####:  420:	  j++;
        -:  421:	}
        -:  422:    }
    #####:  423:  if ( j >= 3)
        -:  424:    {
    #####:  425:      return 1;
        -:  426:    }
        -:  427:
    #####:  428:  return 0;
        -:  429:}
        -:  430:
    #####:  431:int scoreFor (int player, struct gameState *state) {
        -:  432:
        -:  433:  int i;
    #####:  434:  int score = 0;
        -:  435:  //score from hand
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from discard
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        -:  457:  //score from deck
    #####:  458:  for (i = 0; i < state->discardCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  461:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  463:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  464:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  465:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  466:    }
        -:  467:
    #####:  468:  return score;
        -:  469:}
        -:  470:
    #####:  471:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  472:  int i;
        -:  473:  int j;
        -:  474:  int highScore;
        -:  475:  int currentPlayer;
        -:  476:
        -:  477:  //get score for each player
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      //set unused player scores to -9999
    #####:  481:      if (i >= state->numPlayers)
        -:  482:	{
    #####:  483:	  players[i] = -9999;
        -:  484:	}
        -:  485:      else
        -:  486:	{
    #####:  487:	  players[i] = scoreFor (i, state);
        -:  488:	}
        -:  489:    }
        -:  490:
        -:  491:  //find highest score
    #####:  492:  j = 0;
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if (players[i] > players[j])
        -:  496:	{
    #####:  497:	  j = i;
        -:  498:	}
        -:  499:    }
    #####:  500:  highScore = players[j];
        -:  501:
        -:  502:  //add 1 to players who had less turns
    #####:  503:  currentPlayer = whoseTurn(state);
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] == highScore && i > currentPlayer )
        -:  507:	{
    #####:  508:	  players[i]++;
        -:  509:	}
        -:  510:    }
        -:  511:
        -:  512:  //find new highest score
    #####:  513:  j = 0;
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] > players[j] )
        -:  517:	{
    #####:  518:	  j = i;
        -:  519:	}
        -:  520:    }
    #####:  521:  highScore = players[j];
        -:  522:
        -:  523:  //set winners in array to 1 and rest to 0
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] == highScore )
        -:  527:	{
    #####:  528:	  players[i] = 1;
        -:  529:	}
        -:  530:      else
        -:  531:	{
    #####:  532:	  players[i] = 0;
        -:  533:	}
        -:  534:    }
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
       15:  539:int drawCard(int player, struct gameState *state)
        -:  540:{	int count;
        -:  541:  int deckCounter;
       15:  542:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
        5:  547:    for (i = 0; i < state->discardCount[player];i++){
    #####:  548:      state->deck[player][i] = state->discard[player][i];
    #####:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
        5:  552:    state->deckCount[player] = state->discardCount[player];
        5:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
        5:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
        5:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
        5:  565:    count = state->handCount[player];//Get current player's hand count
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
        5:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
        5:  573:    if (deckCounter == 0)
        5:  574:      return -1;
        -:  575:
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
        -:  581:  else{
       10:  582:    int count = state->handCount[player];//Get current hand count for player
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
       10:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  590:    state->deckCount[player]--;
       10:  591:    state->handCount[player]++;//Increment hand count
        -:  592:  }
        -:  593:
       10:  594:  return 0;
        -:  595:}
        -:  596:
    #####:  597:int getCost(int cardNumber)
        -:  598:{
    #####:  599:  switch( cardNumber )
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
        -:  603:    case estate:
    #####:  604:      return 2;
        -:  605:    case duchy:
    #####:  606:      return 5;
        -:  607:    case province:
    #####:  608:      return 8;
        -:  609:    case copper:
    #####:  610:      return 0;
        -:  611:    case silver:
    #####:  612:      return 3;
        -:  613:    case gold:
    #####:  614:      return 6;
        -:  615:    case adventurer:
    #####:  616:      return 6;
        -:  617:    case council_room:
    #####:  618:      return 5;
        -:  619:    case feast:
    #####:  620:      return 4;
        -:  621:    case gardens:
    #####:  622:      return 4;
        -:  623:    case mine:
    #####:  624:      return 5;
        -:  625:    case remodel:
    #####:  626:      return 4;
        -:  627:    case smithy:
    #####:  628:      return 4;
        -:  629:    case village:
    #####:  630:      return 3;
        -:  631:    case baron:
    #####:  632:      return 4;
        -:  633:    case great_hall:
    #####:  634:      return 3;
        -:  635:    case minion:
    #####:  636:      return 5;
        -:  637:    case steward:
    #####:  638:      return 3;
        -:  639:    case tribute:
    #####:  640:      return 5;
        -:  641:    case ambassador:
    #####:  642:      return 3;
        -:  643:    case cutpurse:
    #####:  644:      return 4;
        -:  645:    case embargo:
    #####:  646:      return 2;
        -:  647:    case outpost:
    #####:  648:      return 5;
        -:  649:    case salvager:
    #####:  650:      return 4;
        -:  651:    case sea_hag:
    #####:  652:      return 4;
        -:  653:    case treasure_map:
    #####:  654:      return 4;
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
        -:  658:}
        -:  659:
        1:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int x;
        -:  665:  int index;
        1:  666:  int currentPlayer = whoseTurn(state);
        1:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
        1:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
        1:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:
        -:  675:
        -:  676:  //uses switch to select card and perform actions
        1:  677:  switch( card ) {
        -:  678:
        -:  679:    case adventurer:
    #####:  680:      adventurer_refactor(state, currentPlayer, temphand);
    #####:  681:      return 0;
        -:  682:
        -:  683:    case council_room:
        -:  684:      //+4 Cards
    #####:  685:      for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:      //+1 Buy
    #####:  691:      state->numBuys++;
        -:  692:
        -:  693:      //Each other player draws a card
    #####:  694:      for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:	  if ( i != currentPlayer )
        -:  697:	    {
    #####:  698:	      drawCard(i, state);
        -:  699:	    }
        -:  700:	}
        -:  701:
        -:  702:      //put played card in played card pile
    #####:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:      return 0;
        -:  706:
        -:  707:    case feast:
        -:  708:      //gain card with cost up to 5
        -:  709:      //Backup hand
    #####:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
    #####:  717:      updateCoins(currentPlayer, state, 5);
    #####:  718:      x = 1;//Condition to loop on
    #####:  719:      while( x == 1) {//Buy one card
    #####:  720:	if (supplyCount(choice1, state) <= 0){
        -:  721:	  if (DEBUG)
        -:  722:	    printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:	  }
        -:  727:	}
    #####:  728:	else if (state->coins < getCost(choice1)){
    #####:  729:	  printf("That card is too expensive!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:	  }
        -:  734:	}
        -:  735:	else{
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
    #####:  741:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  742:	  x = 0;//No more buying cards
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
        -:  748:	}
        -:  749:      }
        -:  750:
        -:  751:      //Reset Hand
    #####:  752:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  753:	state->hand[currentPlayer][i] = temphand[i];
    #####:  754:	temphand[i] = -1;
        -:  755:      }
        -:  756:      //Reset Hand
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case gardens:
    #####:  761:      return -1;
        -:  762:
        -:  763:    case mine:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if (choice2 > treasure_map || choice2 < curse)
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 2, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case remodel:
    #####:  799:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      gainCard(choice2, state, 0, currentPlayer);
        -:  807:
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
        -:  810:
        -:  811:      //discard trashed card
    #####:  812:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:	{
    #####:  814:	  if (state->hand[currentPlayer][i] == j)
        -:  815:	    {
    #####:  816:	      discardCard(i, currentPlayer, state, 0);
    #####:  817:	      break;
        -:  818:	    }
        -:  819:	}
        -:  820:
        -:  821:
    #####:  822:      return 0;
        -:  823:
        -:  824:    case smithy:
        1:  825:      smithy_refactor(state, currentPlayer, handPos);
        1:  826:      return 0;
        -:  827:
        -:  828:    case village:
        -:  829:      //+1 Card
    #####:  830:      drawCard(currentPlayer, state);
        -:  831:
        -:  832:      //+2 Actions
    #####:  833:      state->numActions = state->numActions + 2;
        -:  834:
        -:  835:      //discard played card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
    #####:  837:      return 0;
        -:  838:
        -:  839:    case baron:
    #####:  840:      baron_refactor(state, currentPlayer, choice1);
    #####:  841:      return 0;
        -:  842:
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:
        -:  854:    case minion:
    #####:  855:      minion_refactor(state, currentPlayer, handPos, choice1, choice2);
    #####:  856:      return 0;
        -:  857:
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
    #####:  863:	  drawCard(currentPlayer, state);
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
        -:  875:	}
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  909:	}
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }
        -:  917:
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  930:	  drawCard(currentPlayer, state);
    #####:  931:	  drawCard(currentPlayer, state);
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:
    #####:  938:      return 0;
        -:  939:
        -:  940:    case ambassador:
    #####:  941:      j = 0;		//used to check if player has enough cards to discard
        -:  942:
    #####:  943:      if (choice2 > 2 || choice2 < 0)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice1 == handPos)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  956:	    {
    #####:  957:	      j++;
        -:  958:	    }
        -:  959:	}
    #####:  960:      if (j < choice2)
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      if (DEBUG)
        -:  966:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  967:
        -:  968:      //increase supply count for choosen card by amount being discarded
    #####:  969:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  970:
        -:  971:      //each other player gains a copy of revealed card
    #####:  972:      for (i = 0; i < state->numPlayers; i++)
        -:  973:	{
    #####:  974:	  if (i != currentPlayer)
        -:  975:	    {
    #####:  976:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:      //trash copies of cards returned to supply
    #####:  984:      for (j = 0; j < choice2; j++)
        -:  985:	{
    #####:  986:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:	    {
    #####:  988:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  989:		{
    #####:  990:		  discardCard(i, currentPlayer, state, 1);
    #####:  991:		  break;
        -:  992:		}
        -:  993:	    }
        -:  994:	}
        -:  995:
    #####:  996:      return 0;
        -:  997:
        -:  998:    case cutpurse:
    #####:  999:      cutpurse_refactor(state, currentPlayer, handPos);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:
        -: 1003:    case embargo:
        -: 1004:      //+2 Coins
    #####: 1005:      state->coins = state->coins + 2;
        -: 1006:
        -: 1007:      //see if selected pile is in play
    #####: 1008:      if ( state->supplyCount[choice1] == -1 )
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      //add embargo token to selected supply pile
    #####: 1014:      state->embargoTokens[choice1]++;
        -: 1015:
        -: 1016:      //trash card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case outpost:
        -: 1021:      //set outpost flag
    #####: 1022:      state->outpostPlayed++;
        -: 1023:
        -: 1024:      //discard card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case salvager:
        -: 1029:      //+1 buy
    #####: 1030:      state->numBuys++;
        -: 1031:
    #####: 1032:      if (choice1)
        -: 1033:	{
        -: 1034:	  //gain coins equal to trashed card
    #####: 1035:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1036:	  //trash card
    #####: 1037:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case sea_hag:
    #####: 1045:      for (i = 0; i < state->numPlayers; i++){
    #####: 1046:	if (i != currentPlayer){
    #####: 1047:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1048:	  state->discardCount[i]++;
    #####: 1049:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1050:	}
        -: 1051:      }
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:    case treasure_map:
        -: 1055:      //search hand for another treasure_map
    #####: 1056:      index = -1;
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:	{
    #####: 1059:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1060:	    {
    #####: 1061:	      index = i;
    #####: 1062:	      break;
        -: 1063:	    }
        -: 1064:	}
    #####: 1065:      if (index > -1)
        -: 1066:	{
        -: 1067:	  //trash both treasure cards
    #####: 1068:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1069:	  discardCard(index, currentPlayer, state, 1);
        -: 1070:
        -: 1071:	  //gain 4 Gold cards
    #####: 1072:	  for (i = 0; i < 4; i++)
        -: 1073:	    {
    #####: 1074:	      gainCard(gold, state, 1, currentPlayer);
        -: 1075:	    }
        -: 1076:
        -: 1077:	  //return success
    #####: 1078:	  return 1;
        -: 1079:	}
        -: 1080:
        -: 1081:      //no second treasure_map found in hand
    #####: 1082:      return -1;
        -: 1083:    }
        -: 1084:
    #####: 1085:  return -1;
        -: 1086:}
        -: 1087:
        -: 1088:/*******************************************************************************
        -: 1089:* Description: adventurer_refactor function
        -: 1090:*******************************************************************************/
        -: 1091:
    #####: 1092:void adventurer_refactor(struct gameState *state, int currentPlayer, int *temphand) {
    #####: 1093:  int drawntreasure = 0,
        -: 1094:      cardDrawn,
    #####: 1095:      z = 0;
        -: 1096:
    #####: 1097:  while(drawntreasure > 2) {
    #####: 1098:    if(state->deckCount[currentPlayer] < 1) {                                   //if the deck is empty we need to shuffle discard and add to deck
    #####: 1099:      shuffle(currentPlayer, state);
        -: 1100:    }
    #####: 1101:    drawCard(currentPlayer, state);
    #####: 1102:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];  //top card of hand is most recently drawn card.
    #####: 1103:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1104:      drawntreasure++;
        -: 1105:    } else {
    #####: 1106:      temphand[z]=cardDrawn;
    #####: 1107:      state->handCount[currentPlayer]--;                                        //this should just remove the top card (the most recently drawn one).
    #####: 1108:      z++;
        -: 1109:    }
        -: 1110:  }
    #####: 1111:  while(z - 1 >= 0) {
    #####: 1112:    state->discard[currentPlayer][state->discardCount[currentPlayer] ++]
    #####: 1113:    = temphand[z - 1];                                                          // discard all cards in play that have been drawn
    #####: 1114:    z = z - 1;
        -: 1115:  }
    #####: 1116:}
        -: 1117:
        -: 1118:/*******************************************************************************
        -: 1119:* Description: smithy_refactor function
        -: 1120:*******************************************************************************/
        -: 1121:
        1: 1122:void smithy_refactor(struct gameState *state, int currentPlayer, int handPos) {
        -: 1123:  //+3 Cards
        1: 1124:  int i = 0;
       11: 1125:  for (i = 0; i < 10; i++) {
       10: 1126:    drawCard(currentPlayer, state);
        -: 1127:  }
        -: 1128:  //discard card from hand
        1: 1129:  discardCard(handPos, currentPlayer, state, 0);
        -: 1130:  // return 0;
        1: 1131:}
        -: 1132:
        -: 1133:/*******************************************************************************
        -: 1134:* Description: baron_refactor function
        -: 1135:*******************************************************************************/
        -: 1136:
    #####: 1137:void baron_refactor(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1138:  state->numBuys ++;                                                            //Increase buys by 1!
    #####: 1139:  if (choice1 > 0) {                                                            //Boolean true or going to discard an estate
    #####: 1140:    int p = 0;                                                                  //Iterator for hand!
    #####: 1141:    int card_not_discarded = 1;                                                 //Flag for discard set!
    #####: 1142:    while(card_not_discarded) {
    #####: 1143:      if (state->hand[currentPlayer][p] == estate) {                            //Found an estate card!
    #####: 1144:        state->coins += 4;                                                      //Add 4 coins to the amount of coins
    #####: 1145:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1146:        state->discardCount[currentPlayer] ++;
    #####: 1147:        for (;p < state->handCount[currentPlayer]; p ++) {
    #####: 1148:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1149:        }
    #####: 1150:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1151:        state->handCount[currentPlayer]--;
    #####: 1152:        card_not_discarded = 0;                                                 //Exit the loop
    #####: 1153:      } else if (p > state->handCount[currentPlayer]) {
        -: 1154:        if(DEBUG) {
        -: 1155:          printf("No estate cards in your hand, invalid choice\n");
        -: 1156:          printf("Must gain an estate if there are any\n");
        -: 1157:        }
    #####: 1158:        if (supplyCount(estate, state) > 0) {
    #####: 1159:          gainCard(estate, state, 0, currentPlayer);
    #####: 1160:          state->supplyCount[estate]--;                                         //Decrement estates
    #####: 1161:          if (supplyCount(estate, state) == 0) {
    #####: 1162:            isGameOver(state);
        -: 1163:          }
        -: 1164:        }
    #####: 1165:        card_not_discarded = 0;                                                 //Exit the loop
        -: 1166:      } else {
    #####: 1167:        p ++;                                                                   //Next card
        -: 1168:      }
        -: 1169:    }
        -: 1170:  } else {
    #####: 1171:    if (supplyCount(estate, state) > 0) {
    #####: 1172:      gainCard(estate, state, 0, currentPlayer);                                //Gain an estate
    #####: 1173:      state->supplyCount[estate]--;                                             //Decrement Estates
    #####: 1174:      if (supplyCount(estate, state) == 0){
    #####: 1175:        isGameOver(state);
        -: 1176:      }
        -: 1177:    }
        -: 1178:  }
    #####: 1179:}
        -: 1180:
        -: 1181:/*******************************************************************************
        -: 1182:* Description: minion_refactor function
        -: 1183:*******************************************************************************/
        -: 1184:
    #####: 1185:void minion_refactor(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
    #####: 1186:  int i = 0,
    #####: 1187:      j = 0;
        -: 1188:  //+1 action
    #####: 1189:  state->numActions++;
        -: 1190:
        -: 1191:  //discard card from hand
    #####: 1192:  discardCard(handPos, currentPlayer, state, 0);
        -: 1193:  //+2 coins
    #####: 1194:  if (choice2) {
    #####: 1195:    state->coins = state->coins + 2;
    #####: 1196:  } else if (choice1) {                                                         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1197:    //discard hand
    #####: 1198:    while(numHandCards(state) > 0) {
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:    }
        -: 1201:    //draw 4
    #####: 1202:    for (i = 0; i < 4; i++) {
    #####: 1203:      drawCard(currentPlayer, state);
        -: 1204:    }
        -: 1205:    //other players discard hand and redraw if hand size > 4
    #####: 1206:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:      if (i != currentPlayer) {
    #####: 1208:        if ( state->handCount[i] > 4 ) {
        -: 1209:          //discard hand
    #####: 1210:          while( state->handCount[i] > 0 ) {
    #####: 1211:            discardCard(handPos, i, state, 0);
        -: 1212:          }
        -: 1213:          //draw 4
    #####: 1214:          for (j = 0; j < 4; j++) {
    #####: 1215:            drawCard(i, state);
        -: 1216:          }
        -: 1217:        }
        -: 1218:      }
        -: 1219:    }
        -: 1220:  }
    #####: 1221:}
        -: 1222:
        -: 1223:/*******************************************************************************
        -: 1224:* Description: cutpurse_refactor function
        -: 1225:*******************************************************************************/
        -: 1226:
    #####: 1227:void cutpurse_refactor(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1228:  int i = 0,
    #####: 1229:      j = 0,
    #####: 1230:      k = 0;
    #####: 1231:  updateCoins(currentPlayer, state, 2);
    #####: 1232:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1233:    if (j != currentPlayer) {
    #####: 1234:      for (j = 0; j < state->handCount[i]; j++) {
    #####: 1235:        if (state->hand[i][j] == copper) {
    #####: 1236:          discardCard(j, i, state, 0);
    #####: 1237:          break;
        -: 1238:        }
    #####: 1239:        if (j == state->handCount[i]) {
    #####: 1240:          for (k = 0; k < state->handCount[i]; k++) {
        -: 1241:            if (DEBUG) {
        -: 1242:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:            }
        -: 1244:          }
    #####: 1245:          break;
        -: 1246:        }
        -: 1247:      }
        -: 1248:    }
        -: 1249:  }
        -: 1250:  //discard played card from hand
    #####: 1251:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:}
        -: 1253:
        1: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:  //if card is not trashed, added to Played pile
        1: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
        1: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:  //set played card to -1
        1: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:  //remove card from player's hand
        1: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
        1: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
        1: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
        1: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
        1: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
        1: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
        1: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:
        -: 1333:  //reset coin count
        1: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
        6: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
        5: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
        4: 1341:	  state->coins += 1;
        -: 1342:	}
        1: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
        1: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}
        -: 1351:    }
        -: 1352:
        -: 1353:  //add bonus
        1: 1354:  state->coins += bonus;
        -: 1355:
        1: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
cardtest3.c:
-------------------- Testing: councilRoom_Card()----------------

Player0 gains 4 cards
Test: PASSED

Player0 gains 4 cards from his own pile
Test: PASSED

Player0 number of buys increments
Test: PASSED

No change to victory card piles
Province Pile
Test: PASSED
Duchy Pile
Test: PASSED
Estate Pile
Test: PASSED

No change to kingdom card piles
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED

Player1 gains a card
Test: PASSED

Player1 gains a card from his own deck
Test: PASSED

TEST SUCCESSFULLY COMPLETED

File 'cardtest3.c'
Lines executed:91.49% of 47
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:20.35% of 570
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** PREPROCESSOR DIRECTIVES
        -:    3:*******************************************************************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:/*******************************************************************************
        -:   13:** FUNCTION DECLARATIONS
        -:   14:*******************************************************************************/
        -:   15:
        -:   16:void adventurer_refactor(struct gameState*, int, int*);                         // Declare function for adventurer card functionality
        -:   17:void smithy_refactor(struct gameState*, int, int);                              // Declare function for smithy card functionality
        -:   18:void baron_refactor(struct gameState*, int, int);                               // Declare function for baron card functionality
        -:   19:void minion_refactor(struct gameState*, int, int, int, int);                    // Declare function for minion card functionality
        -:   20:void cutpurse_refactor(struct gameState*, int, int);                            // Declare function for cutpurse card functionality
        -:   21:
       30:   22:int compare(const void* a, const void* b) {
       30:   23:  if (*(int*)a > *(int*)b)
    #####:   24:    return 1;
       30:   25:  if (*(int*)a < *(int*)b)
        8:   26:    return -1;
       22:   27:  return 0;
        -:   28:}
        -:   29:
    #####:   30:struct gameState* newGame() {
    #####:   31:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   32:  return g;
        -:   33:}
        -:   34:
    #####:   35:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   36:		  int k8, int k9, int k10) {
    #####:   37:  int* k = malloc(10 * sizeof(int));
    #####:   38:  k[0] = k1;
    #####:   39:  k[1] = k2;
    #####:   40:  k[2] = k3;
    #####:   41:  k[3] = k4;
    #####:   42:  k[4] = k5;
    #####:   43:  k[5] = k6;
    #####:   44:  k[6] = k7;
    #####:   45:  k[7] = k8;
    #####:   46:  k[8] = k9;
    #####:   47:  k[9] = k10;
    #####:   48:  return k;
        -:   49:}
        -:   50:
        1:   51:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        1:   58:  SelectStream(1);
        1:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        1:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        1:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:  //check selected kingdom cards are different
       11:   71:  for (i = 0; i < 10; i++)
        -:   72:    {
      110:   73:      for (j = 0; j < 10; j++)
        -:   74:        {
      100:   75:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:	    {
    #####:   77:	      return -1;
        -:   78:	    }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:
        -:   83:  //initialize supply
        -:   84:  ///////////////////////////////
        -:   85:
        -:   86:  //set number of Curse cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[curse] = 10;
        -:   90:    }
    #####:   91:  else if (numPlayers == 3)
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 20;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 30;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Victory cards
        1:  101:  if (numPlayers == 2)
        -:  102:    {
        1:  103:      state->supplyCount[estate] = 8;
        1:  104:      state->supplyCount[duchy] = 8;
        1:  105:      state->supplyCount[province] = 8;
        -:  106:    }
        -:  107:  else
        -:  108:    {
    #####:  109:      state->supplyCount[estate] = 12;
    #####:  110:      state->supplyCount[duchy] = 12;
    #####:  111:      state->supplyCount[province] = 12;
        -:  112:    }
        -:  113:
        -:  114:  //set number of Treasure cards
        1:  115:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  116:  state->supplyCount[silver] = 40;
        1:  117:  state->supplyCount[gold] = 30;
        -:  118:
        -:  119:  //set number of Kingdom cards
       21:  120:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  121:    {
      165:  122:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  123:	{
      155:  124:	  if (kingdomCards[j] == i)
        -:  125:	    {
        -:  126:	      //check if card is a 'Victory' Kingdom card
       10:  127:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:		{
        4:  129:		  if (numPlayers == 2){
        2:  130:		    state->supplyCount[i] = 8;
        -:  131:		  }
    #####:  132:		  else{ state->supplyCount[i] = 12; }
        -:  133:		}
        -:  134:	      else
        -:  135:		{
        8:  136:		  state->supplyCount[i] = 10;
        -:  137:		}
       10:  138:	      break;
        -:  139:	    }
        -:  140:	  else    //card is not in the set choosen for the game
        -:  141:	    {
      145:  142:	      state->supplyCount[i] = -1;
        -:  143:	    }
        -:  144:	}
        -:  145:
        -:  146:    }
        -:  147:
        -:  148:  ////////////////////////
        -:  149:  //supply intilization complete
        -:  150:
        -:  151:  //set player decks
        3:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
        2:  154:      state->deckCount[i] = 0;
        8:  155:      for (j = 0; j < 3; j++)
        -:  156:	{
        6:  157:	  state->deck[i][j] = estate;
        6:  158:	  state->deckCount[i]++;
        -:  159:	}
       16:  160:      for (j = 3; j < 10; j++)
        -:  161:	{
       14:  162:	  state->deck[i][j] = copper;
       14:  163:	  state->deckCount[i]++;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //shuffle player decks
        3:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        2:  170:      if ( shuffle(i, state) < 0 )
        -:  171:	{
    #####:  172:	  return -1;
        -:  173:	}
        -:  174:    }
        -:  175:
        -:  176:  //draw player hands
        3:  177:  for (i = 0; i < numPlayers; i++)
        -:  178:    {
        -:  179:      //initialize hand size to zero
        2:  180:      state->handCount[i] = 0;
        2:  181:      state->discardCount[i] = 0;
        -:  182:      //draw 5 cards
        -:  183:      // for (j = 0; j < 5; j++)
        -:  184:      //	{
        -:  185:      //	  drawCard(i, state);
        -:  186:      //	}
        -:  187:    }
        -:  188:
        -:  189:  //set embargo tokens to 0 for all supply piles
       28:  190:  for (i = 0; i <= treasure_map; i++)
        -:  191:    {
       27:  192:      state->embargoTokens[i] = 0;
        -:  193:    }
        -:  194:
        -:  195:  //initialize first player's turn
        1:  196:  state->outpostPlayed = 0;
        1:  197:  state->phase = 0;
        1:  198:  state->numActions = 1;
        1:  199:  state->numBuys = 1;
        1:  200:  state->playedCardCount = 0;
        1:  201:  state->whoseTurn = 0;
        1:  202:  state->handCount[state->whoseTurn] = 0;
        -:  203:  //int it; move to top
        -:  204:
        -:  205:  //Moved draw cards to here, only drawing at the start of a turn
        6:  206:  for (it = 0; it < 5; it++){
        5:  207:    drawCard(state->whoseTurn, state);
        -:  208:  }
        -:  209:
        1:  210:  updateCoins(state->whoseTurn, state, 0);
        -:  211:
        1:  212:  return 0;
        -:  213:}
        -:  214:
        2:  215:int shuffle(int player, struct gameState *state) {
        -:  216:
        -:  217:
        -:  218:  int newDeck[MAX_DECK];
        2:  219:  int newDeckPos = 0;
        -:  220:  int card;
        -:  221:  int i;
        -:  222:
        2:  223:  if (state->deckCount[player] < 1)
    #####:  224:    return -1;
        2:  225:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  226:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  227:
       24:  228:  while (state->deckCount[player] > 0) {
       20:  229:    card = floor(Random() * state->deckCount[player]);
       20:  230:    newDeck[newDeckPos] = state->deck[player][card];
       20:  231:    newDeckPos++;
       76:  232:    for (i = card; i < state->deckCount[player]-1; i++) {
       56:  233:      state->deck[player][i] = state->deck[player][i+1];
        -:  234:    }
       20:  235:    state->deckCount[player]--;
        -:  236:  }
       22:  237:  for (i = 0; i < newDeckPos; i++) {
       20:  238:    state->deck[player][i] = newDeck[i];
       20:  239:    state->deckCount[player]++;
        -:  240:  }
        -:  241:
        2:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:  int card;
    #####:  248:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  249:
        -:  250:  //check if it is the right phase
    #####:  251:  if (state->phase != 0)
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //check if player has enough actions
    #####:  257:  if ( state->numActions < 1 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //get card played
    #####:  263:  card = handCard(handPos, state);
        -:  264:
        -:  265:  //check if selected card is an action
    #####:  266:  if ( card < adventurer || card > treasure_map )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //play card
    #####:  272:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  273:    {
    #####:  274:      return -1;
        -:  275:    }
        -:  276:
        -:  277:  //reduce number of actions
    #####:  278:  state->numActions--;
        -:  279:
        -:  280:  //update coins (Treasure cards may be added with card draws)
    #####:  281:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:  return 0;
        -:  284:}
        -:  285:
    #####:  286:int buyCard(int supplyPos, struct gameState *state) {
        -:  287:  int who;
        -:  288:  if (DEBUG){
        -:  289:    printf("Entering buyCard...\n");
        -:  290:  }
        -:  291:
        -:  292:  // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:  who = state->whoseTurn;
        -:  295:
    #####:  296:  if (state->numBuys < 1){
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have any buys left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (supplyCount(supplyPos, state) <1){
        -:  301:    if (DEBUG)
        -:  302:      printf("There are not any of that type of card left\n");
    #####:  303:    return -1;
    #####:  304:  } else if (state->coins < getCost(supplyPos)){
        -:  305:    if (DEBUG)
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  } else {
    #####:  309:    state->phase=1;
        -:  310:    //state->supplyCount[supplyPos]--;
    #####:  311:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  312:
    #####:  313:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  314:    state->numBuys--;
        -:  315:    if (DEBUG)
        -:  316:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  317:  }
        -:  318:
        -:  319:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  320:  //state->discardCount[who]++;
        -:  321:
    #####:  322:  return 0;
        -:  323:}
        -:  324:
    #####:  325:int numHandCards(struct gameState *state) {
    #####:  326:  return state->handCount[ whoseTurn(state) ];
        -:  327:}
        -:  328:
    #####:  329:int handCard(int handPos, struct gameState *state) {
    #####:  330:  int currentPlayer = whoseTurn(state);
    #####:  331:  return state->hand[currentPlayer][handPos];
        -:  332:}
        -:  333:
    #####:  334:int supplyCount(int card, struct gameState *state) {
    #####:  335:  return state->supplyCount[card];
        -:  336:}
        -:  337:
    #####:  338:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  339:  int i;
    #####:  340:  int count = 0;
        -:  341:
    #####:  342:  for (i = 0; i < state->deckCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->deck[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->handCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->hand[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  for (i = 0; i < state->discardCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->discard[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  return count;
        -:  358:}
        -:  359:
        1:  360:int whoseTurn(struct gameState *state) {
        1:  361:  return state->whoseTurn;
        -:  362:}
        -:  363:
    #####:  364:int endTurn(struct gameState *state) {
        -:  365:  int k;
        -:  366:  int i;
    #####:  367:  int currentPlayer = whoseTurn(state);
        -:  368:
        -:  369:  //Discard hand
    #####:  370:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  371:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  372:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  373:  }
    #####:  374:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  375:
        -:  376:  //Code for determining the player
    #####:  377:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  378:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  379:  }
        -:  380:  else{
    #####:  381:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:  }
        -:  383:
    #####:  384:  state->outpostPlayed = 0;
    #####:  385:  state->phase = 0;
    #####:  386:  state->numActions = 1;
    #####:  387:  state->coins = 0;
    #####:  388:  state->numBuys = 1;
    #####:  389:  state->playedCardCount = 0;
    #####:  390:  state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:  //int k; move to top
        -:  393:  //Next player draws hand
    #####:  394:  for (k = 0; k < 5; k++){
    #####:  395:    drawCard(state->whoseTurn, state);//Draw a card
        -:  396:  }
        -:  397:
        -:  398:  //Update money
    #####:  399:  updateCoins(state->whoseTurn, state , 0);
        -:  400:
    #####:  401:  return 0;
        -:  402:}
        -:  403:
    #####:  404:int isGameOver(struct gameState *state) {
        -:  405:  int i;
        -:  406:  int j;
        -:  407:
        -:  408:  //if stack of Province cards is empty, the game ends
    #####:  409:  if (state->supplyCount[province] == 0)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  //if three supply pile are at 0, the game ends
    #####:  415:  j = 0;
    #####:  416:  for (i = 0; i < 25; i++)
        -:  417:    {
    #####:  418:      if (state->supplyCount[i] == 0)
        -:  419:	{
    #####:  420:	  j++;
        -:  421:	}
        -:  422:    }
    #####:  423:  if ( j >= 3)
        -:  424:    {
    #####:  425:      return 1;
        -:  426:    }
        -:  427:
    #####:  428:  return 0;
        -:  429:}
        -:  430:
    #####:  431:int scoreFor (int player, struct gameState *state) {
        -:  432:
        -:  433:  int i;
    #####:  434:  int score = 0;
        -:  435:  //score from hand
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from discard
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        -:  457:  //score from deck
    #####:  458:  for (i = 0; i < state->discardCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  461:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  463:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  464:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  465:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  466:    }
        -:  467:
    #####:  468:  return score;
        -:  469:}
        -:  470:
    #####:  471:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  472:  int i;
        -:  473:  int j;
        -:  474:  int highScore;
        -:  475:  int currentPlayer;
        -:  476:
        -:  477:  //get score for each player
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      //set unused player scores to -9999
    #####:  481:      if (i >= state->numPlayers)
        -:  482:	{
    #####:  483:	  players[i] = -9999;
        -:  484:	}
        -:  485:      else
        -:  486:	{
    #####:  487:	  players[i] = scoreFor (i, state);
        -:  488:	}
        -:  489:    }
        -:  490:
        -:  491:  //find highest score
    #####:  492:  j = 0;
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if (players[i] > players[j])
        -:  496:	{
    #####:  497:	  j = i;
        -:  498:	}
        -:  499:    }
    #####:  500:  highScore = players[j];
        -:  501:
        -:  502:  //add 1 to players who had less turns
    #####:  503:  currentPlayer = whoseTurn(state);
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] == highScore && i > currentPlayer )
        -:  507:	{
    #####:  508:	  players[i]++;
        -:  509:	}
        -:  510:    }
        -:  511:
        -:  512:  //find new highest score
    #####:  513:  j = 0;
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] > players[j] )
        -:  517:	{
    #####:  518:	  j = i;
        -:  519:	}
        -:  520:    }
    #####:  521:  highScore = players[j];
        -:  522:
        -:  523:  //set winners in array to 1 and rest to 0
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] == highScore )
        -:  527:	{
    #####:  528:	  players[i] = 1;
        -:  529:	}
        -:  530:      else
        -:  531:	{
    #####:  532:	  players[i] = 0;
        -:  533:	}
        -:  534:    }
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
       10:  539:int drawCard(int player, struct gameState *state)
        -:  540:{	int count;
        -:  541:  int deckCounter;
       10:  542:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
    #####:  547:    for (i = 0; i < state->discardCount[player];i++){
    #####:  548:      state->deck[player][i] = state->discard[player][i];
    #####:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
    #####:  552:    state->deckCount[player] = state->discardCount[player];
    #####:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
    #####:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
    #####:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
    #####:  565:    count = state->handCount[player];//Get current player's hand count
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
    #####:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
    #####:  573:    if (deckCounter == 0)
    #####:  574:      return -1;
        -:  575:
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
        -:  581:  else{
       10:  582:    int count = state->handCount[player];//Get current hand count for player
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
       10:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  590:    state->deckCount[player]--;
       10:  591:    state->handCount[player]++;//Increment hand count
        -:  592:  }
        -:  593:
       10:  594:  return 0;
        -:  595:}
        -:  596:
    #####:  597:int getCost(int cardNumber)
        -:  598:{
    #####:  599:  switch( cardNumber )
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
        -:  603:    case estate:
    #####:  604:      return 2;
        -:  605:    case duchy:
    #####:  606:      return 5;
        -:  607:    case province:
    #####:  608:      return 8;
        -:  609:    case copper:
    #####:  610:      return 0;
        -:  611:    case silver:
    #####:  612:      return 3;
        -:  613:    case gold:
    #####:  614:      return 6;
        -:  615:    case adventurer:
    #####:  616:      return 6;
        -:  617:    case council_room:
    #####:  618:      return 5;
        -:  619:    case feast:
    #####:  620:      return 4;
        -:  621:    case gardens:
    #####:  622:      return 4;
        -:  623:    case mine:
    #####:  624:      return 5;
        -:  625:    case remodel:
    #####:  626:      return 4;
        -:  627:    case smithy:
    #####:  628:      return 4;
        -:  629:    case village:
    #####:  630:      return 3;
        -:  631:    case baron:
    #####:  632:      return 4;
        -:  633:    case great_hall:
    #####:  634:      return 3;
        -:  635:    case minion:
    #####:  636:      return 5;
        -:  637:    case steward:
    #####:  638:      return 3;
        -:  639:    case tribute:
    #####:  640:      return 5;
        -:  641:    case ambassador:
    #####:  642:      return 3;
        -:  643:    case cutpurse:
    #####:  644:      return 4;
        -:  645:    case embargo:
    #####:  646:      return 2;
        -:  647:    case outpost:
    #####:  648:      return 5;
        -:  649:    case salvager:
    #####:  650:      return 4;
        -:  651:    case sea_hag:
    #####:  652:      return 4;
        -:  653:    case treasure_map:
    #####:  654:      return 4;
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
        -:  658:}
        -:  659:
        1:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int x;
        -:  665:  int index;
        1:  666:  int currentPlayer = whoseTurn(state);
        1:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
        1:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
        1:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:
        -:  675:
        -:  676:  //uses switch to select card and perform actions
        1:  677:  switch( card ) {
        -:  678:
        -:  679:    case adventurer:
    #####:  680:      adventurer_refactor(state, currentPlayer, temphand);
    #####:  681:      return 0;
        -:  682:
        -:  683:    case council_room:
        -:  684:      //+4 Cards
        5:  685:      for (i = 0; i < 4; i++)
        -:  686:	{
        4:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:      //+1 Buy
        1:  691:      state->numBuys++;
        -:  692:
        -:  693:      //Each other player draws a card
        3:  694:      for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
        2:  696:	  if ( i != currentPlayer )
        -:  697:	    {
        1:  698:	      drawCard(i, state);
        -:  699:	    }
        -:  700:	}
        -:  701:
        -:  702:      //put played card in played card pile
        1:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
        1:  705:      return 0;
        -:  706:
        -:  707:    case feast:
        -:  708:      //gain card with cost up to 5
        -:  709:      //Backup hand
    #####:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
    #####:  717:      updateCoins(currentPlayer, state, 5);
    #####:  718:      x = 1;//Condition to loop on
    #####:  719:      while( x == 1) {//Buy one card
    #####:  720:	if (supplyCount(choice1, state) <= 0){
        -:  721:	  if (DEBUG)
        -:  722:	    printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:	  }
        -:  727:	}
    #####:  728:	else if (state->coins < getCost(choice1)){
    #####:  729:	  printf("That card is too expensive!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:	  }
        -:  734:	}
        -:  735:	else{
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
    #####:  741:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  742:	  x = 0;//No more buying cards
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
        -:  748:	}
        -:  749:      }
        -:  750:
        -:  751:      //Reset Hand
    #####:  752:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  753:	state->hand[currentPlayer][i] = temphand[i];
    #####:  754:	temphand[i] = -1;
        -:  755:      }
        -:  756:      //Reset Hand
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case gardens:
    #####:  761:      return -1;
        -:  762:
        -:  763:    case mine:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if (choice2 > treasure_map || choice2 < curse)
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 2, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case remodel:
    #####:  799:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      gainCard(choice2, state, 0, currentPlayer);
        -:  807:
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
        -:  810:
        -:  811:      //discard trashed card
    #####:  812:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:	{
    #####:  814:	  if (state->hand[currentPlayer][i] == j)
        -:  815:	    {
    #####:  816:	      discardCard(i, currentPlayer, state, 0);
    #####:  817:	      break;
        -:  818:	    }
        -:  819:	}
        -:  820:
        -:  821:
    #####:  822:      return 0;
        -:  823:
        -:  824:    case smithy:
    #####:  825:      smithy_refactor(state, currentPlayer, handPos);
    #####:  826:      return 0;
        -:  827:
        -:  828:    case village:
        -:  829:      //+1 Card
    #####:  830:      drawCard(currentPlayer, state);
        -:  831:
        -:  832:      //+2 Actions
    #####:  833:      state->numActions = state->numActions + 2;
        -:  834:
        -:  835:      //discard played card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
    #####:  837:      return 0;
        -:  838:
        -:  839:    case baron:
    #####:  840:      baron_refactor(state, currentPlayer, choice1);
    #####:  841:      return 0;
        -:  842:
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:
        -:  854:    case minion:
    #####:  855:      minion_refactor(state, currentPlayer, handPos, choice1, choice2);
    #####:  856:      return 0;
        -:  857:
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
    #####:  863:	  drawCard(currentPlayer, state);
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
        -:  875:	}
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  909:	}
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }
        -:  917:
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  930:	  drawCard(currentPlayer, state);
    #####:  931:	  drawCard(currentPlayer, state);
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:
    #####:  938:      return 0;
        -:  939:
        -:  940:    case ambassador:
    #####:  941:      j = 0;		//used to check if player has enough cards to discard
        -:  942:
    #####:  943:      if (choice2 > 2 || choice2 < 0)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice1 == handPos)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  956:	    {
    #####:  957:	      j++;
        -:  958:	    }
        -:  959:	}
    #####:  960:      if (j < choice2)
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      if (DEBUG)
        -:  966:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  967:
        -:  968:      //increase supply count for choosen card by amount being discarded
    #####:  969:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  970:
        -:  971:      //each other player gains a copy of revealed card
    #####:  972:      for (i = 0; i < state->numPlayers; i++)
        -:  973:	{
    #####:  974:	  if (i != currentPlayer)
        -:  975:	    {
    #####:  976:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:      //trash copies of cards returned to supply
    #####:  984:      for (j = 0; j < choice2; j++)
        -:  985:	{
    #####:  986:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:	    {
    #####:  988:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  989:		{
    #####:  990:		  discardCard(i, currentPlayer, state, 1);
    #####:  991:		  break;
        -:  992:		}
        -:  993:	    }
        -:  994:	}
        -:  995:
    #####:  996:      return 0;
        -:  997:
        -:  998:    case cutpurse:
    #####:  999:      cutpurse_refactor(state, currentPlayer, handPos);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:
        -: 1003:    case embargo:
        -: 1004:      //+2 Coins
    #####: 1005:      state->coins = state->coins + 2;
        -: 1006:
        -: 1007:      //see if selected pile is in play
    #####: 1008:      if ( state->supplyCount[choice1] == -1 )
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      //add embargo token to selected supply pile
    #####: 1014:      state->embargoTokens[choice1]++;
        -: 1015:
        -: 1016:      //trash card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case outpost:
        -: 1021:      //set outpost flag
    #####: 1022:      state->outpostPlayed++;
        -: 1023:
        -: 1024:      //discard card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case salvager:
        -: 1029:      //+1 buy
    #####: 1030:      state->numBuys++;
        -: 1031:
    #####: 1032:      if (choice1)
        -: 1033:	{
        -: 1034:	  //gain coins equal to trashed card
    #####: 1035:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1036:	  //trash card
    #####: 1037:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case sea_hag:
    #####: 1045:      for (i = 0; i < state->numPlayers; i++){
    #####: 1046:	if (i != currentPlayer){
    #####: 1047:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1048:	  state->discardCount[i]++;
    #####: 1049:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1050:	}
        -: 1051:      }
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:    case treasure_map:
        -: 1055:      //search hand for another treasure_map
    #####: 1056:      index = -1;
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:	{
    #####: 1059:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1060:	    {
    #####: 1061:	      index = i;
    #####: 1062:	      break;
        -: 1063:	    }
        -: 1064:	}
    #####: 1065:      if (index > -1)
        -: 1066:	{
        -: 1067:	  //trash both treasure cards
    #####: 1068:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1069:	  discardCard(index, currentPlayer, state, 1);
        -: 1070:
        -: 1071:	  //gain 4 Gold cards
    #####: 1072:	  for (i = 0; i < 4; i++)
        -: 1073:	    {
    #####: 1074:	      gainCard(gold, state, 1, currentPlayer);
        -: 1075:	    }
        -: 1076:
        -: 1077:	  //return success
    #####: 1078:	  return 1;
        -: 1079:	}
        -: 1080:
        -: 1081:      //no second treasure_map found in hand
    #####: 1082:      return -1;
        -: 1083:    }
        -: 1084:
    #####: 1085:  return -1;
        -: 1086:}
        -: 1087:
        -: 1088:/*******************************************************************************
        -: 1089:* Description: adventurer_refactor function
        -: 1090:*******************************************************************************/
        -: 1091:
    #####: 1092:void adventurer_refactor(struct gameState *state, int currentPlayer, int *temphand) {
    #####: 1093:  int drawntreasure = 0,
        -: 1094:      cardDrawn,
    #####: 1095:      z = 0;
        -: 1096:
    #####: 1097:  while(drawntreasure > 2) {
    #####: 1098:    if(state->deckCount[currentPlayer] < 1) {                                   //if the deck is empty we need to shuffle discard and add to deck
    #####: 1099:      shuffle(currentPlayer, state);
        -: 1100:    }
    #####: 1101:    drawCard(currentPlayer, state);
    #####: 1102:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];  //top card of hand is most recently drawn card.
    #####: 1103:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1104:      drawntreasure++;
        -: 1105:    } else {
    #####: 1106:      temphand[z]=cardDrawn;
    #####: 1107:      state->handCount[currentPlayer]--;                                        //this should just remove the top card (the most recently drawn one).
    #####: 1108:      z++;
        -: 1109:    }
        -: 1110:  }
    #####: 1111:  while(z - 1 >= 0) {
    #####: 1112:    state->discard[currentPlayer][state->discardCount[currentPlayer] ++]
    #####: 1113:    = temphand[z - 1];                                                          // discard all cards in play that have been drawn
    #####: 1114:    z = z - 1;
        -: 1115:  }
    #####: 1116:}
        -: 1117:
        -: 1118:/*******************************************************************************
        -: 1119:* Description: smithy_refactor function
        -: 1120:*******************************************************************************/
        -: 1121:
    #####: 1122:void smithy_refactor(struct gameState *state, int currentPlayer, int handPos) {
        -: 1123:  //+3 Cards
    #####: 1124:  int i = 0;
    #####: 1125:  for (i = 0; i < 10; i++) {
    #####: 1126:    drawCard(currentPlayer, state);
        -: 1127:  }
        -: 1128:  //discard card from hand
    #####: 1129:  discardCard(handPos, currentPlayer, state, 0);
        -: 1130:  // return 0;
    #####: 1131:}
        -: 1132:
        -: 1133:/*******************************************************************************
        -: 1134:* Description: baron_refactor function
        -: 1135:*******************************************************************************/
        -: 1136:
    #####: 1137:void baron_refactor(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1138:  state->numBuys ++;                                                            //Increase buys by 1!
    #####: 1139:  if (choice1 > 0) {                                                            //Boolean true or going to discard an estate
    #####: 1140:    int p = 0;                                                                  //Iterator for hand!
    #####: 1141:    int card_not_discarded = 1;                                                 //Flag for discard set!
    #####: 1142:    while(card_not_discarded) {
    #####: 1143:      if (state->hand[currentPlayer][p] == estate) {                            //Found an estate card!
    #####: 1144:        state->coins += 4;                                                      //Add 4 coins to the amount of coins
    #####: 1145:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1146:        state->discardCount[currentPlayer] ++;
    #####: 1147:        for (;p < state->handCount[currentPlayer]; p ++) {
    #####: 1148:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1149:        }
    #####: 1150:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1151:        state->handCount[currentPlayer]--;
    #####: 1152:        card_not_discarded = 0;                                                 //Exit the loop
    #####: 1153:      } else if (p > state->handCount[currentPlayer]) {
        -: 1154:        if(DEBUG) {
        -: 1155:          printf("No estate cards in your hand, invalid choice\n");
        -: 1156:          printf("Must gain an estate if there are any\n");
        -: 1157:        }
    #####: 1158:        if (supplyCount(estate, state) > 0) {
    #####: 1159:          gainCard(estate, state, 0, currentPlayer);
    #####: 1160:          state->supplyCount[estate]--;                                         //Decrement estates
    #####: 1161:          if (supplyCount(estate, state) == 0) {
    #####: 1162:            isGameOver(state);
        -: 1163:          }
        -: 1164:        }
    #####: 1165:        card_not_discarded = 0;                                                 //Exit the loop
        -: 1166:      } else {
    #####: 1167:        p ++;                                                                   //Next card
        -: 1168:      }
        -: 1169:    }
        -: 1170:  } else {
    #####: 1171:    if (supplyCount(estate, state) > 0) {
    #####: 1172:      gainCard(estate, state, 0, currentPlayer);                                //Gain an estate
    #####: 1173:      state->supplyCount[estate]--;                                             //Decrement Estates
    #####: 1174:      if (supplyCount(estate, state) == 0){
    #####: 1175:        isGameOver(state);
        -: 1176:      }
        -: 1177:    }
        -: 1178:  }
    #####: 1179:}
        -: 1180:
        -: 1181:/*******************************************************************************
        -: 1182:* Description: minion_refactor function
        -: 1183:*******************************************************************************/
        -: 1184:
    #####: 1185:void minion_refactor(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
    #####: 1186:  int i = 0,
    #####: 1187:      j = 0;
        -: 1188:  //+1 action
    #####: 1189:  state->numActions++;
        -: 1190:
        -: 1191:  //discard card from hand
    #####: 1192:  discardCard(handPos, currentPlayer, state, 0);
        -: 1193:  //+2 coins
    #####: 1194:  if (choice2) {
    #####: 1195:    state->coins = state->coins + 2;
    #####: 1196:  } else if (choice1) {                                                         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1197:    //discard hand
    #####: 1198:    while(numHandCards(state) > 0) {
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:    }
        -: 1201:    //draw 4
    #####: 1202:    for (i = 0; i < 4; i++) {
    #####: 1203:      drawCard(currentPlayer, state);
        -: 1204:    }
        -: 1205:    //other players discard hand and redraw if hand size > 4
    #####: 1206:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:      if (i != currentPlayer) {
    #####: 1208:        if ( state->handCount[i] > 4 ) {
        -: 1209:          //discard hand
    #####: 1210:          while( state->handCount[i] > 0 ) {
    #####: 1211:            discardCard(handPos, i, state, 0);
        -: 1212:          }
        -: 1213:          //draw 4
    #####: 1214:          for (j = 0; j < 4; j++) {
    #####: 1215:            drawCard(i, state);
        -: 1216:          }
        -: 1217:        }
        -: 1218:      }
        -: 1219:    }
        -: 1220:  }
    #####: 1221:}
        -: 1222:
        -: 1223:/*******************************************************************************
        -: 1224:* Description: cutpurse_refactor function
        -: 1225:*******************************************************************************/
        -: 1226:
    #####: 1227:void cutpurse_refactor(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1228:  int i = 0,
    #####: 1229:      j = 0,
    #####: 1230:      k = 0;
    #####: 1231:  updateCoins(currentPlayer, state, 2);
    #####: 1232:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1233:    if (j != currentPlayer) {
    #####: 1234:      for (j = 0; j < state->handCount[i]; j++) {
    #####: 1235:        if (state->hand[i][j] == copper) {
    #####: 1236:          discardCard(j, i, state, 0);
    #####: 1237:          break;
        -: 1238:        }
    #####: 1239:        if (j == state->handCount[i]) {
    #####: 1240:          for (k = 0; k < state->handCount[i]; k++) {
        -: 1241:            if (DEBUG) {
        -: 1242:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:            }
        -: 1244:          }
    #####: 1245:          break;
        -: 1246:        }
        -: 1247:      }
        -: 1248:    }
        -: 1249:  }
        -: 1250:  //discard played card from hand
    #####: 1251:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:}
        -: 1253:
        1: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:  //if card is not trashed, added to Played pile
        1: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
        1: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:  //set played card to -1
        1: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:  //remove card from player's hand
        1: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
        1: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
        1: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
        1: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
        1: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
        1: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
        1: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:
        -: 1333:  //reset coin count
        1: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
        6: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
        5: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
        4: 1341:	  state->coins += 1;
        -: 1342:	}
        1: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
        1: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}
        -: 1351:    }
        -: 1352:
        -: 1353:  //add bonus
        1: 1354:  state->coins += bonus;
        -: 1355:
        1: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
cardtest4.c:
----------------- Testing: village_Card()------------------

 TEST 1: Player0 gains 1 card
Test: PASSED

 TEST 2: Player0 gains 1 card from his own pile
Test: PASSED

 TEST 3: Player0 gains two actions
Test: PASSED

 TEST 4: No change to victory card piles
Province Pile
Test: PASSED
Duchy Pile
Test: PASSED
Estate Pile
Test: PASSED

 TEST 5: Player1 was not affected
Hand Count
Test: PASSED
Deck Count
Test: PASSED

TEST 6: No change to kingdom card piles
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED
checking card piles...
Test: PASSED

TEST SUCCESSFULLY COMPLETED

File 'cardtest4.c'
Lines executed:91.67% of 48
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:19.65% of 570
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** PREPROCESSOR DIRECTIVES
        -:    3:*******************************************************************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:/*******************************************************************************
        -:   13:** FUNCTION DECLARATIONS
        -:   14:*******************************************************************************/
        -:   15:
        -:   16:void adventurer_refactor(struct gameState*, int, int*);                         // Declare function for adventurer card functionality
        -:   17:void smithy_refactor(struct gameState*, int, int);                              // Declare function for smithy card functionality
        -:   18:void baron_refactor(struct gameState*, int, int);                               // Declare function for baron card functionality
        -:   19:void minion_refactor(struct gameState*, int, int, int, int);                    // Declare function for minion card functionality
        -:   20:void cutpurse_refactor(struct gameState*, int, int);                            // Declare function for cutpurse card functionality
        -:   21:
       30:   22:int compare(const void* a, const void* b) {
       30:   23:  if (*(int*)a > *(int*)b)
    #####:   24:    return 1;
       30:   25:  if (*(int*)a < *(int*)b)
        8:   26:    return -1;
       22:   27:  return 0;
        -:   28:}
        -:   29:
    #####:   30:struct gameState* newGame() {
    #####:   31:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   32:  return g;
        -:   33:}
        -:   34:
    #####:   35:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   36:		  int k8, int k9, int k10) {
    #####:   37:  int* k = malloc(10 * sizeof(int));
    #####:   38:  k[0] = k1;
    #####:   39:  k[1] = k2;
    #####:   40:  k[2] = k3;
    #####:   41:  k[3] = k4;
    #####:   42:  k[4] = k5;
    #####:   43:  k[5] = k6;
    #####:   44:  k[6] = k7;
    #####:   45:  k[7] = k8;
    #####:   46:  k[8] = k9;
    #####:   47:  k[9] = k10;
    #####:   48:  return k;
        -:   49:}
        -:   50:
        1:   51:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   52:		   struct gameState *state) {
        -:   53:
        -:   54:  int i;
        -:   55:  int j;
        -:   56:  int it;
        -:   57:  //set up random number generator
        1:   58:  SelectStream(1);
        1:   59:  PutSeed((long)randomSeed);
        -:   60:
        -:   61:  //check number of players
        1:   62:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:      return -1;
        -:   65:    }
        -:   66:
        -:   67:  //set number of players
        1:   68:  state->numPlayers = numPlayers;
        -:   69:
        -:   70:  //check selected kingdom cards are different
       11:   71:  for (i = 0; i < 10; i++)
        -:   72:    {
      110:   73:      for (j = 0; j < 10; j++)
        -:   74:        {
      100:   75:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:	    {
    #####:   77:	      return -1;
        -:   78:	    }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:
        -:   83:  //initialize supply
        -:   84:  ///////////////////////////////
        -:   85:
        -:   86:  //set number of Curse cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[curse] = 10;
        -:   90:    }
    #####:   91:  else if (numPlayers == 3)
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 20;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[curse] = 30;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Victory cards
        1:  101:  if (numPlayers == 2)
        -:  102:    {
        1:  103:      state->supplyCount[estate] = 8;
        1:  104:      state->supplyCount[duchy] = 8;
        1:  105:      state->supplyCount[province] = 8;
        -:  106:    }
        -:  107:  else
        -:  108:    {
    #####:  109:      state->supplyCount[estate] = 12;
    #####:  110:      state->supplyCount[duchy] = 12;
    #####:  111:      state->supplyCount[province] = 12;
        -:  112:    }
        -:  113:
        -:  114:  //set number of Treasure cards
        1:  115:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  116:  state->supplyCount[silver] = 40;
        1:  117:  state->supplyCount[gold] = 30;
        -:  118:
        -:  119:  //set number of Kingdom cards
       21:  120:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  121:    {
      165:  122:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  123:	{
      155:  124:	  if (kingdomCards[j] == i)
        -:  125:	    {
        -:  126:	      //check if card is a 'Victory' Kingdom card
       10:  127:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:		{
        4:  129:		  if (numPlayers == 2){
        2:  130:		    state->supplyCount[i] = 8;
        -:  131:		  }
    #####:  132:		  else{ state->supplyCount[i] = 12; }
        -:  133:		}
        -:  134:	      else
        -:  135:		{
        8:  136:		  state->supplyCount[i] = 10;
        -:  137:		}
       10:  138:	      break;
        -:  139:	    }
        -:  140:	  else    //card is not in the set choosen for the game
        -:  141:	    {
      145:  142:	      state->supplyCount[i] = -1;
        -:  143:	    }
        -:  144:	}
        -:  145:
        -:  146:    }
        -:  147:
        -:  148:  ////////////////////////
        -:  149:  //supply intilization complete
        -:  150:
        -:  151:  //set player decks
        3:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
        2:  154:      state->deckCount[i] = 0;
        8:  155:      for (j = 0; j < 3; j++)
        -:  156:	{
        6:  157:	  state->deck[i][j] = estate;
        6:  158:	  state->deckCount[i]++;
        -:  159:	}
       16:  160:      for (j = 3; j < 10; j++)
        -:  161:	{
       14:  162:	  state->deck[i][j] = copper;
       14:  163:	  state->deckCount[i]++;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //shuffle player decks
        3:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        2:  170:      if ( shuffle(i, state) < 0 )
        -:  171:	{
    #####:  172:	  return -1;
        -:  173:	}
        -:  174:    }
        -:  175:
        -:  176:  //draw player hands
        3:  177:  for (i = 0; i < numPlayers; i++)
        -:  178:    {
        -:  179:      //initialize hand size to zero
        2:  180:      state->handCount[i] = 0;
        2:  181:      state->discardCount[i] = 0;
        -:  182:      //draw 5 cards
        -:  183:      // for (j = 0; j < 5; j++)
        -:  184:      //	{
        -:  185:      //	  drawCard(i, state);
        -:  186:      //	}
        -:  187:    }
        -:  188:
        -:  189:  //set embargo tokens to 0 for all supply piles
       28:  190:  for (i = 0; i <= treasure_map; i++)
        -:  191:    {
       27:  192:      state->embargoTokens[i] = 0;
        -:  193:    }
        -:  194:
        -:  195:  //initialize first player's turn
        1:  196:  state->outpostPlayed = 0;
        1:  197:  state->phase = 0;
        1:  198:  state->numActions = 1;
        1:  199:  state->numBuys = 1;
        1:  200:  state->playedCardCount = 0;
        1:  201:  state->whoseTurn = 0;
        1:  202:  state->handCount[state->whoseTurn] = 0;
        -:  203:  //int it; move to top
        -:  204:
        -:  205:  //Moved draw cards to here, only drawing at the start of a turn
        6:  206:  for (it = 0; it < 5; it++){
        5:  207:    drawCard(state->whoseTurn, state);
        -:  208:  }
        -:  209:
        1:  210:  updateCoins(state->whoseTurn, state, 0);
        -:  211:
        1:  212:  return 0;
        -:  213:}
        -:  214:
        2:  215:int shuffle(int player, struct gameState *state) {
        -:  216:
        -:  217:
        -:  218:  int newDeck[MAX_DECK];
        2:  219:  int newDeckPos = 0;
        -:  220:  int card;
        -:  221:  int i;
        -:  222:
        2:  223:  if (state->deckCount[player] < 1)
    #####:  224:    return -1;
        2:  225:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  226:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  227:
       24:  228:  while (state->deckCount[player] > 0) {
       20:  229:    card = floor(Random() * state->deckCount[player]);
       20:  230:    newDeck[newDeckPos] = state->deck[player][card];
       20:  231:    newDeckPos++;
       76:  232:    for (i = card; i < state->deckCount[player]-1; i++) {
       56:  233:      state->deck[player][i] = state->deck[player][i+1];
        -:  234:    }
       20:  235:    state->deckCount[player]--;
        -:  236:  }
       22:  237:  for (i = 0; i < newDeckPos; i++) {
       20:  238:    state->deck[player][i] = newDeck[i];
       20:  239:    state->deckCount[player]++;
        -:  240:  }
        -:  241:
        2:  242:  return 0;
        -:  243:}
        -:  244:
    #####:  245:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  246:{
        -:  247:  int card;
    #####:  248:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  249:
        -:  250:  //check if it is the right phase
    #####:  251:  if (state->phase != 0)
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //check if player has enough actions
    #####:  257:  if ( state->numActions < 1 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //get card played
    #####:  263:  card = handCard(handPos, state);
        -:  264:
        -:  265:  //check if selected card is an action
    #####:  266:  if ( card < adventurer || card > treasure_map )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //play card
    #####:  272:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  273:    {
    #####:  274:      return -1;
        -:  275:    }
        -:  276:
        -:  277:  //reduce number of actions
    #####:  278:  state->numActions--;
        -:  279:
        -:  280:  //update coins (Treasure cards may be added with card draws)
    #####:  281:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  282:
    #####:  283:  return 0;
        -:  284:}
        -:  285:
    #####:  286:int buyCard(int supplyPos, struct gameState *state) {
        -:  287:  int who;
        -:  288:  if (DEBUG){
        -:  289:    printf("Entering buyCard...\n");
        -:  290:  }
        -:  291:
        -:  292:  // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:  who = state->whoseTurn;
        -:  295:
    #####:  296:  if (state->numBuys < 1){
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have any buys left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (supplyCount(supplyPos, state) <1){
        -:  301:    if (DEBUG)
        -:  302:      printf("There are not any of that type of card left\n");
    #####:  303:    return -1;
    #####:  304:  } else if (state->coins < getCost(supplyPos)){
        -:  305:    if (DEBUG)
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  } else {
    #####:  309:    state->phase=1;
        -:  310:    //state->supplyCount[supplyPos]--;
    #####:  311:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  312:
    #####:  313:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  314:    state->numBuys--;
        -:  315:    if (DEBUG)
        -:  316:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  317:  }
        -:  318:
        -:  319:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  320:  //state->discardCount[who]++;
        -:  321:
    #####:  322:  return 0;
        -:  323:}
        -:  324:
    #####:  325:int numHandCards(struct gameState *state) {
    #####:  326:  return state->handCount[ whoseTurn(state) ];
        -:  327:}
        -:  328:
    #####:  329:int handCard(int handPos, struct gameState *state) {
    #####:  330:  int currentPlayer = whoseTurn(state);
    #####:  331:  return state->hand[currentPlayer][handPos];
        -:  332:}
        -:  333:
    #####:  334:int supplyCount(int card, struct gameState *state) {
    #####:  335:  return state->supplyCount[card];
        -:  336:}
        -:  337:
    #####:  338:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  339:  int i;
    #####:  340:  int count = 0;
        -:  341:
    #####:  342:  for (i = 0; i < state->deckCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->deck[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->handCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->hand[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  for (i = 0; i < state->discardCount[player]; i++)
        -:  353:    {
    #####:  354:      if (state->discard[player][i] == card) count++;
        -:  355:    }
        -:  356:
    #####:  357:  return count;
        -:  358:}
        -:  359:
        1:  360:int whoseTurn(struct gameState *state) {
        1:  361:  return state->whoseTurn;
        -:  362:}
        -:  363:
    #####:  364:int endTurn(struct gameState *state) {
        -:  365:  int k;
        -:  366:  int i;
    #####:  367:  int currentPlayer = whoseTurn(state);
        -:  368:
        -:  369:  //Discard hand
    #####:  370:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  371:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  372:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  373:  }
    #####:  374:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  375:
        -:  376:  //Code for determining the player
    #####:  377:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  378:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  379:  }
        -:  380:  else{
    #####:  381:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:  }
        -:  383:
    #####:  384:  state->outpostPlayed = 0;
    #####:  385:  state->phase = 0;
    #####:  386:  state->numActions = 1;
    #####:  387:  state->coins = 0;
    #####:  388:  state->numBuys = 1;
    #####:  389:  state->playedCardCount = 0;
    #####:  390:  state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:  //int k; move to top
        -:  393:  //Next player draws hand
    #####:  394:  for (k = 0; k < 5; k++){
    #####:  395:    drawCard(state->whoseTurn, state);//Draw a card
        -:  396:  }
        -:  397:
        -:  398:  //Update money
    #####:  399:  updateCoins(state->whoseTurn, state , 0);
        -:  400:
    #####:  401:  return 0;
        -:  402:}
        -:  403:
    #####:  404:int isGameOver(struct gameState *state) {
        -:  405:  int i;
        -:  406:  int j;
        -:  407:
        -:  408:  //if stack of Province cards is empty, the game ends
    #####:  409:  if (state->supplyCount[province] == 0)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  //if three supply pile are at 0, the game ends
    #####:  415:  j = 0;
    #####:  416:  for (i = 0; i < 25; i++)
        -:  417:    {
    #####:  418:      if (state->supplyCount[i] == 0)
        -:  419:	{
    #####:  420:	  j++;
        -:  421:	}
        -:  422:    }
    #####:  423:  if ( j >= 3)
        -:  424:    {
    #####:  425:      return 1;
        -:  426:    }
        -:  427:
    #####:  428:  return 0;
        -:  429:}
        -:  430:
    #####:  431:int scoreFor (int player, struct gameState *state) {
        -:  432:
        -:  433:  int i;
    #####:  434:  int score = 0;
        -:  435:  //score from hand
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from discard
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        -:  457:  //score from deck
    #####:  458:  for (i = 0; i < state->discardCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  461:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  463:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  464:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  465:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  466:    }
        -:  467:
    #####:  468:  return score;
        -:  469:}
        -:  470:
    #####:  471:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  472:  int i;
        -:  473:  int j;
        -:  474:  int highScore;
        -:  475:  int currentPlayer;
        -:  476:
        -:  477:  //get score for each player
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      //set unused player scores to -9999
    #####:  481:      if (i >= state->numPlayers)
        -:  482:	{
    #####:  483:	  players[i] = -9999;
        -:  484:	}
        -:  485:      else
        -:  486:	{
    #####:  487:	  players[i] = scoreFor (i, state);
        -:  488:	}
        -:  489:    }
        -:  490:
        -:  491:  //find highest score
    #####:  492:  j = 0;
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if (players[i] > players[j])
        -:  496:	{
    #####:  497:	  j = i;
        -:  498:	}
        -:  499:    }
    #####:  500:  highScore = players[j];
        -:  501:
        -:  502:  //add 1 to players who had less turns
    #####:  503:  currentPlayer = whoseTurn(state);
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] == highScore && i > currentPlayer )
        -:  507:	{
    #####:  508:	  players[i]++;
        -:  509:	}
        -:  510:    }
        -:  511:
        -:  512:  //find new highest score
    #####:  513:  j = 0;
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] > players[j] )
        -:  517:	{
    #####:  518:	  j = i;
        -:  519:	}
        -:  520:    }
    #####:  521:  highScore = players[j];
        -:  522:
        -:  523:  //set winners in array to 1 and rest to 0
    #####:  524:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  525:    {
    #####:  526:      if ( players[i] == highScore )
        -:  527:	{
    #####:  528:	  players[i] = 1;
        -:  529:	}
        -:  530:      else
        -:  531:	{
    #####:  532:	  players[i] = 0;
        -:  533:	}
        -:  534:    }
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
        6:  539:int drawCard(int player, struct gameState *state)
        -:  540:{	int count;
        -:  541:  int deckCounter;
        6:  542:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
    #####:  547:    for (i = 0; i < state->discardCount[player];i++){
    #####:  548:      state->deck[player][i] = state->discard[player][i];
    #####:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
    #####:  552:    state->deckCount[player] = state->discardCount[player];
    #####:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
    #####:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
    #####:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
    #####:  565:    count = state->handCount[player];//Get current player's hand count
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
    #####:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
    #####:  573:    if (deckCounter == 0)
    #####:  574:      return -1;
        -:  575:
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
        -:  581:  else{
        6:  582:    int count = state->handCount[player];//Get current hand count for player
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
        6:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  590:    state->deckCount[player]--;
        6:  591:    state->handCount[player]++;//Increment hand count
        -:  592:  }
        -:  593:
        6:  594:  return 0;
        -:  595:}
        -:  596:
    #####:  597:int getCost(int cardNumber)
        -:  598:{
    #####:  599:  switch( cardNumber )
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
        -:  603:    case estate:
    #####:  604:      return 2;
        -:  605:    case duchy:
    #####:  606:      return 5;
        -:  607:    case province:
    #####:  608:      return 8;
        -:  609:    case copper:
    #####:  610:      return 0;
        -:  611:    case silver:
    #####:  612:      return 3;
        -:  613:    case gold:
    #####:  614:      return 6;
        -:  615:    case adventurer:
    #####:  616:      return 6;
        -:  617:    case council_room:
    #####:  618:      return 5;
        -:  619:    case feast:
    #####:  620:      return 4;
        -:  621:    case gardens:
    #####:  622:      return 4;
        -:  623:    case mine:
    #####:  624:      return 5;
        -:  625:    case remodel:
    #####:  626:      return 4;
        -:  627:    case smithy:
    #####:  628:      return 4;
        -:  629:    case village:
    #####:  630:      return 3;
        -:  631:    case baron:
    #####:  632:      return 4;
        -:  633:    case great_hall:
    #####:  634:      return 3;
        -:  635:    case minion:
    #####:  636:      return 5;
        -:  637:    case steward:
    #####:  638:      return 3;
        -:  639:    case tribute:
    #####:  640:      return 5;
        -:  641:    case ambassador:
    #####:  642:      return 3;
        -:  643:    case cutpurse:
    #####:  644:      return 4;
        -:  645:    case embargo:
    #####:  646:      return 2;
        -:  647:    case outpost:
    #####:  648:      return 5;
        -:  649:    case salvager:
    #####:  650:      return 4;
        -:  651:    case sea_hag:
    #####:  652:      return 4;
        -:  653:    case treasure_map:
    #####:  654:      return 4;
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
        -:  658:}
        -:  659:
        1:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int x;
        -:  665:  int index;
        1:  666:  int currentPlayer = whoseTurn(state);
        1:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
        1:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
        1:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:
        -:  675:
        -:  676:  //uses switch to select card and perform actions
        1:  677:  switch( card ) {
        -:  678:
        -:  679:    case adventurer:
    #####:  680:      adventurer_refactor(state, currentPlayer, temphand);
    #####:  681:      return 0;
        -:  682:
        -:  683:    case council_room:
        -:  684:      //+4 Cards
    #####:  685:      for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:      //+1 Buy
    #####:  691:      state->numBuys++;
        -:  692:
        -:  693:      //Each other player draws a card
    #####:  694:      for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:	  if ( i != currentPlayer )
        -:  697:	    {
    #####:  698:	      drawCard(i, state);
        -:  699:	    }
        -:  700:	}
        -:  701:
        -:  702:      //put played card in played card pile
    #####:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:      return 0;
        -:  706:
        -:  707:    case feast:
        -:  708:      //gain card with cost up to 5
        -:  709:      //Backup hand
    #####:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  711:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  712:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
    #####:  717:      updateCoins(currentPlayer, state, 5);
    #####:  718:      x = 1;//Condition to loop on
    #####:  719:      while( x == 1) {//Buy one card
    #####:  720:	if (supplyCount(choice1, state) <= 0){
        -:  721:	  if (DEBUG)
        -:  722:	    printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:	  }
        -:  727:	}
    #####:  728:	else if (state->coins < getCost(choice1)){
    #####:  729:	  printf("That card is too expensive!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  733:	  }
        -:  734:	}
        -:  735:	else{
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:	  }
        -:  740:
    #####:  741:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  742:	  x = 0;//No more buying cards
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
        -:  748:	}
        -:  749:      }
        -:  750:
        -:  751:      //Reset Hand
    #####:  752:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  753:	state->hand[currentPlayer][i] = temphand[i];
    #####:  754:	temphand[i] = -1;
        -:  755:      }
        -:  756:      //Reset Hand
        -:  757:
    #####:  758:      return 0;
        -:  759:
        -:  760:    case gardens:
    #####:  761:      return -1;
        -:  762:
        -:  763:    case mine:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if (choice2 > treasure_map || choice2 < curse)
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:
    #####:  781:      gainCard(choice2, state, 2, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
    #####:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
    #####:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
    #####:  791:	      discardCard(i, currentPlayer, state, 0);
    #####:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case remodel:
    #####:  799:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  800:
    #####:  801:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  802:	{
    #####:  803:	  return -1;
        -:  804:	}
        -:  805:
    #####:  806:      gainCard(choice2, state, 0, currentPlayer);
        -:  807:
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
        -:  810:
        -:  811:      //discard trashed card
    #####:  812:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:	{
    #####:  814:	  if (state->hand[currentPlayer][i] == j)
        -:  815:	    {
    #####:  816:	      discardCard(i, currentPlayer, state, 0);
    #####:  817:	      break;
        -:  818:	    }
        -:  819:	}
        -:  820:
        -:  821:
    #####:  822:      return 0;
        -:  823:
        -:  824:    case smithy:
    #####:  825:      smithy_refactor(state, currentPlayer, handPos);
    #####:  826:      return 0;
        -:  827:
        -:  828:    case village:
        -:  829:      //+1 Card
        1:  830:      drawCard(currentPlayer, state);
        -:  831:
        -:  832:      //+2 Actions
        1:  833:      state->numActions = state->numActions + 2;
        -:  834:
        -:  835:      //discard played card from hand
        1:  836:      discardCard(handPos, currentPlayer, state, 0);
        1:  837:      return 0;
        -:  838:
        -:  839:    case baron:
    #####:  840:      baron_refactor(state, currentPlayer, choice1);
    #####:  841:      return 0;
        -:  842:
        -:  843:    case great_hall:
        -:  844:      //+1 Card
    #####:  845:      drawCard(currentPlayer, state);
        -:  846:
        -:  847:      //+1 Actions
    #####:  848:      state->numActions++;
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
    #####:  852:      return 0;
        -:  853:
        -:  854:    case minion:
    #####:  855:      minion_refactor(state, currentPlayer, handPos, choice1, choice2);
    #####:  856:      return 0;
        -:  857:
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
    #####:  863:	  drawCard(currentPlayer, state);
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
        -:  875:	}
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  909:	}
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }
        -:  917:
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  930:	  drawCard(currentPlayer, state);
    #####:  931:	  drawCard(currentPlayer, state);
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:
    #####:  938:      return 0;
        -:  939:
        -:  940:    case ambassador:
    #####:  941:      j = 0;		//used to check if player has enough cards to discard
        -:  942:
    #####:  943:      if (choice2 > 2 || choice2 < 0)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice1 == handPos)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  956:	    {
    #####:  957:	      j++;
        -:  958:	    }
        -:  959:	}
    #####:  960:      if (j < choice2)
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
        -:  965:      if (DEBUG)
        -:  966:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  967:
        -:  968:      //increase supply count for choosen card by amount being discarded
    #####:  969:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  970:
        -:  971:      //each other player gains a copy of revealed card
    #####:  972:      for (i = 0; i < state->numPlayers; i++)
        -:  973:	{
    #####:  974:	  if (i != currentPlayer)
        -:  975:	    {
    #####:  976:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
        -:  983:      //trash copies of cards returned to supply
    #####:  984:      for (j = 0; j < choice2; j++)
        -:  985:	{
    #####:  986:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:	    {
    #####:  988:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  989:		{
    #####:  990:		  discardCard(i, currentPlayer, state, 1);
    #####:  991:		  break;
        -:  992:		}
        -:  993:	    }
        -:  994:	}
        -:  995:
    #####:  996:      return 0;
        -:  997:
        -:  998:    case cutpurse:
    #####:  999:      cutpurse_refactor(state, currentPlayer, handPos);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:
        -: 1003:    case embargo:
        -: 1004:      //+2 Coins
    #####: 1005:      state->coins = state->coins + 2;
        -: 1006:
        -: 1007:      //see if selected pile is in play
    #####: 1008:      if ( state->supplyCount[choice1] == -1 )
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      //add embargo token to selected supply pile
    #####: 1014:      state->embargoTokens[choice1]++;
        -: 1015:
        -: 1016:      //trash card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case outpost:
        -: 1021:      //set outpost flag
    #####: 1022:      state->outpostPlayed++;
        -: 1023:
        -: 1024:      //discard card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:
        -: 1028:    case salvager:
        -: 1029:      //+1 buy
    #####: 1030:      state->numBuys++;
        -: 1031:
    #####: 1032:      if (choice1)
        -: 1033:	{
        -: 1034:	  //gain coins equal to trashed card
    #####: 1035:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1036:	  //trash card
    #####: 1037:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case sea_hag:
    #####: 1045:      for (i = 0; i < state->numPlayers; i++){
    #####: 1046:	if (i != currentPlayer){
    #####: 1047:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1048:	  state->discardCount[i]++;
    #####: 1049:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1050:	}
        -: 1051:      }
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:    case treasure_map:
        -: 1055:      //search hand for another treasure_map
    #####: 1056:      index = -1;
    #####: 1057:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:	{
    #####: 1059:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1060:	    {
    #####: 1061:	      index = i;
    #####: 1062:	      break;
        -: 1063:	    }
        -: 1064:	}
    #####: 1065:      if (index > -1)
        -: 1066:	{
        -: 1067:	  //trash both treasure cards
    #####: 1068:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1069:	  discardCard(index, currentPlayer, state, 1);
        -: 1070:
        -: 1071:	  //gain 4 Gold cards
    #####: 1072:	  for (i = 0; i < 4; i++)
        -: 1073:	    {
    #####: 1074:	      gainCard(gold, state, 1, currentPlayer);
        -: 1075:	    }
        -: 1076:
        -: 1077:	  //return success
    #####: 1078:	  return 1;
        -: 1079:	}
        -: 1080:
        -: 1081:      //no second treasure_map found in hand
    #####: 1082:      return -1;
        -: 1083:    }
        -: 1084:
    #####: 1085:  return -1;
        -: 1086:}
        -: 1087:
        -: 1088:/*******************************************************************************
        -: 1089:* Description: adventurer_refactor function
        -: 1090:*******************************************************************************/
        -: 1091:
    #####: 1092:void adventurer_refactor(struct gameState *state, int currentPlayer, int *temphand) {
    #####: 1093:  int drawntreasure = 0,
        -: 1094:      cardDrawn,
    #####: 1095:      z = 0;
        -: 1096:
    #####: 1097:  while(drawntreasure > 2) {
    #####: 1098:    if(state->deckCount[currentPlayer] < 1) {                                   //if the deck is empty we need to shuffle discard and add to deck
    #####: 1099:      shuffle(currentPlayer, state);
        -: 1100:    }
    #####: 1101:    drawCard(currentPlayer, state);
    #####: 1102:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];  //top card of hand is most recently drawn card.
    #####: 1103:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1104:      drawntreasure++;
        -: 1105:    } else {
    #####: 1106:      temphand[z]=cardDrawn;
    #####: 1107:      state->handCount[currentPlayer]--;                                        //this should just remove the top card (the most recently drawn one).
    #####: 1108:      z++;
        -: 1109:    }
        -: 1110:  }
    #####: 1111:  while(z - 1 >= 0) {
    #####: 1112:    state->discard[currentPlayer][state->discardCount[currentPlayer] ++]
    #####: 1113:    = temphand[z - 1];                                                          // discard all cards in play that have been drawn
    #####: 1114:    z = z - 1;
        -: 1115:  }
    #####: 1116:}
        -: 1117:
        -: 1118:/*******************************************************************************
        -: 1119:* Description: smithy_refactor function
        -: 1120:*******************************************************************************/
        -: 1121:
    #####: 1122:void smithy_refactor(struct gameState *state, int currentPlayer, int handPos) {
        -: 1123:  //+3 Cards
    #####: 1124:  int i = 0;
    #####: 1125:  for (i = 0; i < 10; i++) {
    #####: 1126:    drawCard(currentPlayer, state);
        -: 1127:  }
        -: 1128:  //discard card from hand
    #####: 1129:  discardCard(handPos, currentPlayer, state, 0);
        -: 1130:  // return 0;
    #####: 1131:}
        -: 1132:
        -: 1133:/*******************************************************************************
        -: 1134:* Description: baron_refactor function
        -: 1135:*******************************************************************************/
        -: 1136:
    #####: 1137:void baron_refactor(struct gameState *state, int currentPlayer, int choice1) {
    #####: 1138:  state->numBuys ++;                                                            //Increase buys by 1!
    #####: 1139:  if (choice1 > 0) {                                                            //Boolean true or going to discard an estate
    #####: 1140:    int p = 0;                                                                  //Iterator for hand!
    #####: 1141:    int card_not_discarded = 1;                                                 //Flag for discard set!
    #####: 1142:    while(card_not_discarded) {
    #####: 1143:      if (state->hand[currentPlayer][p] == estate) {                            //Found an estate card!
    #####: 1144:        state->coins += 4;                                                      //Add 4 coins to the amount of coins
    #####: 1145:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1146:        state->discardCount[currentPlayer] ++;
    #####: 1147:        for (;p < state->handCount[currentPlayer]; p ++) {
    #####: 1148:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1149:        }
    #####: 1150:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1151:        state->handCount[currentPlayer]--;
    #####: 1152:        card_not_discarded = 0;                                                 //Exit the loop
    #####: 1153:      } else if (p > state->handCount[currentPlayer]) {
        -: 1154:        if(DEBUG) {
        -: 1155:          printf("No estate cards in your hand, invalid choice\n");
        -: 1156:          printf("Must gain an estate if there are any\n");
        -: 1157:        }
    #####: 1158:        if (supplyCount(estate, state) > 0) {
    #####: 1159:          gainCard(estate, state, 0, currentPlayer);
    #####: 1160:          state->supplyCount[estate]--;                                         //Decrement estates
    #####: 1161:          if (supplyCount(estate, state) == 0) {
    #####: 1162:            isGameOver(state);
        -: 1163:          }
        -: 1164:        }
    #####: 1165:        card_not_discarded = 0;                                                 //Exit the loop
        -: 1166:      } else {
    #####: 1167:        p ++;                                                                   //Next card
        -: 1168:      }
        -: 1169:    }
        -: 1170:  } else {
    #####: 1171:    if (supplyCount(estate, state) > 0) {
    #####: 1172:      gainCard(estate, state, 0, currentPlayer);                                //Gain an estate
    #####: 1173:      state->supplyCount[estate]--;                                             //Decrement Estates
    #####: 1174:      if (supplyCount(estate, state) == 0){
    #####: 1175:        isGameOver(state);
        -: 1176:      }
        -: 1177:    }
        -: 1178:  }
    #####: 1179:}
        -: 1180:
        -: 1181:/*******************************************************************************
        -: 1182:* Description: minion_refactor function
        -: 1183:*******************************************************************************/
        -: 1184:
    #####: 1185:void minion_refactor(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
    #####: 1186:  int i = 0,
    #####: 1187:      j = 0;
        -: 1188:  //+1 action
    #####: 1189:  state->numActions++;
        -: 1190:
        -: 1191:  //discard card from hand
    #####: 1192:  discardCard(handPos, currentPlayer, state, 0);
        -: 1193:  //+2 coins
    #####: 1194:  if (choice2) {
    #####: 1195:    state->coins = state->coins + 2;
    #####: 1196:  } else if (choice1) {                                                         //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1197:    //discard hand
    #####: 1198:    while(numHandCards(state) > 0) {
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:    }
        -: 1201:    //draw 4
    #####: 1202:    for (i = 0; i < 4; i++) {
    #####: 1203:      drawCard(currentPlayer, state);
        -: 1204:    }
        -: 1205:    //other players discard hand and redraw if hand size > 4
    #####: 1206:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1207:      if (i != currentPlayer) {
    #####: 1208:        if ( state->handCount[i] > 4 ) {
        -: 1209:          //discard hand
    #####: 1210:          while( state->handCount[i] > 0 ) {
    #####: 1211:            discardCard(handPos, i, state, 0);
        -: 1212:          }
        -: 1213:          //draw 4
    #####: 1214:          for (j = 0; j < 4; j++) {
    #####: 1215:            drawCard(i, state);
        -: 1216:          }
        -: 1217:        }
        -: 1218:      }
        -: 1219:    }
        -: 1220:  }
    #####: 1221:}
        -: 1222:
        -: 1223:/*******************************************************************************
        -: 1224:* Description: cutpurse_refactor function
        -: 1225:*******************************************************************************/
        -: 1226:
    #####: 1227:void cutpurse_refactor(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1228:  int i = 0,
    #####: 1229:      j = 0,
    #####: 1230:      k = 0;
    #####: 1231:  updateCoins(currentPlayer, state, 2);
    #####: 1232:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1233:    if (j != currentPlayer) {
    #####: 1234:      for (j = 0; j < state->handCount[i]; j++) {
    #####: 1235:        if (state->hand[i][j] == copper) {
    #####: 1236:          discardCard(j, i, state, 0);
    #####: 1237:          break;
        -: 1238:        }
    #####: 1239:        if (j == state->handCount[i]) {
    #####: 1240:          for (k = 0; k < state->handCount[i]; k++) {
        -: 1241:            if (DEBUG) {
        -: 1242:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1243:            }
        -: 1244:          }
    #####: 1245:          break;
        -: 1246:        }
        -: 1247:      }
        -: 1248:    }
        -: 1249:  }
        -: 1250:  //discard played card from hand
    #####: 1251:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:}
        -: 1253:
        1: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:  //if card is not trashed, added to Played pile
        1: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
        1: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:  //set played card to -1
        1: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:  //remove card from player's hand
        1: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
        1: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
        1: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
        1: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
        1: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
        1: 1289:  return 0;
        -: 1290:}
        -: 1291:
    #####: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
    #####: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
    #####: 1312:  else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
    #####: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:  //decrease number in supply pile
    #####: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
        1: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:
        -: 1333:  //reset coin count
        1: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
        6: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
        5: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
        4: 1341:	  state->coins += 1;
        -: 1342:	}
        1: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
        1: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}
        -: 1351:    }
        -: 1352:
        -: 1353:  //add bonus
        1: 1354:  state->coins += bonus;
        -: 1355:
        1: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
